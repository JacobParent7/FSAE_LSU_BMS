
Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b68  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  08007cf0  08007cf0  00008cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008368  08008368  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008368  08008368  00009368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008370  08008370  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008370  08008370  00009370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008374  08008374  00009374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008378  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001d4  0800854c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800854c  0000a5e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012150  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d1  00000000  00000000  0001c34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  0001eb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d62  00000000  00000000  0001fc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020eee  00000000  00000000  000209aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013641  00000000  00000000  00041898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7859  00000000  00000000  00054ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a54  00000000  00000000  0011c778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001221cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cd8 	.word	0x08007cd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	08007cd8 	.word	0x08007cd8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_uldivmod>:
 8000dbc:	b953      	cbnz	r3, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dbe:	b94a      	cbnz	r2, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	2800      	cmpeq	r0, #0
 8000dc6:	bf1c      	itt	ne
 8000dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd0:	f000 b968 	b.w	80010a4 <__aeabi_idiv0>
 8000dd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ddc:	f000 f806 	bl	8000dec <__udivmoddi4>
 8000de0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr

08000dec <__udivmoddi4>:
 8000dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df0:	9d08      	ldr	r5, [sp, #32]
 8000df2:	460c      	mov	r4, r1
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d14e      	bne.n	8000e96 <__udivmoddi4+0xaa>
 8000df8:	4694      	mov	ip, r2
 8000dfa:	458c      	cmp	ip, r1
 8000dfc:	4686      	mov	lr, r0
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	d962      	bls.n	8000eca <__udivmoddi4+0xde>
 8000e04:	b14a      	cbz	r2, 8000e1a <__udivmoddi4+0x2e>
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	4091      	lsls	r1, r2
 8000e0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e14:	4319      	orrs	r1, r3
 8000e16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e22:	fb07 1114 	mls	r1, r7, r4, r1
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e32:	fb04 f106 	mul.w	r1, r4, r6
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d90a      	bls.n	8000e50 <__udivmoddi4+0x64>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e42:	f080 8110 	bcs.w	8001066 <__udivmoddi4+0x27a>
 8000e46:	4299      	cmp	r1, r3
 8000e48:	f240 810d 	bls.w	8001066 <__udivmoddi4+0x27a>
 8000e4c:	3c02      	subs	r4, #2
 8000e4e:	4463      	add	r3, ip
 8000e50:	1a59      	subs	r1, r3, r1
 8000e52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e56:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5a:	fb00 f606 	mul.w	r6, r0, r6
 8000e5e:	fa1f f38e 	uxth.w	r3, lr
 8000e62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e66:	429e      	cmp	r6, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x94>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e72:	f080 80fa 	bcs.w	800106a <__udivmoddi4+0x27e>
 8000e76:	429e      	cmp	r6, r3
 8000e78:	f240 80f7 	bls.w	800106a <__udivmoddi4+0x27e>
 8000e7c:	4463      	add	r3, ip
 8000e7e:	3802      	subs	r0, #2
 8000e80:	2100      	movs	r1, #0
 8000e82:	1b9b      	subs	r3, r3, r6
 8000e84:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e88:	b11d      	cbz	r5, 8000e92 <__udivmoddi4+0xa6>
 8000e8a:	40d3      	lsrs	r3, r2
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d905      	bls.n	8000ea6 <__udivmoddi4+0xba>
 8000e9a:	b10d      	cbz	r5, 8000ea0 <__udivmoddi4+0xb4>
 8000e9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e7f5      	b.n	8000e92 <__udivmoddi4+0xa6>
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d146      	bne.n	8000f3c <__udivmoddi4+0x150>
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xcc>
 8000eb2:	4290      	cmp	r0, r2
 8000eb4:	f0c0 80ee 	bcc.w	8001094 <__udivmoddi4+0x2a8>
 8000eb8:	1a86      	subs	r6, r0, r2
 8000eba:	eb64 0303 	sbc.w	r3, r4, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	2d00      	cmp	r5, #0
 8000ec2:	d0e6      	beq.n	8000e92 <__udivmoddi4+0xa6>
 8000ec4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ec8:	e7e3      	b.n	8000e92 <__udivmoddi4+0xa6>
 8000eca:	2a00      	cmp	r2, #0
 8000ecc:	f040 808f 	bne.w	8000fee <__udivmoddi4+0x202>
 8000ed0:	eba1 040c 	sub.w	r4, r1, ip
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eda:	fa1f f78c 	uxth.w	r7, ip
 8000ede:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ee2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ee6:	fb07 f006 	mul.w	r0, r7, r6
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef2:	4298      	cmp	r0, r3
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x11c>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x11a>
 8000f00:	4298      	cmp	r0, r3
 8000f02:	f200 80cb 	bhi.w	800109c <__udivmoddi4+0x2b0>
 8000f06:	4626      	mov	r6, r4
 8000f08:	1a1c      	subs	r4, r3, r0
 8000f0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f12:	fb00 f707 	mul.w	r7, r0, r7
 8000f16:	fa1f f38e 	uxth.w	r3, lr
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	429f      	cmp	r7, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x148>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2a:	d202      	bcs.n	8000f32 <__udivmoddi4+0x146>
 8000f2c:	429f      	cmp	r7, r3
 8000f2e:	f200 80ae 	bhi.w	800108e <__udivmoddi4+0x2a2>
 8000f32:	4620      	mov	r0, r4
 8000f34:	1bdb      	subs	r3, r3, r7
 8000f36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f3a:	e7a5      	b.n	8000e88 <__udivmoddi4+0x9c>
 8000f3c:	f1c1 0720 	rsb	r7, r1, #32
 8000f40:	408b      	lsls	r3, r1
 8000f42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f4a:	fa24 f607 	lsr.w	r6, r4, r7
 8000f4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f52:	fbb6 f8f9 	udiv	r8, r6, r9
 8000f56:	fa1f fe8c 	uxth.w	lr, ip
 8000f5a:	fb09 6618 	mls	r6, r9, r8, r6
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	408c      	lsls	r4, r1
 8000f64:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f68:	fb08 f00e 	mul.w	r0, r8, lr
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	0c23      	lsrs	r3, r4, #16
 8000f70:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f74:	4298      	cmp	r0, r3
 8000f76:	fa02 f201 	lsl.w	r2, r2, r1
 8000f7a:	d90a      	bls.n	8000f92 <__udivmoddi4+0x1a6>
 8000f7c:	eb1c 0303 	adds.w	r3, ip, r3
 8000f80:	f108 36ff 	add.w	r6, r8, #4294967295
 8000f84:	f080 8081 	bcs.w	800108a <__udivmoddi4+0x29e>
 8000f88:	4298      	cmp	r0, r3
 8000f8a:	d97e      	bls.n	800108a <__udivmoddi4+0x29e>
 8000f8c:	f1a8 0802 	sub.w	r8, r8, #2
 8000f90:	4463      	add	r3, ip
 8000f92:	1a1e      	subs	r6, r3, r0
 8000f94:	fbb6 f3f9 	udiv	r3, r6, r9
 8000f98:	fb09 6613 	mls	r6, r9, r3, r6
 8000f9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fa0:	b2a4      	uxth	r4, r4
 8000fa2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x1d0>
 8000faa:	eb1c 0404 	adds.w	r4, ip, r4
 8000fae:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fb2:	d266      	bcs.n	8001082 <__udivmoddi4+0x296>
 8000fb4:	45a6      	cmp	lr, r4
 8000fb6:	d964      	bls.n	8001082 <__udivmoddi4+0x296>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4464      	add	r4, ip
 8000fbc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000fc0:	fba0 8302 	umull	r8, r3, r0, r2
 8000fc4:	eba4 040e 	sub.w	r4, r4, lr
 8000fc8:	429c      	cmp	r4, r3
 8000fca:	46c6      	mov	lr, r8
 8000fcc:	461e      	mov	r6, r3
 8000fce:	d350      	bcc.n	8001072 <__udivmoddi4+0x286>
 8000fd0:	d04d      	beq.n	800106e <__udivmoddi4+0x282>
 8000fd2:	b155      	cbz	r5, 8000fea <__udivmoddi4+0x1fe>
 8000fd4:	ebba 030e 	subs.w	r3, sl, lr
 8000fd8:	eb64 0406 	sbc.w	r4, r4, r6
 8000fdc:	fa04 f707 	lsl.w	r7, r4, r7
 8000fe0:	40cb      	lsrs	r3, r1
 8000fe2:	431f      	orrs	r7, r3
 8000fe4:	40cc      	lsrs	r4, r1
 8000fe6:	e9c5 7400 	strd	r7, r4, [r5]
 8000fea:	2100      	movs	r1, #0
 8000fec:	e751      	b.n	8000e92 <__udivmoddi4+0xa6>
 8000fee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff2:	f1c2 0320 	rsb	r3, r2, #32
 8000ff6:	40d9      	lsrs	r1, r3
 8000ff8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ffc:	fa20 f303 	lsr.w	r3, r0, r3
 8001000:	fa00 fe02 	lsl.w	lr, r0, r2
 8001004:	fbb1 f0f8 	udiv	r0, r1, r8
 8001008:	fb08 1110 	mls	r1, r8, r0, r1
 800100c:	4094      	lsls	r4, r2
 800100e:	431c      	orrs	r4, r3
 8001010:	fa1f f78c 	uxth.w	r7, ip
 8001014:	0c23      	lsrs	r3, r4, #16
 8001016:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800101a:	fb00 f107 	mul.w	r1, r0, r7
 800101e:	4299      	cmp	r1, r3
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x248>
 8001022:	eb1c 0303 	adds.w	r3, ip, r3
 8001026:	f100 36ff 	add.w	r6, r0, #4294967295
 800102a:	d22c      	bcs.n	8001086 <__udivmoddi4+0x29a>
 800102c:	4299      	cmp	r1, r3
 800102e:	d92a      	bls.n	8001086 <__udivmoddi4+0x29a>
 8001030:	3802      	subs	r0, #2
 8001032:	4463      	add	r3, ip
 8001034:	1a5b      	subs	r3, r3, r1
 8001036:	fbb3 f1f8 	udiv	r1, r3, r8
 800103a:	fb08 3311 	mls	r3, r8, r1, r3
 800103e:	b2a4      	uxth	r4, r4
 8001040:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001044:	fb01 f307 	mul.w	r3, r1, r7
 8001048:	42a3      	cmp	r3, r4
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x272>
 800104c:	eb1c 0404 	adds.w	r4, ip, r4
 8001050:	f101 36ff 	add.w	r6, r1, #4294967295
 8001054:	d213      	bcs.n	800107e <__udivmoddi4+0x292>
 8001056:	42a3      	cmp	r3, r4
 8001058:	d911      	bls.n	800107e <__udivmoddi4+0x292>
 800105a:	3902      	subs	r1, #2
 800105c:	4464      	add	r4, ip
 800105e:	1ae4      	subs	r4, r4, r3
 8001060:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001064:	e73b      	b.n	8000ede <__udivmoddi4+0xf2>
 8001066:	4604      	mov	r4, r0
 8001068:	e6f2      	b.n	8000e50 <__udivmoddi4+0x64>
 800106a:	4608      	mov	r0, r1
 800106c:	e708      	b.n	8000e80 <__udivmoddi4+0x94>
 800106e:	45c2      	cmp	sl, r8
 8001070:	d2af      	bcs.n	8000fd2 <__udivmoddi4+0x1e6>
 8001072:	ebb8 0e02 	subs.w	lr, r8, r2
 8001076:	eb63 060c 	sbc.w	r6, r3, ip
 800107a:	3801      	subs	r0, #1
 800107c:	e7a9      	b.n	8000fd2 <__udivmoddi4+0x1e6>
 800107e:	4631      	mov	r1, r6
 8001080:	e7ed      	b.n	800105e <__udivmoddi4+0x272>
 8001082:	4603      	mov	r3, r0
 8001084:	e79a      	b.n	8000fbc <__udivmoddi4+0x1d0>
 8001086:	4630      	mov	r0, r6
 8001088:	e7d4      	b.n	8001034 <__udivmoddi4+0x248>
 800108a:	46b0      	mov	r8, r6
 800108c:	e781      	b.n	8000f92 <__udivmoddi4+0x1a6>
 800108e:	4463      	add	r3, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e74f      	b.n	8000f34 <__udivmoddi4+0x148>
 8001094:	4606      	mov	r6, r0
 8001096:	4623      	mov	r3, r4
 8001098:	4608      	mov	r0, r1
 800109a:	e711      	b.n	8000ec0 <__udivmoddi4+0xd4>
 800109c:	3e02      	subs	r6, #2
 800109e:	4463      	add	r3, ip
 80010a0:	e732      	b.n	8000f08 <__udivmoddi4+0x11c>
 80010a2:	bf00      	nop

080010a4 <__aeabi_idiv0>:
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <SpiCRC16>:
 * @param  data: Buffer containing the data
 * @param  length: Length of data
 * @retval uint16_t: Calculated CRC value
 */
uint16_t SpiCRC16(uint8_t* pBuf, int sendLen)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0xFFFF;
 80010b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010b6:	81fb      	strh	r3, [r7, #14]
    int i;

    for (i = 0; i < sendLen; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	e014      	b.n	80010e8 <SpiCRC16+0x40>
    {
        wCRC ^= (uint16_t)(pBuf[i] & 0x00FF);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	89fb      	ldrh	r3, [r7, #14]
 80010ca:	4053      	eors	r3, r2
 80010cc:	81fb      	strh	r3, [r7, #14]
        wCRC = crc16_table[wCRC & 0x00FF] ^ (wCRC >> 8);
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SpiCRC16+0x54>)
 80010d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4053      	eors	r3, r2
 80010e0:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < sendLen; i++)
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbe6      	blt.n	80010be <SpiCRC16+0x16>
    }

    //printf("CRC16 calculated: 0x%04X\n", wCRC);

    return wCRC;
 80010f0:	89fb      	ldrh	r3, [r7, #14]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	08007de0 	.word	0x08007de0

08001100 <SPI1_DisableForGPIO>:
/**
 * @brief  Temporarily disable SPI1 to control MOSI pin as GPIO
 * @retval None
 */
void SPI1_DisableForGPIO(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
  // Disable SPI1
  __HAL_SPI_DISABLE(&hspi1);
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <SPI1_DisableForGPIO+0x48>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <SPI1_DisableForGPIO+0x48>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001114:	601a      	str	r2, [r3, #0]

  // Configure MOSI pin (PA7) as GPIO output
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_7;        // PA7 is SPI1_MOSI on most STM32F4 boards
 8001124:	2380      	movs	r3, #128	@ 0x80
 8001126:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <SPI1_DisableForGPIO+0x4c>)
 800113a:	f002 f9c9 	bl	80034d0 <HAL_GPIO_Init>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000358 	.word	0x20000358
 800114c:	40020000 	.word	0x40020000

08001150 <SPI1_RestoreFromGPIO>:
/**
 * @brief  Restore SPI1 configuration for normal operation
 * @retval None
 */
void SPI1_RestoreFromGPIO(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
  // Re-initialize SPI1 pins to their original function
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  // SCK pin (PA5)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001164:	2320      	movs	r3, #32
 8001166:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001174:	2305      	movs	r3, #5
 8001176:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <SPI1_RestoreFromGPIO+0x68>)
 800117e:	f002 f9a7 	bl	80034d0 <HAL_GPIO_Init>

  // MISO pin (PA6)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001182:	2340      	movs	r3, #64	@ 0x40
 8001184:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <SPI1_RestoreFromGPIO+0x68>)
 800118c:	f002 f9a0 	bl	80034d0 <HAL_GPIO_Init>

  // MOSI pin (PA7)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <SPI1_RestoreFromGPIO+0x68>)
 800119a:	f002 f999 	bl	80034d0 <HAL_GPIO_Init>

  // Re-enable SPI1
  __HAL_SPI_ENABLE(&hspi1);
 800119e:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <SPI1_RestoreFromGPIO+0x6c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <SPI1_RestoreFromGPIO+0x6c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011ac:	601a      	str	r2, [r3, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020000 	.word	0x40020000
 80011bc:	20000358 	.word	0x20000358

080011c0 <BQ79600_WakeUp>:
 * @param  num_stacked_devices: Number of stacked BQ79616-Q1 devices
 * @param  need_double_wake: Set to true if device was previously shut down using SHUTDOWN ping
 * @retval HAL status
*/
HAL_StatusTypeDef BQ79600_WakeUp(uint8_t num_stacked_devices, bool need_double_wake)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71bb      	strb	r3, [r7, #6]

  // 1. Send WAKE ping - begin by disabling SPI to control MOSI directly
  SPI1_DisableForGPIO();
 80011d0:	f7ff ff96 	bl	8001100 <SPI1_DisableForGPIO>

  // Configure NSS pin (PA4) as GPIO output
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_4;  // NSS pin
 80011e4:	2310      	movs	r3, #16
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	4831      	ldr	r0, [pc, #196]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 80011fc:	f002 f968 	bl	80034d0 <HAL_GPIO_Init>

  // If device was shut down with SHUTDOWN ping, we need two WAKE pings
  if (need_double_wake) {
 8001200:	79bb      	ldrb	r3, [r7, #6]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d021      	beq.n	800124a <BQ79600_WakeUp+0x8a>
    // First WAKE ping
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 8001206:	2200      	movs	r2, #0
 8001208:	2110      	movs	r1, #16
 800120a:	482d      	ldr	r0, [pc, #180]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 800120c:	f002 fb15 	bl	800383a <HAL_GPIO_WritePin>
    Delay_us(2);  // Wait 2us
 8001210:	2002      	movs	r0, #2
 8001212:	f000 feb3 	bl	8001f7c <Delay_us>

    // Pull MOSI low for 2.75ms (tHLD_WAKE)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	4829      	ldr	r0, [pc, #164]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 800121c:	f002 fb0d 	bl	800383a <HAL_GPIO_WritePin>
    Delay_us(BQ79600_WAKE_PING_TIME_US);  // 2.75ms
 8001220:	f640 20be 	movw	r0, #2750	@ 0xabe
 8001224:	f000 feaa 	bl	8001f7c <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2180      	movs	r1, #128	@ 0x80
 800122c:	4824      	ldr	r0, [pc, #144]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 800122e:	f002 fb04 	bl	800383a <HAL_GPIO_WritePin>

    Delay_us(2);  // Wait 2us
 8001232:	2002      	movs	r0, #2
 8001234:	f000 fea2 	bl	8001f7c <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Bring nCS back high
 8001238:	2201      	movs	r2, #1
 800123a:	2110      	movs	r1, #16
 800123c:	4820      	ldr	r0, [pc, #128]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 800123e:	f002 fafc 	bl	800383a <HAL_GPIO_WritePin>

    // Wait for first wake ping to process (3.5ms)
    Delay_us(BQ79600_WAKE_SETUP_TIME_US);  // 3.5ms
 8001242:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001246:	f000 fe99 	bl	8001f7c <Delay_us>
  }

  // Send (second) WAKE ping
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 800124a:	2200      	movs	r2, #0
 800124c:	2110      	movs	r1, #16
 800124e:	481c      	ldr	r0, [pc, #112]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 8001250:	f002 faf3 	bl	800383a <HAL_GPIO_WritePin>
  Delay_us(2);  // Wait 2us
 8001254:	2002      	movs	r0, #2
 8001256:	f000 fe91 	bl	8001f7c <Delay_us>

  // Pull MOSI low for 2.75ms (tHLD_WAKE)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	4818      	ldr	r0, [pc, #96]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 8001260:	f002 faeb 	bl	800383a <HAL_GPIO_WritePin>
  Delay_us(BQ79600_WAKE_PING_TIME_US);  // 2.75ms
 8001264:	f640 20be 	movw	r0, #2750	@ 0xabe
 8001268:	f000 fe88 	bl	8001f7c <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2180      	movs	r1, #128	@ 0x80
 8001270:	4813      	ldr	r0, [pc, #76]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 8001272:	f002 fae2 	bl	800383a <HAL_GPIO_WritePin>

  Delay_us(2);  // Wait 2us
 8001276:	2002      	movs	r0, #2
 8001278:	f000 fe80 	bl	8001f7c <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Bring nCS back high
 800127c:	2201      	movs	r2, #1
 800127e:	2110      	movs	r1, #16
 8001280:	480f      	ldr	r0, [pc, #60]	@ (80012c0 <BQ79600_WakeUp+0x100>)
 8001282:	f002 fada 	bl	800383a <HAL_GPIO_WritePin>

  // Restore SPI configuration
  SPI1_RestoreFromGPIO();
 8001286:	f7ff ff63 	bl	8001150 <SPI1_RestoreFromGPIO>

  // 2. Wait for tSU(WAKE_SHUT) to allow BQ79600-Q1 to enter ACTIVE mode (3.5ms)
  HAL_Delay(4);
 800128a:	2004      	movs	r0, #4
 800128c:	f001 fa18 	bl	80026c0 <HAL_Delay>

  // 4. Send a single device write to set CONTROL1[SEND_WAKE]=1, which wakes up all stacked devices
  tx_data[0] = 0x90;  // Single device 1 byte write
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <BQ79600_WakeUp+0x104>)
 8001292:	2290      	movs	r2, #144	@ 0x90
 8001294:	701a      	strb	r2, [r3, #0]
  tx_data[1] = 0x00;  // Device address
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <BQ79600_WakeUp+0x104>)
 8001298:	2200      	movs	r2, #0
 800129a:	705a      	strb	r2, [r3, #1]
  tx_data[2] = 0x03;  // MSB register address
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <BQ79600_WakeUp+0x104>)
 800129e:	2203      	movs	r2, #3
 80012a0:	709a      	strb	r2, [r3, #2]
  tx_data[3] = 0x09;  // LSB register address
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <BQ79600_WakeUp+0x104>)
 80012a4:	2209      	movs	r2, #9
 80012a6:	70da      	strb	r2, [r3, #3]
  tx_data[4] = 0x20;  // 00100000 (enable SEND_WAKE)
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <BQ79600_WakeUp+0x104>)
 80012aa:	2220      	movs	r2, #32
 80012ac:	711a      	strb	r2, [r3, #4]

  SpiWrite(5);
 80012ae:	2005      	movs	r0, #5
 80012b0:	f000 f982 	bl	80015b8 <SpiWrite>

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020000 	.word	0x40020000
 80012c4:	200001f8 	.word	0x200001f8

080012c8 <SpiAutoAddress>:
 * @brief  Auto address the bq79600s. Set all devices to stack mode, set the highest device as top of stack, synchronize the DLL.
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef SpiAutoAddress(uint8_t num_stacked_devices)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	//SYNC DLL
	tx_data[0] = 0xB0;
 80012d2:	4bb5      	ldr	r3, [pc, #724]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80012d4:	22b0      	movs	r2, #176	@ 0xb0
 80012d6:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80012d8:	4bb3      	ldr	r3, [pc, #716]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80012da:	2203      	movs	r2, #3
 80012dc:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x43;
 80012de:	4bb2      	ldr	r3, [pc, #712]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80012e0:	2243      	movs	r2, #67	@ 0x43
 80012e2:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80012e4:	4bb0      	ldr	r3, [pc, #704]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80012ea:	2004      	movs	r0, #4
 80012ec:	f000 f964 	bl	80015b8 <SpiWrite>

	tx_data[0] = 0xB0;
 80012f0:	4bad      	ldr	r3, [pc, #692]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80012f2:	22b0      	movs	r2, #176	@ 0xb0
 80012f4:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80012f6:	4bac      	ldr	r3, [pc, #688]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80012f8:	2203      	movs	r2, #3
 80012fa:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x44;
 80012fc:	4baa      	ldr	r3, [pc, #680]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80012fe:	2244      	movs	r2, #68	@ 0x44
 8001300:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001302:	4ba9      	ldr	r3, [pc, #676]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001304:	2200      	movs	r2, #0
 8001306:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001308:	2004      	movs	r0, #4
 800130a:	f000 f955 	bl	80015b8 <SpiWrite>

	tx_data[0] = 0xB0;
 800130e:	4ba6      	ldr	r3, [pc, #664]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001310:	22b0      	movs	r2, #176	@ 0xb0
 8001312:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001314:	4ba4      	ldr	r3, [pc, #656]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001316:	2203      	movs	r2, #3
 8001318:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x45;
 800131a:	4ba3      	ldr	r3, [pc, #652]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800131c:	2245      	movs	r2, #69	@ 0x45
 800131e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001320:	4ba1      	ldr	r3, [pc, #644]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001322:	2200      	movs	r2, #0
 8001324:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001326:	2004      	movs	r0, #4
 8001328:	f000 f946 	bl	80015b8 <SpiWrite>

	tx_data[0] = 0xB0;
 800132c:	4b9e      	ldr	r3, [pc, #632]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800132e:	22b0      	movs	r2, #176	@ 0xb0
 8001330:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001332:	4b9d      	ldr	r3, [pc, #628]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001334:	2203      	movs	r2, #3
 8001336:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x46;
 8001338:	4b9b      	ldr	r3, [pc, #620]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800133a:	2246      	movs	r2, #70	@ 0x46
 800133c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800133e:	4b9a      	ldr	r3, [pc, #616]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001340:	2200      	movs	r2, #0
 8001342:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001344:	2004      	movs	r0, #4
 8001346:	f000 f937 	bl	80015b8 <SpiWrite>

	tx_data[0] = 0xB0;
 800134a:	4b97      	ldr	r3, [pc, #604]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800134c:	22b0      	movs	r2, #176	@ 0xb0
 800134e:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001350:	4b95      	ldr	r3, [pc, #596]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001352:	2203      	movs	r2, #3
 8001354:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x47;
 8001356:	4b94      	ldr	r3, [pc, #592]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001358:	2247      	movs	r2, #71	@ 0x47
 800135a:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800135c:	4b92      	ldr	r3, [pc, #584]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800135e:	2200      	movs	r2, #0
 8001360:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001362:	2004      	movs	r0, #4
 8001364:	f000 f928 	bl	80015b8 <SpiWrite>

	tx_data[0] = 0xB0;
 8001368:	4b8f      	ldr	r3, [pc, #572]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800136a:	22b0      	movs	r2, #176	@ 0xb0
 800136c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800136e:	4b8e      	ldr	r3, [pc, #568]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001370:	2203      	movs	r2, #3
 8001372:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x48;
 8001374:	4b8c      	ldr	r3, [pc, #560]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001376:	2248      	movs	r2, #72	@ 0x48
 8001378:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800137a:	4b8b      	ldr	r3, [pc, #556]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800137c:	2200      	movs	r2, #0
 800137e:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001380:	2004      	movs	r0, #4
 8001382:	f000 f919 	bl	80015b8 <SpiWrite>

	tx_data[0] = 0xB0;
 8001386:	4b88      	ldr	r3, [pc, #544]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001388:	22b0      	movs	r2, #176	@ 0xb0
 800138a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800138c:	4b86      	ldr	r3, [pc, #536]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800138e:	2203      	movs	r2, #3
 8001390:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x49;
 8001392:	4b85      	ldr	r3, [pc, #532]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001394:	2249      	movs	r2, #73	@ 0x49
 8001396:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001398:	4b83      	ldr	r3, [pc, #524]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800139a:	2200      	movs	r2, #0
 800139c:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800139e:	2004      	movs	r0, #4
 80013a0:	f000 f90a 	bl	80015b8 <SpiWrite>

	tx_data[0] = 0xB0;
 80013a4:	4b80      	ldr	r3, [pc, #512]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013a6:	22b0      	movs	r2, #176	@ 0xb0
 80013a8:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80013aa:	4b7f      	ldr	r3, [pc, #508]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013ac:	2203      	movs	r2, #3
 80013ae:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x4A;
 80013b0:	4b7d      	ldr	r3, [pc, #500]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013b2:	224a      	movs	r2, #74	@ 0x4a
 80013b4:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80013b6:	4b7c      	ldr	r3, [pc, #496]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80013bc:	2004      	movs	r0, #4
 80013be:	f000 f8fb 	bl	80015b8 <SpiWrite>

	//Enable auto-addressing mode
	tx_data[0] = 0xD0;
 80013c2:	4b79      	ldr	r3, [pc, #484]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013c4:	22d0      	movs	r2, #208	@ 0xd0
 80013c6:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80013c8:	4b77      	ldr	r3, [pc, #476]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013ca:	2203      	movs	r2, #3
 80013cc:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x09;
 80013ce:	4b76      	ldr	r3, [pc, #472]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013d0:	2209      	movs	r2, #9
 80013d2:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x01;
 80013d4:	4b74      	ldr	r3, [pc, #464]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80013da:	2004      	movs	r0, #4
 80013dc:	f000 f8ec 	bl	80015b8 <SpiWrite>

	//Set device addresses
	tx_data[0] = 0xD0;
 80013e0:	4b71      	ldr	r3, [pc, #452]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013e2:	22d0      	movs	r2, #208	@ 0xd0
 80013e4:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80013e6:	4b70      	ldr	r3, [pc, #448]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013e8:	2203      	movs	r2, #3
 80013ea:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x06;
 80013ec:	4b6e      	ldr	r3, [pc, #440]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013ee:	2206      	movs	r2, #6
 80013f0:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80013f2:	4b6d      	ldr	r3, [pc, #436]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80013f8:	2004      	movs	r0, #4
 80013fa:	f000 f8dd 	bl	80015b8 <SpiWrite>

	tx_data[0] = 0xD0;
 80013fe:	4b6a      	ldr	r3, [pc, #424]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001400:	22d0      	movs	r2, #208	@ 0xd0
 8001402:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001404:	4b68      	ldr	r3, [pc, #416]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001406:	2203      	movs	r2, #3
 8001408:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x06;
 800140a:	4b67      	ldr	r3, [pc, #412]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800140c:	2206      	movs	r2, #6
 800140e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x01;
 8001410:	4b65      	ldr	r3, [pc, #404]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001412:	2201      	movs	r2, #1
 8001414:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001416:	2004      	movs	r0, #4
 8001418:	f000 f8ce 	bl	80015b8 <SpiWrite>

	//set all stacked devices as stack
	tx_data[0] = 0xD0;
 800141c:	4b62      	ldr	r3, [pc, #392]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800141e:	22d0      	movs	r2, #208	@ 0xd0
 8001420:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001422:	4b61      	ldr	r3, [pc, #388]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001424:	2203      	movs	r2, #3
 8001426:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x08;
 8001428:	4b5f      	ldr	r3, [pc, #380]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800142a:	2208      	movs	r2, #8
 800142c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x02;
 800142e:	4b5e      	ldr	r3, [pc, #376]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001430:	2202      	movs	r2, #2
 8001432:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001434:	2004      	movs	r0, #4
 8001436:	f000 f8bf 	bl	80015b8 <SpiWrite>

	//set top device to be top of stack
	tx_data[0] = 0x90;
 800143a:	4b5b      	ldr	r3, [pc, #364]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800143c:	2290      	movs	r2, #144	@ 0x90
 800143e:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x01;
 8001440:	4b59      	ldr	r3, [pc, #356]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001442:	2201      	movs	r2, #1
 8001444:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x03;
 8001446:	4b58      	ldr	r3, [pc, #352]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001448:	2203      	movs	r2, #3
 800144a:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x08;
 800144c:	4b56      	ldr	r3, [pc, #344]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800144e:	2208      	movs	r2, #8
 8001450:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x03;
 8001452:	4b55      	ldr	r3, [pc, #340]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001454:	2203      	movs	r2, #3
 8001456:	711a      	strb	r2, [r3, #4]
	SpiWrite(5);
 8001458:	2005      	movs	r0, #5
 800145a:	f000 f8ad 	bl	80015b8 <SpiWrite>

	//SYNC DLL
	tx_data[0] = 0xA0;
 800145e:	4b52      	ldr	r3, [pc, #328]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001460:	22a0      	movs	r2, #160	@ 0xa0
 8001462:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001464:	4b50      	ldr	r3, [pc, #320]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001466:	2203      	movs	r2, #3
 8001468:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x43;
 800146a:	4b4f      	ldr	r3, [pc, #316]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800146c:	2243      	movs	r2, #67	@ 0x43
 800146e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001470:	4b4d      	ldr	r3, [pc, #308]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001472:	2200      	movs	r2, #0
 8001474:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001476:	2102      	movs	r1, #2
 8001478:	2004      	movs	r0, #4
 800147a:	f000 f90f 	bl	800169c <SpiRead>

	tx_data[0] = 0xA0;
 800147e:	4b4a      	ldr	r3, [pc, #296]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001480:	22a0      	movs	r2, #160	@ 0xa0
 8001482:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001484:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001486:	2203      	movs	r2, #3
 8001488:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x44;
 800148a:	4b47      	ldr	r3, [pc, #284]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800148c:	2244      	movs	r2, #68	@ 0x44
 800148e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001490:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001492:	2200      	movs	r2, #0
 8001494:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001496:	2102      	movs	r1, #2
 8001498:	2004      	movs	r0, #4
 800149a:	f000 f8ff 	bl	800169c <SpiRead>

	tx_data[0] = 0xA0;
 800149e:	4b42      	ldr	r3, [pc, #264]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014a0:	22a0      	movs	r2, #160	@ 0xa0
 80014a2:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80014a4:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014a6:	2203      	movs	r2, #3
 80014a8:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x45;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014ac:	2245      	movs	r2, #69	@ 0x45
 80014ae:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80014b6:	2102      	movs	r1, #2
 80014b8:	2004      	movs	r0, #4
 80014ba:	f000 f8ef 	bl	800169c <SpiRead>

	tx_data[0] = 0xA0;
 80014be:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014c0:	22a0      	movs	r2, #160	@ 0xa0
 80014c2:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80014c4:	4b38      	ldr	r3, [pc, #224]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014c6:	2203      	movs	r2, #3
 80014c8:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x46;
 80014ca:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014cc:	2246      	movs	r2, #70	@ 0x46
 80014ce:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80014d0:	4b35      	ldr	r3, [pc, #212]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80014d6:	2102      	movs	r1, #2
 80014d8:	2004      	movs	r0, #4
 80014da:	f000 f8df 	bl	800169c <SpiRead>

	tx_data[0] = 0xA0;
 80014de:	4b32      	ldr	r3, [pc, #200]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014e0:	22a0      	movs	r2, #160	@ 0xa0
 80014e2:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80014e4:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x47;
 80014ea:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014ec:	2247      	movs	r2, #71	@ 0x47
 80014ee:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80014f6:	2102      	movs	r1, #2
 80014f8:	2004      	movs	r0, #4
 80014fa:	f000 f8cf 	bl	800169c <SpiRead>

	tx_data[0] = 0xA0;
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001500:	22a0      	movs	r2, #160	@ 0xa0
 8001502:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001506:	2203      	movs	r2, #3
 8001508:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x48;
 800150a:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800150c:	2248      	movs	r2, #72	@ 0x48
 800150e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001510:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001512:	2200      	movs	r2, #0
 8001514:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001516:	2102      	movs	r1, #2
 8001518:	2004      	movs	r0, #4
 800151a:	f000 f8bf 	bl	800169c <SpiRead>

	tx_data[0] = 0xA0;
 800151e:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001520:	22a0      	movs	r2, #160	@ 0xa0
 8001522:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001526:	2203      	movs	r2, #3
 8001528:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x49;
 800152a:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800152c:	2249      	movs	r2, #73	@ 0x49
 800152e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001530:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001532:	2200      	movs	r2, #0
 8001534:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001536:	2102      	movs	r1, #2
 8001538:	2004      	movs	r0, #4
 800153a:	f000 f8af 	bl	800169c <SpiRead>

	tx_data[0] = 0xA0;
 800153e:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001540:	22a0      	movs	r2, #160	@ 0xa0
 8001542:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001544:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001546:	2203      	movs	r2, #3
 8001548:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x4A;
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800154c:	224a      	movs	r2, #74	@ 0x4a
 800154e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001550:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001552:	2200      	movs	r2, #0
 8001554:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001556:	2102      	movs	r1, #2
 8001558:	2004      	movs	r0, #4
 800155a:	f000 f89f 	bl	800169c <SpiRead>
	tx_data[3] = 0x01;
	tx_data[4] = 0x14;
	SpiWrite(5);
	*/

	tx_data[0] = 0x80;
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 8001564:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001566:	2200      	movs	r2, #0
 8001568:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x20;
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 800156c:	2220      	movs	r2, #32
 800156e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x01;
 8001570:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001572:	2201      	movs	r2, #1
 8001574:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x01;
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <SpiAutoAddress+0x2e0>)
 8001578:	2201      	movs	r2, #1
 800157a:	711a      	strb	r2, [r3, #4]
	SpiRead(5,1);
 800157c:	2101      	movs	r1, #1
 800157e:	2005      	movs	r0, #5
 8001580:	f000 f88c 	bl	800169c <SpiRead>

	printf("DEV_CONF: 0x%02X\n", rx_data[5]);
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <SpiAutoAddress+0x2e4>)
 8001586:	795b      	ldrb	r3, [r3, #5]
 8001588:	4619      	mov	r1, r3
 800158a:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <SpiAutoAddress+0x2e8>)
 800158c:	f004 fbc4 	bl	8005d18 <iprintf>

	if (status != HAL_OK) {
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <SpiAutoAddress+0x2ec>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <SpiAutoAddress+0x2d6>
		return status;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <SpiAutoAddress+0x2ec>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	e000      	b.n	80015a0 <SpiAutoAddress+0x2d8>
	}

    return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200001f8 	.word	0x200001f8
 80015ac:	20000200 	.word	0x20000200
 80015b0:	08007cf0 	.word	0x08007cf0
 80015b4:	200001f2 	.word	0x200001f2

080015b8 <SpiWrite>:

HAL_StatusTypeDef SpiWrite(int sendLen)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	  crc = SpiCRC16(tx_data, sendLen);
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	482f      	ldr	r0, [pc, #188]	@ (8001680 <SpiWrite+0xc8>)
 80015c4:	f7ff fd70 	bl	80010a8 <SpiCRC16>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001684 <SpiWrite+0xcc>)
 80015ce:	801a      	strh	r2, [r3, #0]
	  tx_data[sendLen] = crc & 0xFF;
 80015d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001684 <SpiWrite+0xcc>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b2d9      	uxtb	r1, r3
 80015d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001680 <SpiWrite+0xc8>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	460a      	mov	r2, r1
 80015de:	701a      	strb	r2, [r3, #0]
	  tx_data[sendLen + 1] = (crc >> 8) & 0xFF;
 80015e0:	4b28      	ldr	r3, [pc, #160]	@ (8001684 <SpiWrite+0xcc>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3301      	adds	r3, #1
 80015ec:	b2d1      	uxtb	r1, r2
 80015ee:	4a24      	ldr	r2, [pc, #144]	@ (8001680 <SpiWrite+0xc8>)
 80015f0:	54d1      	strb	r1, [r2, r3]

	  //Check if SPI_READY is high, with timeout
	  timeout = HAL_GetTick() + 100;  // 100ms timeout
 80015f2:	f001 f85b 	bl	80026ac <HAL_GetTick>
 80015f6:	4603      	mov	r3, r0
 80015f8:	3364      	adds	r3, #100	@ 0x64
 80015fa:	4a23      	ldr	r2, [pc, #140]	@ (8001688 <SpiWrite+0xd0>)
 80015fc:	6013      	str	r3, [r2, #0]
	  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 80015fe:	e00b      	b.n	8001618 <SpiWrite+0x60>
	    if (HAL_GetTick() >= timeout) {
 8001600:	f001 f854 	bl	80026ac <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <SpiWrite+0xd0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d301      	bcc.n	8001612 <SpiWrite+0x5a>
	      return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e032      	b.n	8001678 <SpiWrite+0xc0>
	    }
	    Delay_us(100);
 8001612:	2064      	movs	r0, #100	@ 0x64
 8001614:	f000 fcb2 	bl	8001f7c <Delay_us>
	  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 8001618:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800161c:	481b      	ldr	r0, [pc, #108]	@ (800168c <SpiWrite+0xd4>)
 800161e:	f002 f8f5 	bl	800380c <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b01      	cmp	r3, #1
 8001626:	d1eb      	bne.n	8001600 <SpiWrite+0x48>
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2110      	movs	r1, #16
 800162c:	4818      	ldr	r0, [pc, #96]	@ (8001690 <SpiWrite+0xd8>)
 800162e:	f002 f904 	bl	800383a <HAL_GPIO_WritePin>

	  Delay_us(0.5); //t9
 8001632:	2000      	movs	r0, #0
 8001634:	f000 fca2 	bl	8001f7c <Delay_us>

	  // Send the command
	  status = HAL_SPI_Transmit(&hspi1, tx_data, sendLen + 2, 100);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	b29b      	uxth	r3, r3
 800163c:	3302      	adds	r3, #2
 800163e:	b29a      	uxth	r2, r3
 8001640:	2364      	movs	r3, #100	@ 0x64
 8001642:	490f      	ldr	r1, [pc, #60]	@ (8001680 <SpiWrite+0xc8>)
 8001644:	4813      	ldr	r0, [pc, #76]	@ (8001694 <SpiWrite+0xdc>)
 8001646:	f002 fe32 	bl	80042ae <HAL_SPI_Transmit>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <SpiWrite+0xe0>)
 8001650:	701a      	strb	r2, [r3, #0]

	  // Pull nCS high
	  Delay_us(0.5); //t10
 8001652:	2000      	movs	r0, #0
 8001654:	f000 fc92 	bl	8001f7c <Delay_us>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2110      	movs	r1, #16
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <SpiWrite+0xd8>)
 800165e:	f002 f8ec 	bl	800383a <HAL_GPIO_WritePin>

	  Delay_us(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f000 fc8a 	bl	8001f7c <Delay_us>

	  if (status != HAL_OK) {
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <SpiWrite+0xe0>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <SpiWrite+0xbe>
	    return status;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <SpiWrite+0xe0>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	e000      	b.n	8001678 <SpiWrite+0xc0>
	  }

	  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200001f8 	.word	0x200001f8
 8001684:	200001f0 	.word	0x200001f0
 8001688:	200001f4 	.word	0x200001f4
 800168c:	40020400 	.word	0x40020400
 8001690:	40020000 	.word	0x40020000
 8001694:	20000358 	.word	0x20000358
 8001698:	200001f2 	.word	0x200001f2

0800169c <SpiRead>:

HAL_StatusTypeDef SpiRead(int sendLen, int returnLen){
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]

	SpiWrite(sendLen);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff86 	bl	80015b8 <SpiWrite>

	for(int i = 0; i <= (returnLen - 1) + 7; i++) {
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	e007      	b.n	80016c2 <SpiRead+0x26>
		tx_data[i] = 0xFF;
 80016b2:	4a2a      	ldr	r2, [pc, #168]	@ (800175c <SpiRead+0xc0>)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	22ff      	movs	r2, #255	@ 0xff
 80016ba:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= (returnLen - 1) + 7; i++) {
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3301      	adds	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	3306      	adds	r3, #6
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	ddf2      	ble.n	80016b2 <SpiRead+0x16>
	}

	timeout = HAL_GetTick() + 1;  // 1ms timeout
 80016cc:	f000 ffee 	bl	80026ac <HAL_GetTick>
 80016d0:	4603      	mov	r3, r0
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a22      	ldr	r2, [pc, #136]	@ (8001760 <SpiRead+0xc4>)
 80016d6:	6013      	str	r3, [r2, #0]
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 80016d8:	e00e      	b.n	80016f8 <SpiRead+0x5c>
		if (HAL_GetTick() >= timeout) {
 80016da:	f000 ffe7 	bl	80026ac <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <SpiRead+0xc4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d303      	bcc.n	80016f0 <SpiRead+0x54>
			SpiClear();
 80016e8:	f000 f846 	bl	8001778 <SpiClear>
			return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e030      	b.n	8001752 <SpiRead+0xb6>
		}
		Delay_us(500);
 80016f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016f4:	f000 fc42 	bl	8001f7c <Delay_us>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 80016f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016fc:	4819      	ldr	r0, [pc, #100]	@ (8001764 <SpiRead+0xc8>)
 80016fe:	f002 f885 	bl	800380c <HAL_GPIO_ReadPin>
 8001702:	4603      	mov	r3, r0
 8001704:	2b01      	cmp	r3, #1
 8001706:	d1e8      	bne.n	80016da <SpiRead+0x3e>
	}

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2110      	movs	r1, #16
 800170c:	4816      	ldr	r0, [pc, #88]	@ (8001768 <SpiRead+0xcc>)
 800170e:	f002 f894 	bl	800383a <HAL_GPIO_WritePin>

    Delay_us(0.5); //t9
 8001712:	2000      	movs	r0, #0
 8001714:	f000 fc32 	bl	8001f7c <Delay_us>

    HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, returnLen, HAL_MAX_DELAY);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <SpiRead+0xd0>)
 8001724:	490d      	ldr	r1, [pc, #52]	@ (800175c <SpiRead+0xc0>)
 8001726:	4812      	ldr	r0, [pc, #72]	@ (8001770 <SpiRead+0xd4>)
 8001728:	f002 ff05 	bl	8004536 <HAL_SPI_TransmitReceive>

    Delay_us(0.5); //t10
 800172c:	2000      	movs	r0, #0
 800172e:	f000 fc25 	bl	8001f7c <Delay_us>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	2110      	movs	r1, #16
 8001736:	480c      	ldr	r0, [pc, #48]	@ (8001768 <SpiRead+0xcc>)
 8001738:	f002 f87f 	bl	800383a <HAL_GPIO_WritePin>

    Delay_us(1);
 800173c:	2001      	movs	r0, #1
 800173e:	f000 fc1d 	bl	8001f7c <Delay_us>

    if (status != HAL_OK) {
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <SpiRead+0xd8>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <SpiRead+0xb4>
    	return status;
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <SpiRead+0xd8>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	e000      	b.n	8001752 <SpiRead+0xb6>
    }

    return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200001f8 	.word	0x200001f8
 8001760:	200001f4 	.word	0x200001f4
 8001764:	40020400 	.word	0x40020400
 8001768:	40020000 	.word	0x40020000
 800176c:	20000200 	.word	0x20000200
 8001770:	20000358 	.word	0x20000358
 8001774:	200001f2 	.word	0x200001f2

08001778 <SpiClear>:

HAL_StatusTypeDef SpiClear(){
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

	tx_data[0] = 0x00;
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <SpiClear+0x54>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 8001782:	2200      	movs	r2, #0
 8001784:	2110      	movs	r1, #16
 8001786:	4812      	ldr	r0, [pc, #72]	@ (80017d0 <SpiClear+0x58>)
 8001788:	f002 f857 	bl	800383a <HAL_GPIO_WritePin>
	Delay_us(0.5);
 800178c:	2000      	movs	r0, #0
 800178e:	f000 fbf5 	bl	8001f7c <Delay_us>
	status = HAL_SPI_Transmit(&hspi1, tx_data, 1, 100);
 8001792:	2364      	movs	r3, #100	@ 0x64
 8001794:	2201      	movs	r2, #1
 8001796:	490d      	ldr	r1, [pc, #52]	@ (80017cc <SpiClear+0x54>)
 8001798:	480e      	ldr	r0, [pc, #56]	@ (80017d4 <SpiClear+0x5c>)
 800179a:	f002 fd88 	bl	80042ae <HAL_SPI_Transmit>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <SpiClear+0x60>)
 80017a4:	701a      	strb	r2, [r3, #0]
	Delay_us(0.5);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fbe8 	bl	8001f7c <Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull nCS high
 80017ac:	2201      	movs	r2, #1
 80017ae:	2110      	movs	r1, #16
 80017b0:	4807      	ldr	r0, [pc, #28]	@ (80017d0 <SpiClear+0x58>)
 80017b2:	f002 f842 	bl	800383a <HAL_GPIO_WritePin>

	if (status != HAL_OK) {
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <SpiClear+0x60>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d002      	beq.n	80017c4 <SpiClear+0x4c>
		    return status;
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <SpiClear+0x60>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	e000      	b.n	80017c6 <SpiClear+0x4e>
		  }

	return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200001f8 	.word	0x200001f8
 80017d0:	40020000 	.word	0x40020000
 80017d4:	20000358 	.word	0x20000358
 80017d8:	200001f2 	.word	0x200001f2
 80017dc:	00000000 	.word	0x00000000

080017e0 <stackVoltageRead>:

HAL_StatusTypeDef stackVoltageRead(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	B0 03 0D 06 52 76 //Step 2 (set continuous run and start ADC)
	delay [192us + (5us x TOTALBOARDS)] //Step 3 (delay)
	A0 05 68 1F 5C 2D //Step 4 (read ADC measurements)
	*/

	tx_data[0] = 0xB0;
 80017e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001920 <stackVoltageRead+0x140>)
 80017e8:	22b0      	movs	r2, #176	@ 0xb0
 80017ea:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 80017ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <stackVoltageRead+0x140>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x03;
 80017f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001920 <stackVoltageRead+0x140>)
 80017f4:	2203      	movs	r2, #3
 80017f6:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x0A;
 80017f8:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <stackVoltageRead+0x140>)
 80017fa:	220a      	movs	r2, #10
 80017fc:	70da      	strb	r2, [r3, #3]
	status = SpiWrite(4);
 80017fe:	2004      	movs	r0, #4
 8001800:	f7ff feda 	bl	80015b8 <SpiWrite>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b46      	ldr	r3, [pc, #280]	@ (8001924 <stackVoltageRead+0x144>)
 800180a:	701a      	strb	r2, [r3, #0]

	if (status != HAL_OK) {
 800180c:	4b45      	ldr	r3, [pc, #276]	@ (8001924 <stackVoltageRead+0x144>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <stackVoltageRead+0x3a>
		return status;
 8001814:	4b43      	ldr	r3, [pc, #268]	@ (8001924 <stackVoltageRead+0x144>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	e078      	b.n	800190c <stackVoltageRead+0x12c>
	}

	tx_data[0] = 0xB0;
 800181a:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <stackVoltageRead+0x140>)
 800181c:	22b0      	movs	r2, #176	@ 0xb0
 800181e:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001820:	4b3f      	ldr	r3, [pc, #252]	@ (8001920 <stackVoltageRead+0x140>)
 8001822:	2203      	movs	r2, #3
 8001824:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x0D;
 8001826:	4b3e      	ldr	r3, [pc, #248]	@ (8001920 <stackVoltageRead+0x140>)
 8001828:	220d      	movs	r2, #13
 800182a:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x06;
 800182c:	4b3c      	ldr	r3, [pc, #240]	@ (8001920 <stackVoltageRead+0x140>)
 800182e:	2206      	movs	r2, #6
 8001830:	70da      	strb	r2, [r3, #3]
	status = SpiWrite(4);
 8001832:	2004      	movs	r0, #4
 8001834:	f7ff fec0 	bl	80015b8 <SpiWrite>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	4b39      	ldr	r3, [pc, #228]	@ (8001924 <stackVoltageRead+0x144>)
 800183e:	701a      	strb	r2, [r3, #0]

	if (status != HAL_OK) {
 8001840:	4b38      	ldr	r3, [pc, #224]	@ (8001924 <stackVoltageRead+0x144>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <stackVoltageRead+0x6e>
		return status;
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <stackVoltageRead+0x144>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	e05e      	b.n	800190c <stackVoltageRead+0x12c>
	}

	Delay_us(192 + (5 * TOTALBOARDS));
 800184e:	20ca      	movs	r0, #202	@ 0xca
 8001850:	f000 fb94 	bl	8001f7c <Delay_us>

	tx_data[0] = 0xA0;
 8001854:	4b32      	ldr	r3, [pc, #200]	@ (8001920 <stackVoltageRead+0x140>)
 8001856:	22a0      	movs	r2, #160	@ 0xa0
 8001858:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x05;
 800185a:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <stackVoltageRead+0x140>)
 800185c:	2205      	movs	r2, #5
 800185e:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x68;
 8001860:	4b2f      	ldr	r3, [pc, #188]	@ (8001920 <stackVoltageRead+0x140>)
 8001862:	2268      	movs	r2, #104	@ 0x68
 8001864:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x0F;
 8001866:	4b2e      	ldr	r3, [pc, #184]	@ (8001920 <stackVoltageRead+0x140>)
 8001868:	220f      	movs	r2, #15
 800186a:	70da      	strb	r2, [r3, #3]


	status = SpiRead(4,ACTIVECHANNELS);
 800186c:	2110      	movs	r1, #16
 800186e:	2004      	movs	r0, #4
 8001870:	f7ff ff14 	bl	800169c <SpiRead>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	4b2a      	ldr	r3, [pc, #168]	@ (8001924 <stackVoltageRead+0x144>)
 800187a:	701a      	strb	r2, [r3, #0]

	//convert readings to voltages
	for(int i = 0; i <= ACTIVECHANNELS; i++){
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	e01d      	b.n	80018be <stackVoltageRead+0xde>
		voltStackRead[i] = ((float)rx_data[RESPONSE_HEADER_SIZE + i]) * 190.7;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3307      	adds	r3, #7
 8001886:	4a28      	ldr	r2, [pc, #160]	@ (8001928 <stackVoltageRead+0x148>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fa3e 	bl	8000d0c <__aeabi_ui2f>
 8001890:	4603      	mov	r3, r0
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fe04 	bl	80004a0 <__aeabi_f2d>
 8001898:	a31f      	add	r3, pc, #124	@ (adr r3, 8001918 <stackVoltageRead+0x138>)
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f7fe fe57 	bl	8000550 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f929 	bl	8000b00 <__aeabi_d2f>
 80018ae:	4602      	mov	r2, r0
 80018b0:	491e      	ldr	r1, [pc, #120]	@ (800192c <stackVoltageRead+0x14c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i <= ACTIVECHANNELS; i++){
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	ddde      	ble.n	8001882 <stackVoltageRead+0xa2>
	}

	printf("---------------");
 80018c4:	481a      	ldr	r0, [pc, #104]	@ (8001930 <stackVoltageRead+0x150>)
 80018c6:	f004 fa27 	bl	8005d18 <iprintf>
	for(int i = 0; i <= ACTIVECHANNELS - 1; i++){
 80018ca:	2300      	movs	r3, #0
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	e00f      	b.n	80018f0 <stackVoltageRead+0x110>
		printf("Cell %d: %f \r\n", i, voltStackRead[i]);
 80018d0:	4a16      	ldr	r2, [pc, #88]	@ (800192c <stackVoltageRead+0x14c>)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fde1 	bl	80004a0 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	6839      	ldr	r1, [r7, #0]
 80018e4:	4813      	ldr	r0, [pc, #76]	@ (8001934 <stackVoltageRead+0x154>)
 80018e6:	f004 fa17 	bl	8005d18 <iprintf>
	for(int i = 0; i <= ACTIVECHANNELS - 1; i++){
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b0f      	cmp	r3, #15
 80018f4:	ddec      	ble.n	80018d0 <stackVoltageRead+0xf0>
	}
	printf("---------------");
 80018f6:	480e      	ldr	r0, [pc, #56]	@ (8001930 <stackVoltageRead+0x150>)
 80018f8:	f004 fa0e 	bl	8005d18 <iprintf>

	if (status != HAL_OK) {
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <stackVoltageRead+0x144>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <stackVoltageRead+0x12a>
	    	return status;
 8001904:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <stackVoltageRead+0x144>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	e000      	b.n	800190c <stackVoltageRead+0x12c>
	    }

	return HAL_OK;
 800190a:	2300      	movs	r3, #0

}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	f3af 8000 	nop.w
 8001918:	66666666 	.word	0x66666666
 800191c:	4067d666 	.word	0x4067d666
 8001920:	200001f8 	.word	0x200001f8
 8001924:	200001f2 	.word	0x200001f2
 8001928:	20000200 	.word	0x20000200
 800192c:	20000280 	.word	0x20000280
 8001930:	08007d04 	.word	0x08007d04
 8001934:	08007d14 	.word	0x08007d14

08001938 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001940:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001944:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001950:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001954:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001958:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00b      	beq.n	8001978 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001960:	e000      	b.n	8001964 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001962:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001964:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f9      	beq.n	8001962 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800196e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001978:	687b      	ldr	r3, [r7, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr

08001984 <_write>:
void Delay_us(uint32_t us);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  int i = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  for(i = 0; i<len; i++)
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e009      	b.n	80019ae <_write+0x2a>
    ITM_SendChar((*ptr++));
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60ba      	str	r2, [r7, #8]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ffc8 	bl	8001938 <ITM_SendChar>
  for(i = 0; i<len; i++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbf1      	blt.n	800199a <_write+0x16>
  return len;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f000 fe0d 	bl	80025e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 f85d 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ce:	f000 fa35 	bl	8001e3c <MX_GPIO_Init>
  MX_CAN1_Init();
 80019d2:	f000 f8f1 	bl	8001bb8 <MX_CAN1_Init>
  MX_CAN2_Init();
 80019d6:	f000 f925 	bl	8001c24 <MX_CAN2_Init>
  // MX_SDIO_SD_Init();
  MX_SPI1_Init();
 80019da:	f000 f957 	bl	8001c8c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80019de:	f000 fa03 	bl	8001de8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80019e2:	f000 f9d7 	bl	8001d94 <MX_UART4_Init>
  MX_ADC1_Init();
 80019e6:	f000 f895 	bl	8001b14 <MX_ADC1_Init>
  MX_TIM4_Init();
 80019ea:	f000 f985 	bl	8001cf8 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80019ee:	481d      	ldr	r0, [pc, #116]	@ (8001a64 <main+0xa4>)
 80019f0:	f001 f9ef 	bl	8002dd2 <HAL_CAN_Start>
  HAL_TIM_Base_Start(&htim4);
 80019f4:	481c      	ldr	r0, [pc, #112]	@ (8001a68 <main+0xa8>)
 80019f6:	f003 f84f 	bl	8004a98 <HAL_TIM_Base_Start>

  printf("BQ79600 Battery Monitor System Starting...\r\n");
 80019fa:	481c      	ldr	r0, [pc, #112]	@ (8001a6c <main+0xac>)
 80019fc:	f004 f9f4 	bl	8005de8 <puts>

  // Step 2: Wake up and initialize the BQ79600 and BQ79616

  printf("Waking up BQ79600...\r\n");
 8001a00:	481b      	ldr	r0, [pc, #108]	@ (8001a70 <main+0xb0>)
 8001a02:	f004 f9f1 	bl	8005de8 <puts>
  bool wake = false;
 8001a06:	2300      	movs	r3, #0
 8001a08:	71fb      	strb	r3, [r7, #7]
  status = BQ79600_WakeUp(TOTALBOARDS,wake);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f7ff fbd6 	bl	80011c0 <BQ79600_WakeUp>
 8001a14:	4603      	mov	r3, r0
 8001a16:	71bb      	strb	r3, [r7, #6]
  if(status == HAL_OK){
 8001a18:	79bb      	ldrb	r3, [r7, #6]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <main+0x64>
	  printf("Wake GOOD\r\n");
 8001a1e:	4815      	ldr	r0, [pc, #84]	@ (8001a74 <main+0xb4>)
 8001a20:	f004 f9e2 	bl	8005de8 <puts>
  }


  printf("Auto-addressing...\r\n");
 8001a24:	4814      	ldr	r0, [pc, #80]	@ (8001a78 <main+0xb8>)
 8001a26:	f004 f9df 	bl	8005de8 <puts>
  status = SpiAutoAddress(TOTALBOARDS);
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f7ff fc4c 	bl	80012c8 <SpiAutoAddress>
 8001a30:	4603      	mov	r3, r0
 8001a32:	71bb      	strb	r3, [r7, #6]
  if(status == HAL_OK){
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d103      	bne.n	8001a42 <main+0x82>
  	  printf("Auto-addressing GOOD\r\n");
 8001a3a:	4810      	ldr	r0, [pc, #64]	@ (8001a7c <main+0xbc>)
 8001a3c:	f004 f9d4 	bl	8005de8 <puts>
 8001a40:	e004      	b.n	8001a4c <main+0x8c>
   }
  else
	  printf("HAL ERROR %d\r\n", status);
 8001a42:	79bb      	ldrb	r3, [r7, #6]
 8001a44:	4619      	mov	r1, r3
 8001a46:	480e      	ldr	r0, [pc, #56]	@ (8001a80 <main+0xc0>)
 8001a48:	f004 f966 	bl	8005d18 <iprintf>


  printf("Initialization complete, starting main loop...\r\n");
 8001a4c:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <main+0xc4>)
 8001a4e:	f004 f9cb 	bl	8005de8 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	stackVoltageRead();
 8001a52:	f7ff fec5 	bl	80017e0 <stackVoltageRead>
	HAL_Delay(1000);
 8001a56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a5a:	f000 fe31 	bl	80026c0 <HAL_Delay>
	stackVoltageRead();
 8001a5e:	bf00      	nop
 8001a60:	e7f7      	b.n	8001a52 <main+0x92>
 8001a62:	bf00      	nop
 8001a64:	20000308 	.word	0x20000308
 8001a68:	200003b0 	.word	0x200003b0
 8001a6c:	08007d24 	.word	0x08007d24
 8001a70:	08007d50 	.word	0x08007d50
 8001a74:	08007d68 	.word	0x08007d68
 8001a78:	08007d74 	.word	0x08007d74
 8001a7c:	08007d88 	.word	0x08007d88
 8001a80:	08007da0 	.word	0x08007da0
 8001a84:	08007db0 	.word	0x08007db0

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b092      	sub	sp, #72	@ 0x48
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	2230      	movs	r2, #48	@ 0x30
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f004 fa86 	bl	8005fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ab6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001abc:	230d      	movs	r3, #13
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001ac0:	23c3      	movs	r3, #195	@ 0xc3
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001ac8:	2305      	movs	r3, #5
 8001aca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 fecb 	bl	800386c <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001adc:	f000 fa66 	bl	8001fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001af2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2103      	movs	r1, #3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 f909 	bl	8003d14 <HAL_RCC_ClockConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b08:	f000 fa50 	bl	8001fac <Error_Handler>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3748      	adds	r7, #72	@ 0x48
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b28:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <MX_ADC1_Init+0x9c>)
 8001b2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b54:	4a17      	ldr	r2, [pc, #92]	@ (8001bb4 <MX_ADC1_Init+0xa0>)
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b58:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b72:	480e      	ldr	r0, [pc, #56]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b74:	f000 fdc8 	bl	8002708 <HAL_ADC_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b7e:	f000 fa15 	bl	8001fac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b82:	230b      	movs	r3, #11
 8001b84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b86:	2301      	movs	r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8e:	463b      	mov	r3, r7
 8001b90:	4619      	mov	r1, r3
 8001b92:	4806      	ldr	r0, [pc, #24]	@ (8001bac <MX_ADC1_Init+0x98>)
 8001b94:	f000 fdfc 	bl	8002790 <HAL_ADC_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001b9e:	f000 fa05 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200002c0 	.word	0x200002c0
 8001bb0:	40012000 	.word	0x40012000
 8001bb4:	0f000001 	.word	0x0f000001

08001bb8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bbc:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bbe:	4a18      	ldr	r2, [pc, #96]	@ (8001c20 <MX_CAN1_Init+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 8001bc2:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bc4:	220f      	movs	r2, #15
 8001bc6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bce:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bda:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_CAN1_Init+0x64>)
 8001c08:	f000 ffe8 	bl	8002bdc <HAL_CAN_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001c12:	f000 f9cb 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000308 	.word	0x20000308
 8001c20:	40006400 	.word	0x40006400

08001c24 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c2a:	4a17      	ldr	r2, [pc, #92]	@ (8001c88 <MX_CAN2_Init+0x64>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8001c2e:	4b15      	ldr	r3, [pc, #84]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c30:	220a      	movs	r2, #10
 8001c32:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001c34:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c46:	4b0f      	ldr	r3, [pc, #60]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001c52:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001c64:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001c70:	4804      	ldr	r0, [pc, #16]	@ (8001c84 <MX_CAN2_Init+0x60>)
 8001c72:	f000 ffb3 	bl	8002bdc <HAL_CAN_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001c7c:	f000 f996 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000330 	.word	0x20000330
 8001c88:	40006800 	.word	0x40006800

08001c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001c92:	4a18      	ldr	r2, [pc, #96]	@ (8001cf4 <MX_SPI1_Init+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c96:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001c98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; // 60MHz/16 = 3.75MHz
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cc0:	2218      	movs	r2, #24
 8001cc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cca:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cd8:	220a      	movs	r2, #10
 8001cda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <MX_SPI1_Init+0x64>)
 8001cde:	f002 fa5d 	bl	800419c <HAL_SPI_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ce8:	f000 f960 	bl	8001fac <Error_Handler>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000358 	.word	0x20000358
 8001cf4:	40013000 	.word	0x40013000

08001cf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfe:	f107 0308 	add.w	r3, r7, #8
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d16:	4a1e      	ldr	r2, [pc, #120]	@ (8001d90 <MX_TIM4_Init+0x98>)
 8001d18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d1c:	223c      	movs	r2, #60	@ 0x3c
 8001d1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d26:	4b19      	ldr	r3, [pc, #100]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d34:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d3a:	4814      	ldr	r0, [pc, #80]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d3c:	f002 fe5d 	bl	80049fa <HAL_TIM_Base_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d46:	f000 f931 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d58:	f002 ff04 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f000 f923 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <MX_TIM4_Init+0x94>)
 8001d74:	f003 f8fe 	bl	8004f74 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001d7e:	f000 f915 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200003b0 	.word	0x200003b0
 8001d90:	40000800 	.word	0x40000800

08001d94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <MX_UART4_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_UART4_Init+0x4c>)
 8001dcc:	f003 f94c 	bl	8005068 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 f8e9 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200003f8 	.word	0x200003f8
 8001de4:	40004c00 	.word	0x40004c00

08001de8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dee:	4a12      	ldr	r2, [pc, #72]	@ (8001e38 <MX_USART2_UART_Init+0x50>)
 8001df0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001df4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	220c      	movs	r2, #12
 8001e10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_USART2_UART_Init+0x4c>)
 8001e20:	f003 f922 	bl	8005068 <HAL_UART_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e2a:	f000 f8bf 	bl	8001fac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000440 	.word	0x20000440
 8001e38:	40004400 	.word	0x40004400

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b45      	ldr	r3, [pc, #276]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a44      	ldr	r2, [pc, #272]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b42      	ldr	r3, [pc, #264]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b3e      	ldr	r3, [pc, #248]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a3d      	ldr	r2, [pc, #244]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	4b37      	ldr	r3, [pc, #220]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a36      	ldr	r2, [pc, #216]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b34      	ldr	r3, [pc, #208]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a2f      	ldr	r2, [pc, #188]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a28      	ldr	r2, [pc, #160]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <MX_GPIO_Init+0x130>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2134      	movs	r1, #52	@ 0x34
 8001ee2:	4823      	ldr	r0, [pc, #140]	@ (8001f70 <MX_GPIO_Init+0x134>)
 8001ee4:	f001 fca9 	bl	800383a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin, GPIO_PIN_RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f240 4101 	movw	r1, #1025	@ 0x401
 8001eee:	4821      	ldr	r0, [pc, #132]	@ (8001f74 <MX_GPIO_Init+0x138>)
 8001ef0:	f001 fca3 	bl	800383a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 CHARGE_EN_LV_Pin DISCHARGE_EN_LV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin;
 8001ef4:	2334      	movs	r3, #52	@ 0x34
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4819      	ldr	r0, [pc, #100]	@ (8001f70 <MX_GPIO_Init+0x134>)
 8001f0c:	f001 fae0 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_SAFE_LV_Pin FAN_EN_LV_Pin */
  GPIO_InitStruct.Pin = CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin;
 8001f10:	f240 4301 	movw	r3, #1025	@ 0x401
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4619      	mov	r1, r3
 8001f28:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <MX_GPIO_Init+0x138>)
 8001f2a:	f001 fad1 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_PWR_LV_ISO_Pin READY_PWR_LV_ISO_Pin BQ_NFAULT_Pin BQ_SPI_RDY_Pin */
  GPIO_InitStruct.Pin = CHARGE_PWR_LV_ISO_Pin|READY_PWR_LV_ISO_Pin|BQ_NFAULT_Pin|BQ_SPI_RDY_Pin;
 8001f2e:	f644 0306 	movw	r3, #18438	@ 0x4806
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <MX_GPIO_Init+0x138>)
 8001f44:	f001 fac4 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DET_Pin */
  GPIO_InitStruct.Pin = SDIO_DET_Pin;
 8001f48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4806      	ldr	r0, [pc, #24]	@ (8001f78 <MX_GPIO_Init+0x13c>)
 8001f5e:	f001 fab7 	bl	80034d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f62:	bf00      	nop
 8001f64:	3728      	adds	r7, #40	@ 0x28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020000 	.word	0x40020000

08001f7c <Delay_us>:
 * @param  us: Number of microseconds to delay
 * @retval None
 * @note   This is a placeholder - implement using a timer peripheral
 */
void Delay_us(uint32_t us)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8001f84:	4b08      	ldr	r3, [pc, #32]	@ (8001fa8 <Delay_us+0x2c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8001f8c:	bf00      	nop
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <Delay_us+0x2c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d8f9      	bhi.n	8001f8e <Delay_us+0x12>
}
 8001f9a:	bf00      	nop
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	200003b0 	.word	0x200003b0

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb0:	b672      	cpsid	i
}
 8001fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <Error_Handler+0x8>

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_MspInit+0x48>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002000 <HAL_MspInit+0x48>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <HAL_MspInit+0x48>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	603b      	str	r3, [r7, #0]
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <HAL_MspInit+0x48>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	4a07      	ldr	r2, [pc, #28]	@ (8002000 <HAL_MspInit+0x48>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_MspInit+0x48>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	@ 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a17      	ldr	r2, [pc, #92]	@ (8002080 <HAL_ADC_MspInit+0x7c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d127      	bne.n	8002076 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b16      	ldr	r3, [pc, #88]	@ (8002084 <HAL_ADC_MspInit+0x80>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	4a15      	ldr	r2, [pc, #84]	@ (8002084 <HAL_ADC_MspInit+0x80>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002034:	6453      	str	r3, [r2, #68]	@ 0x44
 8002036:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <HAL_ADC_MspInit+0x80>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <HAL_ADC_MspInit+0x80>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <HAL_ADC_MspInit+0x80>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <HAL_ADC_MspInit+0x80>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800205e:	2302      	movs	r3, #2
 8002060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	@ (8002088 <HAL_ADC_MspInit+0x84>)
 8002072:	f001 fa2d 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002076:	bf00      	nop
 8002078:	3728      	adds	r7, #40	@ 0x28
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40012000 	.word	0x40012000
 8002084:	40023800 	.word	0x40023800
 8002088:	40020800 	.word	0x40020800

0800208c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	@ 0x30
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	@ (80021d8 <HAL_CAN_MspInit+0x14c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d13e      	bne.n	800212c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020ae:	4b4b      	ldr	r3, [pc, #300]	@ (80021dc <HAL_CAN_MspInit+0x150>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <HAL_CAN_MspInit+0x150>)
 80020b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020b8:	4b48      	ldr	r3, [pc, #288]	@ (80021dc <HAL_CAN_MspInit+0x150>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10d      	bne.n	80020dc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	4b46      	ldr	r3, [pc, #280]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	4a45      	ldr	r2, [pc, #276]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 80020ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d0:	4b43      	ldr	r3, [pc, #268]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	4b3f      	ldr	r3, [pc, #252]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	4a3e      	ldr	r2, [pc, #248]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ec:	4b3c      	ldr	r3, [pc, #240]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80020f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800210a:	2309      	movs	r3, #9
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	4833      	ldr	r0, [pc, #204]	@ (80021e4 <HAL_CAN_MspInit+0x158>)
 8002116:	f001 f9db 	bl	80034d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2014      	movs	r0, #20
 8002120:	f001 f99f 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002124:	2014      	movs	r0, #20
 8002126:	f001 f9b8 	bl	800349a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800212a:	e050      	b.n	80021ce <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2d      	ldr	r2, [pc, #180]	@ (80021e8 <HAL_CAN_MspInit+0x15c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d14b      	bne.n	80021ce <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b29      	ldr	r3, [pc, #164]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 8002140:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002144:	6413      	str	r3, [r2, #64]	@ 0x40
 8002146:	4b26      	ldr	r3, [pc, #152]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002152:	4b22      	ldr	r3, [pc, #136]	@ (80021dc <HAL_CAN_MspInit+0x150>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	4a20      	ldr	r2, [pc, #128]	@ (80021dc <HAL_CAN_MspInit+0x150>)
 800215a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800215c:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <HAL_CAN_MspInit+0x150>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d10d      	bne.n	8002180 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	4a1c      	ldr	r2, [pc, #112]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 800216e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002172:	6413      	str	r3, [r2, #64]	@ 0x40
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002188:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <HAL_CAN_MspInit+0x154>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800219c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80021ae:	2309      	movs	r3, #9
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	4619      	mov	r1, r3
 80021b8:	480c      	ldr	r0, [pc, #48]	@ (80021ec <HAL_CAN_MspInit+0x160>)
 80021ba:	f001 f989 	bl	80034d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2040      	movs	r0, #64	@ 0x40
 80021c4:	f001 f94d 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80021c8:	2040      	movs	r0, #64	@ 0x40
 80021ca:	f001 f966 	bl	800349a <HAL_NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3730      	adds	r7, #48	@ 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40006400 	.word	0x40006400
 80021dc:	20000488 	.word	0x20000488
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40006800 	.word	0x40006800
 80021ec:	40020400 	.word	0x40020400

080021f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_SPI_MspInit+0x84>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d12b      	bne.n	800226a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <HAL_SPI_MspInit+0x88>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a17      	ldr	r2, [pc, #92]	@ (8002278 <HAL_SPI_MspInit+0x88>)
 800221c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <HAL_SPI_MspInit+0x88>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <HAL_SPI_MspInit+0x88>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <HAL_SPI_MspInit+0x88>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <HAL_SPI_MspInit+0x88>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800224a:	23f0      	movs	r3, #240	@ 0xf0
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800225a:	2305      	movs	r3, #5
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4805      	ldr	r0, [pc, #20]	@ (800227c <HAL_SPI_MspInit+0x8c>)
 8002266:	f001 f933 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	@ 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40013000 	.word	0x40013000
 8002278:	40023800 	.word	0x40023800
 800227c:	40020000 	.word	0x40020000

08002280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <HAL_TIM_Base_MspInit+0x38>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d10d      	bne.n	80022ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_TIM_Base_MspInit+0x3c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <HAL_TIM_Base_MspInit+0x3c>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_TIM_Base_MspInit+0x3c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40000800 	.word	0x40000800
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	@ 0x30
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a32      	ldr	r2, [pc, #200]	@ (80023a8 <HAL_UART_MspInit+0xe8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d12c      	bne.n	800233c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
 80022e6:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_UART_MspInit+0xec>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	4a30      	ldr	r2, [pc, #192]	@ (80023ac <HAL_UART_MspInit+0xec>)
 80022ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f2:	4b2e      	ldr	r3, [pc, #184]	@ (80023ac <HAL_UART_MspInit+0xec>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	4b2a      	ldr	r3, [pc, #168]	@ (80023ac <HAL_UART_MspInit+0xec>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a29      	ldr	r2, [pc, #164]	@ (80023ac <HAL_UART_MspInit+0xec>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b27      	ldr	r3, [pc, #156]	@ (80023ac <HAL_UART_MspInit+0xec>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800231a:	2303      	movs	r3, #3
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002322:	2301      	movs	r3, #1
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800232a:	2308      	movs	r3, #8
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	481e      	ldr	r0, [pc, #120]	@ (80023b0 <HAL_UART_MspInit+0xf0>)
 8002336:	f001 f8cb 	bl	80034d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800233a:	e030      	b.n	800239e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1c      	ldr	r2, [pc, #112]	@ (80023b4 <HAL_UART_MspInit+0xf4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d12b      	bne.n	800239e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <HAL_UART_MspInit+0xec>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <HAL_UART_MspInit+0xec>)
 8002350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002354:	6413      	str	r3, [r2, #64]	@ 0x40
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_UART_MspInit+0xec>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_UART_MspInit+0xec>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	4a10      	ldr	r2, [pc, #64]	@ (80023ac <HAL_UART_MspInit+0xec>)
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	6313      	str	r3, [r2, #48]	@ 0x30
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <HAL_UART_MspInit+0xec>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800237e:	230c      	movs	r3, #12
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800238e:	2307      	movs	r3, #7
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 031c 	add.w	r3, r7, #28
 8002396:	4619      	mov	r1, r3
 8002398:	4805      	ldr	r0, [pc, #20]	@ (80023b0 <HAL_UART_MspInit+0xf0>)
 800239a:	f001 f899 	bl	80034d0 <HAL_GPIO_Init>
}
 800239e:	bf00      	nop
 80023a0:	3730      	adds	r7, #48	@ 0x30
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40004c00 	.word	0x40004c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40004400 	.word	0x40004400

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <NMI_Handler+0x4>

080023c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <MemManage_Handler+0x4>

080023d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <UsageFault_Handler+0x4>

080023e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002408:	f000 f93e 	bl	8002688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002414:	4802      	ldr	r0, [pc, #8]	@ (8002420 <CAN1_RX0_IRQHandler+0x10>)
 8002416:	f000 fd20 	bl	8002e5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000308 	.word	0x20000308

08002424 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002428:	4802      	ldr	r0, [pc, #8]	@ (8002434 <CAN2_RX0_IRQHandler+0x10>)
 800242a:	f000 fd16 	bl	8002e5a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000330 	.word	0x20000330

08002438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return 1;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <_kill>:

int _kill(int pid, int sig)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002450:	f003 fdfc 	bl	800604c <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	2216      	movs	r2, #22
 8002458:	601a      	str	r2, [r3, #0]
  return -1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <_exit>:

void _exit (int status)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800246e:	f04f 31ff 	mov.w	r1, #4294967295
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffe7 	bl	8002446 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <_exit+0x12>

0800247c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e00a      	b.n	80024a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800248e:	f3af 8000 	nop.w
 8002492:	4601      	mov	r1, r0
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	60ba      	str	r2, [r7, #8]
 800249a:	b2ca      	uxtb	r2, r1
 800249c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	dbf0      	blt.n	800248e <_read+0x12>
  }

  return len;
 80024ac:	687b      	ldr	r3, [r7, #4]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024dc:	605a      	str	r2, [r3, #4]
  return 0;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <_isatty>:

int _isatty(int file)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024f2:	2301      	movs	r3, #1
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002520:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <_sbrk+0x5c>)
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <_sbrk+0x60>)
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800252c:	4b13      	ldr	r3, [pc, #76]	@ (800257c <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <_sbrk+0x64>)
 8002536:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <_sbrk+0x68>)
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	429a      	cmp	r2, r3
 8002546:	d207      	bcs.n	8002558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002548:	f003 fd80 	bl	800604c <__errno>
 800254c:	4603      	mov	r3, r0
 800254e:	220c      	movs	r2, #12
 8002550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	e009      	b.n	800256c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800255e:	4b07      	ldr	r3, [pc, #28]	@ (800257c <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	@ (800257c <_sbrk+0x64>)
 8002568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	2000c000 	.word	0x2000c000
 8002578:	00000400 	.word	0x00000400
 800257c:	2000048c 	.word	0x2000048c
 8002580:	200005e0 	.word	0x200005e0

08002584 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002590:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002594:	f7ff fff6 	bl	8002584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002598:	480c      	ldr	r0, [pc, #48]	@ (80025cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800259a:	490d      	ldr	r1, [pc, #52]	@ (80025d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800259c:	4a0d      	ldr	r2, [pc, #52]	@ (80025d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025b0:	4c0a      	ldr	r4, [pc, #40]	@ (80025dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025be:	f003 fd4b 	bl	8006058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c2:	f7ff f9fd 	bl	80019c0 <main>
  bx  lr    
 80025c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025c8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80025d4:	08008378 	.word	0x08008378
  ldr r2, =_sbss
 80025d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80025dc:	200005e0 	.word	0x200005e0

080025e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC_IRQHandler>
	...

080025e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <HAL_Init+0x40>)
 80025ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_Init+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <HAL_Init+0x40>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	@ (8002624 <HAL_Init+0x40>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260c:	2003      	movs	r0, #3
 800260e:	f000 ff1d 	bl	800344c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002612:	200f      	movs	r0, #15
 8002614:	f000 f808 	bl	8002628 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002618:	f7ff fcce 	bl	8001fb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023c00 	.word	0x40023c00

08002628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002630:	4b12      	ldr	r3, [pc, #72]	@ (800267c <HAL_InitTick+0x54>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_InitTick+0x58>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800263e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f000 ff35 	bl	80034b6 <HAL_SYSTICK_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00e      	b.n	8002674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b0f      	cmp	r3, #15
 800265a:	d80a      	bhi.n	8002672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800265c:	2200      	movs	r2, #0
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f000 fefd 	bl	8003462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002668:	4a06      	ldr	r2, [pc, #24]	@ (8002684 <HAL_InitTick+0x5c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000000 	.word	0x20000000
 8002680:	20000008 	.word	0x20000008
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <HAL_IncTick+0x1c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_IncTick+0x20>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a03      	ldr	r2, [pc, #12]	@ (80026a8 <HAL_IncTick+0x20>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000008 	.word	0x20000008
 80026a8:	20000490 	.word	0x20000490

080026ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTick;
 80026b0:	4b02      	ldr	r3, [pc, #8]	@ (80026bc <HAL_GetTick+0x10>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	20000490 	.word	0x20000490

080026c0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff fff0 	bl	80026ac <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d005      	beq.n	80026e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026da:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <HAL_Delay+0x44>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e6:	bf00      	nop
 80026e8:	f7ff ffe0 	bl	80026ac <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8f7      	bhi.n	80026e8 <HAL_Delay+0x28>
  {
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008

08002708 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e033      	b.n	8002786 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fc6c 	bl	8002004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800274e:	f023 0302 	bic.w	r3, r3, #2
 8002752:	f043 0202 	orr.w	r2, r3, #2
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f938 	bl	80029d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40
 8002776:	e001      	b.n	800277c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x1c>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e103      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x224>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b09      	cmp	r3, #9
 80027ba:	d925      	bls.n	8002808 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	3b1e      	subs	r3, #30
 80027d2:	2207      	movs	r2, #7
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43da      	mvns	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	400a      	ands	r2, r1
 80027e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68d9      	ldr	r1, [r3, #12]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	4618      	mov	r0, r3
 80027f4:	4603      	mov	r3, r0
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4403      	add	r3, r0
 80027fa:	3b1e      	subs	r3, #30
 80027fc:	409a      	lsls	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	e022      	b.n	800284e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6919      	ldr	r1, [r3, #16]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	2207      	movs	r2, #7
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	4603      	mov	r3, r0
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4403      	add	r3, r0
 8002844:	409a      	lsls	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b06      	cmp	r3, #6
 8002854:	d824      	bhi.n	80028a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	3b05      	subs	r3, #5
 8002868:	221f      	movs	r2, #31
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43da      	mvns	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	400a      	ands	r2, r1
 8002876:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4618      	mov	r0, r3
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	3b05      	subs	r3, #5
 8002892:	fa00 f203 	lsl.w	r2, r0, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	635a      	str	r2, [r3, #52]	@ 0x34
 800289e:	e04c      	b.n	800293a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b0c      	cmp	r3, #12
 80028a6:	d824      	bhi.n	80028f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	3b23      	subs	r3, #35	@ 0x23
 80028ba:	221f      	movs	r2, #31
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43da      	mvns	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	400a      	ands	r2, r1
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	3b23      	subs	r3, #35	@ 0x23
 80028e4:	fa00 f203 	lsl.w	r2, r0, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80028f0:	e023      	b.n	800293a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3b41      	subs	r3, #65	@ 0x41
 8002904:	221f      	movs	r2, #31
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43da      	mvns	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	400a      	ands	r2, r1
 8002912:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4618      	mov	r0, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	3b41      	subs	r3, #65	@ 0x41
 800292e:	fa00 f203 	lsl.w	r2, r0, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a20      	ldr	r2, [pc, #128]	@ (80029c0 <HAL_ADC_ConfigChannel+0x230>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d109      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1c8>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b12      	cmp	r3, #18
 800294a:	d105      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800294c:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <HAL_ADC_ConfigChannel+0x234>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a1c      	ldr	r2, [pc, #112]	@ (80029c4 <HAL_ADC_ConfigChannel+0x234>)
 8002952:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002956:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a18      	ldr	r2, [pc, #96]	@ (80029c0 <HAL_ADC_ConfigChannel+0x230>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d123      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21a>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b10      	cmp	r3, #16
 8002968:	d003      	beq.n	8002972 <HAL_ADC_ConfigChannel+0x1e2>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b11      	cmp	r3, #17
 8002970:	d11b      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002972:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <HAL_ADC_ConfigChannel+0x234>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a13      	ldr	r2, [pc, #76]	@ (80029c4 <HAL_ADC_ConfigChannel+0x234>)
 8002978:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800297c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b10      	cmp	r3, #16
 8002984:	d111      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_ADC_ConfigChannel+0x238>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a10      	ldr	r2, [pc, #64]	@ (80029cc <HAL_ADC_ConfigChannel+0x23c>)
 800298c:	fba2 2303 	umull	r2, r3, r2, r3
 8002990:	0c9a      	lsrs	r2, r3, #18
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800299c:	e002      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f9      	bne.n	800299e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40012000 	.word	0x40012000
 80029c4:	40012300 	.word	0x40012300
 80029c8:	20000000 	.word	0x20000000
 80029cc:	431bde83 	.word	0x431bde83

080029d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029d8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd4 <ADC_Init+0x204>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd4 <ADC_Init+0x204>)
 80029de:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80029e2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029e4:	4b7b      	ldr	r3, [pc, #492]	@ (8002bd4 <ADC_Init+0x204>)
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4979      	ldr	r1, [pc, #484]	@ (8002bd4 <ADC_Init+0x204>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	021a      	lsls	r2, r3, #8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd8 <ADC_Init+0x208>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d022      	beq.n	8002aaa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e00f      	b.n	8002aca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ac8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0202 	bic.w	r2, r2, #2
 8002ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6899      	ldr	r1, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7e1b      	ldrb	r3, [r3, #24]
 8002ae4:	005a      	lsls	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d027      	beq.n	8002b48 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b06:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002b22:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	fa92 f2a2 	rbit	r2, r2
 8002b2a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	fa03 f102 	lsl.w	r1, r3, r2
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e007      	b.n	8002b58 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	051a      	lsls	r2, r3, #20
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b9a:	025a      	lsls	r2, r3, #9
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	029a      	lsls	r2, r3, #10
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	0f000001 	.word	0x0f000001

08002bdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0ed      	b.n	8002dca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fa46 	bl	800208c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c10:	f7ff fd4c 	bl	80026ac <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c16:	e012      	b.n	8002c3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c18:	f7ff fd48 	bl	80026ac <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	d90b      	bls.n	8002c3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0c5      	b.n	8002dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0e5      	beq.n	8002c18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0202 	bic.w	r2, r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c5c:	f7ff fd26 	bl	80026ac <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c62:	e012      	b.n	8002c8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c64:	f7ff fd22 	bl	80026ac <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b0a      	cmp	r3, #10
 8002c70:	d90b      	bls.n	8002c8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2205      	movs	r2, #5
 8002c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e09f      	b.n	8002dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e5      	bne.n	8002c64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	7e1b      	ldrb	r3, [r3, #24]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d108      	bne.n	8002cb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e007      	b.n	8002cc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7e5b      	ldrb	r3, [r3, #25]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d108      	bne.n	8002cdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e007      	b.n	8002cec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7e9b      	ldrb	r3, [r3, #26]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d108      	bne.n	8002d06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0220 	orr.w	r2, r2, #32
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e007      	b.n	8002d16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0220 	bic.w	r2, r2, #32
 8002d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7edb      	ldrb	r3, [r3, #27]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d108      	bne.n	8002d30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0210 	bic.w	r2, r2, #16
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e007      	b.n	8002d40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0210 	orr.w	r2, r2, #16
 8002d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7f1b      	ldrb	r3, [r3, #28]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d108      	bne.n	8002d5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0208 	orr.w	r2, r2, #8
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	e007      	b.n	8002d6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0208 	bic.w	r2, r2, #8
 8002d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7f5b      	ldrb	r3, [r3, #29]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d108      	bne.n	8002d84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0204 	orr.w	r2, r2, #4
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e007      	b.n	8002d94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0204 	bic.w	r2, r2, #4
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	ea42 0103 	orr.w	r1, r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	1e5a      	subs	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d12e      	bne.n	8002e44 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dfe:	f7ff fc55 	bl	80026ac <HAL_GetTick>
 8002e02:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e04:	e012      	b.n	8002e2c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e06:	f7ff fc51 	bl	80026ac <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b0a      	cmp	r3, #10
 8002e12:	d90b      	bls.n	8002e2c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2205      	movs	r2, #5
 8002e24:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e012      	b.n	8002e52 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e5      	bne.n	8002e06 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	e006      	b.n	8002e52 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
  }
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b08a      	sub	sp, #40	@ 0x28
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d07c      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d023      	beq.n	8002ef2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 f983 	bl	80031c8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ec2:	e016      	b.n	8002ef2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d004      	beq.n	8002ed8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed6:	e00c      	b.n	8002ef2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eea:	e002      	b.n	8002ef2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f986 	bl	80031fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d024      	beq.n	8002f46 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f04:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f962 	bl	80031da <HAL_CAN_TxMailbox1CompleteCallback>
 8002f16:	e016      	b.n	8002f46 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2a:	e00c      	b.n	8002f46 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3e:	e002      	b.n	8002f46 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f965 	bl	8003210 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d024      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f941 	bl	80031ec <HAL_CAN_TxMailbox2CompleteCallback>
 8002f6a:	e016      	b.n	8002f9a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7e:	e00c      	b.n	8002f9a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f92:	e002      	b.n	8002f9a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f944 	bl	8003222 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00c      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fb4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d006      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f933 	bl	8003246 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d009      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f91b 	bl	8003234 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00c      	beq.n	8003022 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2210      	movs	r2, #16
 8003020:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d006      	beq.n	8003044 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2208      	movs	r2, #8
 800303c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f913 	bl	800326a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8fb 	bl	8003258 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d006      	beq.n	8003084 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2210      	movs	r2, #16
 800307c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8fc 	bl	800327c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2208      	movs	r2, #8
 800309e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8f4 	bl	800328e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d07b      	beq.n	80031a8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d072      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d008      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d008      	beq.n	800310e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003114:	2b00      	cmp	r3, #0
 8003116:	d043      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03e      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003128:	2b60      	cmp	r3, #96	@ 0x60
 800312a:	d02b      	beq.n	8003184 <HAL_CAN_IRQHandler+0x32a>
 800312c:	2b60      	cmp	r3, #96	@ 0x60
 800312e:	d82e      	bhi.n	800318e <HAL_CAN_IRQHandler+0x334>
 8003130:	2b50      	cmp	r3, #80	@ 0x50
 8003132:	d022      	beq.n	800317a <HAL_CAN_IRQHandler+0x320>
 8003134:	2b50      	cmp	r3, #80	@ 0x50
 8003136:	d82a      	bhi.n	800318e <HAL_CAN_IRQHandler+0x334>
 8003138:	2b40      	cmp	r3, #64	@ 0x40
 800313a:	d019      	beq.n	8003170 <HAL_CAN_IRQHandler+0x316>
 800313c:	2b40      	cmp	r3, #64	@ 0x40
 800313e:	d826      	bhi.n	800318e <HAL_CAN_IRQHandler+0x334>
 8003140:	2b30      	cmp	r3, #48	@ 0x30
 8003142:	d010      	beq.n	8003166 <HAL_CAN_IRQHandler+0x30c>
 8003144:	2b30      	cmp	r3, #48	@ 0x30
 8003146:	d822      	bhi.n	800318e <HAL_CAN_IRQHandler+0x334>
 8003148:	2b10      	cmp	r3, #16
 800314a:	d002      	beq.n	8003152 <HAL_CAN_IRQHandler+0x2f8>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d005      	beq.n	800315c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003150:	e01d      	b.n	800318e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	f043 0308 	orr.w	r3, r3, #8
 8003158:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800315a:	e019      	b.n	8003190 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315e:	f043 0310 	orr.w	r3, r3, #16
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003164:	e014      	b.n	8003190 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	f043 0320 	orr.w	r3, r3, #32
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800316e:	e00f      	b.n	8003190 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003178:	e00a      	b.n	8003190 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003182:	e005      	b.n	8003190 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800318c:	e000      	b.n	8003190 <HAL_CAN_IRQHandler+0x336>
            break;
 800318e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800319e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2204      	movs	r2, #4
 80031a6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80031a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	431a      	orrs	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f870 	bl	80032a0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80031c0:	bf00      	nop
 80031c2:	3728      	adds	r7, #40	@ 0x28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr

080031da <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr

0800328e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
	...

080032b4 <__NVIC_SetPriorityGrouping>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c4:	4b0c      	ldr	r3, [pc, #48]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e6:	4a04      	ldr	r2, [pc, #16]	@ (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	60d3      	str	r3, [r2, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_GetPriorityGrouping>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <__NVIC_GetPriorityGrouping+0x18>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	f003 0307 	and.w	r3, r3, #7
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_EnableIRQ>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	2b00      	cmp	r3, #0
 8003328:	db0b      	blt.n	8003342 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	4906      	ldr	r1, [pc, #24]	@ (800334c <__NVIC_EnableIRQ+0x34>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2001      	movs	r0, #1
 800333a:	fa00 f202 	lsl.w	r2, r0, r2
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100

08003350 <__NVIC_SetPriority>:
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	6039      	str	r1, [r7, #0]
 800335a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003360:	2b00      	cmp	r3, #0
 8003362:	db0a      	blt.n	800337a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2da      	uxtb	r2, r3
 8003368:	490c      	ldr	r1, [pc, #48]	@ (800339c <__NVIC_SetPriority+0x4c>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	0112      	lsls	r2, r2, #4
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	440b      	add	r3, r1
 8003374:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003378:	e00a      	b.n	8003390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4908      	ldr	r1, [pc, #32]	@ (80033a0 <__NVIC_SetPriority+0x50>)
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	3b04      	subs	r3, #4
 8003388:	0112      	lsls	r2, r2, #4
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	440b      	add	r3, r1
 800338e:	761a      	strb	r2, [r3, #24]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000e100 	.word	0xe000e100
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <NVIC_EncodePriority>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	@ 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f1c3 0307 	rsb	r3, r3, #7
 80033be:	2b04      	cmp	r3, #4
 80033c0:	bf28      	it	cs
 80033c2:	2304      	movcs	r3, #4
 80033c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3304      	adds	r3, #4
 80033ca:	2b06      	cmp	r3, #6
 80033cc:	d902      	bls.n	80033d4 <NVIC_EncodePriority+0x30>
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3b03      	subs	r3, #3
 80033d2:	e000      	b.n	80033d6 <NVIC_EncodePriority+0x32>
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43da      	mvns	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033ec:	f04f 31ff 	mov.w	r1, #4294967295
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	43d9      	mvns	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	4313      	orrs	r3, r2
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	@ 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <SysTick_Config>:
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ff90 	bl	8003350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff2d 	bl	80032b4 <__NVIC_SetPriorityGrouping>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003474:	f7ff ff42 	bl	80032fc <__NVIC_GetPriorityGrouping>
 8003478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7ff ff90 	bl	80033a4 <NVIC_EncodePriority>
 8003484:	4602      	mov	r2, r0
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff5f 	bl	8003350 <__NVIC_SetPriority>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff35 	bl	8003318 <__NVIC_EnableIRQ>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffa2 	bl	8003408 <SysTick_Config>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034de:	e16f      	b.n	80037c0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	4013      	ands	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8161 	beq.w	80037ba <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d005      	beq.n	8003510 <HAL_GPIO_Init+0x40>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d130      	bne.n	8003572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003546:	2201      	movs	r2, #1
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	f003 0201 	and.w	r2, r3, #1
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b03      	cmp	r3, #3
 800357c:	d017      	beq.n	80035ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d123      	bne.n	8003602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	08da      	lsrs	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3208      	adds	r2, #8
 80035c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	220f      	movs	r2, #15
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	6939      	ldr	r1, [r7, #16]
 80035fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0203 	and.w	r2, r3, #3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80bb 	beq.w	80037ba <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003644:	2300      	movs	r3, #0
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	4b64      	ldr	r3, [pc, #400]	@ (80037dc <HAL_GPIO_Init+0x30c>)
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	4a63      	ldr	r2, [pc, #396]	@ (80037dc <HAL_GPIO_Init+0x30c>)
 800364e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003652:	6453      	str	r3, [r2, #68]	@ 0x44
 8003654:	4b61      	ldr	r3, [pc, #388]	@ (80037dc <HAL_GPIO_Init+0x30c>)
 8003656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003658:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003660:	4a5f      	ldr	r2, [pc, #380]	@ (80037e0 <HAL_GPIO_Init+0x310>)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	089b      	lsrs	r3, r3, #2
 8003666:	3302      	adds	r3, #2
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	220f      	movs	r2, #15
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4013      	ands	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a57      	ldr	r2, [pc, #348]	@ (80037e4 <HAL_GPIO_Init+0x314>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d031      	beq.n	80036f0 <HAL_GPIO_Init+0x220>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a56      	ldr	r2, [pc, #344]	@ (80037e8 <HAL_GPIO_Init+0x318>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d02b      	beq.n	80036ec <HAL_GPIO_Init+0x21c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a55      	ldr	r2, [pc, #340]	@ (80037ec <HAL_GPIO_Init+0x31c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d025      	beq.n	80036e8 <HAL_GPIO_Init+0x218>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a54      	ldr	r2, [pc, #336]	@ (80037f0 <HAL_GPIO_Init+0x320>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d01f      	beq.n	80036e4 <HAL_GPIO_Init+0x214>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a53      	ldr	r2, [pc, #332]	@ (80037f4 <HAL_GPIO_Init+0x324>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d019      	beq.n	80036e0 <HAL_GPIO_Init+0x210>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a52      	ldr	r2, [pc, #328]	@ (80037f8 <HAL_GPIO_Init+0x328>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d013      	beq.n	80036dc <HAL_GPIO_Init+0x20c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a51      	ldr	r2, [pc, #324]	@ (80037fc <HAL_GPIO_Init+0x32c>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00d      	beq.n	80036d8 <HAL_GPIO_Init+0x208>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a50      	ldr	r2, [pc, #320]	@ (8003800 <HAL_GPIO_Init+0x330>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d007      	beq.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003804 <HAL_GPIO_Init+0x334>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_GPIO_Init+0x200>
 80036cc:	2308      	movs	r3, #8
 80036ce:	e010      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036d0:	2309      	movs	r3, #9
 80036d2:	e00e      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036d4:	2307      	movs	r3, #7
 80036d6:	e00c      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036d8:	2306      	movs	r3, #6
 80036da:	e00a      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036dc:	2305      	movs	r3, #5
 80036de:	e008      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036e0:	2304      	movs	r3, #4
 80036e2:	e006      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036e4:	2303      	movs	r3, #3
 80036e6:	e004      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e002      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_GPIO_Init+0x222>
 80036f0:	2300      	movs	r3, #0
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	f002 0203 	and.w	r2, r2, #3
 80036f8:	0092      	lsls	r2, r2, #2
 80036fa:	4093      	lsls	r3, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003704:	4936      	ldr	r1, [pc, #216]	@ (80037e0 <HAL_GPIO_Init+0x310>)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	3302      	adds	r3, #2
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003712:	4b3d      	ldr	r3, [pc, #244]	@ (8003808 <HAL_GPIO_Init+0x338>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003736:	4a34      	ldr	r2, [pc, #208]	@ (8003808 <HAL_GPIO_Init+0x338>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800373c:	4b32      	ldr	r3, [pc, #200]	@ (8003808 <HAL_GPIO_Init+0x338>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	43db      	mvns	r3, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003760:	4a29      	ldr	r2, [pc, #164]	@ (8003808 <HAL_GPIO_Init+0x338>)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003766:	4b28      	ldr	r3, [pc, #160]	@ (8003808 <HAL_GPIO_Init+0x338>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800378a:	4a1f      	ldr	r2, [pc, #124]	@ (8003808 <HAL_GPIO_Init+0x338>)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_GPIO_Init+0x338>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	43db      	mvns	r3, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037b4:	4a14      	ldr	r2, [pc, #80]	@ (8003808 <HAL_GPIO_Init+0x338>)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	3301      	adds	r3, #1
 80037be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f47f ae88 	bne.w	80034e0 <HAL_GPIO_Init+0x10>
  }
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40013800 	.word	0x40013800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020400 	.word	0x40020400
 80037ec:	40020800 	.word	0x40020800
 80037f0:	40020c00 	.word	0x40020c00
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40021400 	.word	0x40021400
 80037fc:	40021800 	.word	0x40021800
 8003800:	40021c00 	.word	0x40021c00
 8003804:	40022000 	.word	0x40022000
 8003808:	40013c00 	.word	0x40013c00

0800380c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	460b      	mov	r3, r1
 8003816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003824:	2301      	movs	r3, #1
 8003826:	73fb      	strb	r3, [r7, #15]
 8003828:	e001      	b.n	800382e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800382e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	460b      	mov	r3, r1
 8003844:	807b      	strh	r3, [r7, #2]
 8003846:	4613      	mov	r3, r2
 8003848:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800384a:	787b      	ldrb	r3, [r7, #1]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003850:	887a      	ldrh	r2, [r7, #2]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003856:	e003      	b.n	8003860 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003858:	887b      	ldrh	r3, [r7, #2]
 800385a:	041a      	lsls	r2, r3, #16
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	619a      	str	r2, [r3, #24]
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
	...

0800386c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	@ 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e23b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d050      	beq.n	800392c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800388a:	4b9e      	ldr	r3, [pc, #632]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b04      	cmp	r3, #4
 8003894:	d00c      	beq.n	80038b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003896:	4b9b      	ldr	r3, [pc, #620]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d112      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038a2:	4b98      	ldr	r3, [pc, #608]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ae:	d10b      	bne.n	80038c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	4b94      	ldr	r3, [pc, #592]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d036      	beq.n	800392a <HAL_RCC_OscConfig+0xbe>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d132      	bne.n	800392a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e216      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b08 <HAL_RCC_OscConfig+0x29c>)
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d013      	beq.n	8003902 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fe fee7 	bl	80026ac <HAL_GetTick>
 80038de:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e2:	f7fe fee3 	bl	80026ac <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	@ 0x64
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e200      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f4:	4b83      	ldr	r3, [pc, #524]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x76>
 8003900:	e014      	b.n	800392c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7fe fed3 	bl	80026ac <HAL_GetTick>
 8003906:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800390a:	f7fe fecf 	bl	80026ac <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b64      	cmp	r3, #100	@ 0x64
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e1ec      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391c:	4b79      	ldr	r3, [pc, #484]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f0      	bne.n	800390a <HAL_RCC_OscConfig+0x9e>
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d077      	beq.n	8003a28 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003938:	4b72      	ldr	r3, [pc, #456]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003944:	4b6f      	ldr	r3, [pc, #444]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800394c:	2b08      	cmp	r3, #8
 800394e:	d126      	bne.n	800399e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003950:	4b6c      	ldr	r3, [pc, #432]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d120      	bne.n	800399e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395c:	4b69      	ldr	r3, [pc, #420]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_OscConfig+0x108>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d001      	beq.n	8003974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e1c0      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003974:	4b63      	ldr	r3, [pc, #396]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	21f8      	movs	r1, #248	@ 0xf8
 8003982:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	69b9      	ldr	r1, [r7, #24]
 8003986:	fa91 f1a1 	rbit	r1, r1
 800398a:	6179      	str	r1, [r7, #20]
  return result;
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	fab1 f181 	clz	r1, r1
 8003992:	b2c9      	uxtb	r1, r1
 8003994:	408b      	lsls	r3, r1
 8003996:	495b      	ldr	r1, [pc, #364]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399c:	e044      	b.n	8003a28 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02a      	beq.n	80039fc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a6:	4b59      	ldr	r3, [pc, #356]	@ (8003b0c <HAL_RCC_OscConfig+0x2a0>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe fe7e 	bl	80026ac <HAL_GetTick>
 80039b0:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b4:	f7fe fe7a 	bl	80026ac <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e197      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	21f8      	movs	r1, #248	@ 0xf8
 80039e0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	6939      	ldr	r1, [r7, #16]
 80039e4:	fa91 f1a1 	rbit	r1, r1
 80039e8:	60f9      	str	r1, [r7, #12]
  return result;
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	fab1 f181 	clz	r1, r1
 80039f0:	b2c9      	uxtb	r1, r1
 80039f2:	408b      	lsls	r3, r1
 80039f4:	4943      	ldr	r1, [pc, #268]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
 80039fa:	e015      	b.n	8003a28 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039fc:	4b43      	ldr	r3, [pc, #268]	@ (8003b0c <HAL_RCC_OscConfig+0x2a0>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fe fe53 	bl	80026ac <HAL_GetTick>
 8003a06:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fe fe4f 	bl	80026ac <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e16c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a1c:	4b39      	ldr	r3, [pc, #228]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d030      	beq.n	8003a96 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3c:	4b34      	ldr	r3, [pc, #208]	@ (8003b10 <HAL_RCC_OscConfig+0x2a4>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7fe fe33 	bl	80026ac <HAL_GetTick>
 8003a46:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a4a:	f7fe fe2f 	bl	80026ac <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e14c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5c:	4b29      	ldr	r3, [pc, #164]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x1de>
 8003a68:	e015      	b.n	8003a96 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a6a:	4b29      	ldr	r3, [pc, #164]	@ (8003b10 <HAL_RCC_OscConfig+0x2a4>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a70:	f7fe fe1c 	bl	80026ac <HAL_GetTick>
 8003a74:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a78:	f7fe fe18 	bl	80026ac <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e135      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8087 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aaa:	4b16      	ldr	r3, [pc, #88]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d110      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	4b12      	ldr	r3, [pc, #72]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	4a11      	ldr	r2, [pc, #68]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b04 <HAL_RCC_OscConfig+0x298>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b14 <HAL_RCC_OscConfig+0x2a8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b14 <HAL_RCC_OscConfig+0x2a8>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <HAL_RCC_OscConfig+0x2a8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d122      	bne.n	8003b36 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af0:	4b08      	ldr	r3, [pc, #32]	@ (8003b14 <HAL_RCC_OscConfig+0x2a8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a07      	ldr	r2, [pc, #28]	@ (8003b14 <HAL_RCC_OscConfig+0x2a8>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afc:	f7fe fdd6 	bl	80026ac <HAL_GetTick>
 8003b00:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b02:	e012      	b.n	8003b2a <HAL_RCC_OscConfig+0x2be>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40023802 	.word	0x40023802
 8003b0c:	42470000 	.word	0x42470000
 8003b10:	42470e80 	.word	0x42470e80
 8003b14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b18:	f7fe fdc8 	bl	80026ac <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e0e5      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2a:	4b75      	ldr	r3, [pc, #468]	@ (8003d00 <HAL_RCC_OscConfig+0x494>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	4b72      	ldr	r3, [pc, #456]	@ (8003d04 <HAL_RCC_OscConfig+0x498>)
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b48:	f7fe fdb0 	bl	80026ac <HAL_GetTick>
 8003b4c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fe fdac 	bl	80026ac <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e0c7      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	4b68      	ldr	r3, [pc, #416]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0ee      	beq.n	8003b50 <HAL_RCC_OscConfig+0x2e4>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b74:	f7fe fd9a 	bl	80026ac <HAL_GetTick>
 8003b78:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7a:	e00a      	b.n	8003b92 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7c:	f7fe fd96 	bl	80026ac <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0b1      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b92:	4b5d      	ldr	r3, [pc, #372]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1ee      	bne.n	8003b7c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d105      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba6:	4b58      	ldr	r3, [pc, #352]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003baa:	4a57      	ldr	r2, [pc, #348]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 809c 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bbc:	4b52      	ldr	r3, [pc, #328]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d061      	beq.n	8003c8c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d146      	bne.n	8003c5e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8003d0c <HAL_RCC_OscConfig+0x4a0>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe fd69 	bl	80026ac <HAL_GetTick>
 8003bda:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fe fd65 	bl	80026ac <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b64      	cmp	r3, #100	@ 0x64
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e082      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf0:	4b45      	ldr	r3, [pc, #276]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bfc:	4b42      	ldr	r3, [pc, #264]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	4b43      	ldr	r3, [pc, #268]	@ (8003d10 <HAL_RCC_OscConfig+0x4a4>)
 8003c02:	4013      	ands	r3, r2
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	69d1      	ldr	r1, [r2, #28]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6a12      	ldr	r2, [r2, #32]
 8003c0c:	4311      	orrs	r1, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c12:	0192      	lsls	r2, r2, #6
 8003c14:	4311      	orrs	r1, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c1a:	0612      	lsls	r2, r2, #24
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003c22:	0852      	lsrs	r2, r2, #1
 8003c24:	3a01      	subs	r2, #1
 8003c26:	0412      	lsls	r2, r2, #16
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	4937      	ldr	r1, [pc, #220]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c30:	4b36      	ldr	r3, [pc, #216]	@ (8003d0c <HAL_RCC_OscConfig+0x4a0>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fe fd39 	bl	80026ac <HAL_GetTick>
 8003c3a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3e:	f7fe fd35 	bl	80026ac <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b64      	cmp	r3, #100	@ 0x64
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e052      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c50:	4b2d      	ldr	r3, [pc, #180]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0f0      	beq.n	8003c3e <HAL_RCC_OscConfig+0x3d2>
 8003c5c:	e04a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8003d0c <HAL_RCC_OscConfig+0x4a0>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fd22 	bl	80026ac <HAL_GetTick>
 8003c68:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fe fd1e 	bl	80026ac <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	@ 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e03b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x400>
 8003c8a:	e033      	b.n	8003cf4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e02e      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <HAL_RCC_OscConfig+0x49c>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d121      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d11a      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cc6:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d111      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3728      	adds	r7, #40	@ 0x28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40007000 	.word	0x40007000
 8003d04:	40023870 	.word	0x40023870
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	42470060 	.word	0x42470060
 8003d10:	f0bc8000 	.word	0xf0bc8000

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0d2      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b6b      	ldr	r3, [pc, #428]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d90c      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b68      	ldr	r3, [pc, #416]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b66      	ldr	r3, [pc, #408]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0be      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d68:	4b5c      	ldr	r3, [pc, #368]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a5b      	ldr	r2, [pc, #364]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003d80:	4b56      	ldr	r3, [pc, #344]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a55      	ldr	r2, [pc, #340]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b53      	ldr	r3, [pc, #332]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	4950      	ldr	r1, [pc, #320]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d040      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b4a      	ldr	r3, [pc, #296]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d115      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e085      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b44      	ldr	r3, [pc, #272]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e079      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dda:	4b40      	ldr	r3, [pc, #256]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e071      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b3c      	ldr	r3, [pc, #240]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4939      	ldr	r1, [pc, #228]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7fe fc56 	bl	80026ac <HAL_GetTick>
 8003e00:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fe fc52 	bl	80026ac <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e059      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b30      	ldr	r3, [pc, #192]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d20c      	bcs.n	8003e54 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b27      	ldr	r3, [pc, #156]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	4b25      	ldr	r3, [pc, #148]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e03c      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e60:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	491b      	ldr	r1, [pc, #108]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7e:	4b17      	ldr	r3, [pc, #92]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4913      	ldr	r1, [pc, #76]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003e92:	f000 f82b 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003e96:	4601      	mov	r1, r0
 8003e98:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ea0:	22f0      	movs	r2, #240	@ 0xf0
 8003ea2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	fa92 f2a2 	rbit	r2, r2
 8003eaa:	60fa      	str	r2, [r7, #12]
  return result;
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	fab2 f282 	clz	r2, r2
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	40d3      	lsrs	r3, r2
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1cc>)
 8003eb8:	5cd3      	ldrb	r3, [r2, r3]
 8003eba:	fa21 f303 	lsr.w	r3, r1, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fbae 	bl	8002628 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	08007fe0 	.word	0x08007fe0
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef0:	b094      	sub	sp, #80	@ 0x50
 8003ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ef8:	2300      	movs	r3, #0
 8003efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003efc:	2300      	movs	r3, #0
 8003efe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f04:	4b7c      	ldr	r3, [pc, #496]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d00d      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x40>
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	f200 80e7 	bhi.w	80040e4 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x34>
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f1e:	e0e1      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f20:	4b76      	ldr	r3, [pc, #472]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x210>)
 8003f22:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003f24:	e0e1      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f26:	4b75      	ldr	r3, [pc, #468]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x210>)
 8003f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f2a:	e0de      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2c:	4b72      	ldr	r3, [pc, #456]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f34:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f36:	4b70      	ldr	r3, [pc, #448]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d065      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b6d      	ldr	r3, [pc, #436]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	2200      	movs	r2, #0
 8003f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f56:	2300      	movs	r3, #0
 8003f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f5e:	4622      	mov	r2, r4
 8003f60:	462b      	mov	r3, r5
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	0159      	lsls	r1, r3, #5
 8003f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f70:	0150      	lsls	r0, r2, #5
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4621      	mov	r1, r4
 8003f78:	1a51      	subs	r1, r2, r1
 8003f7a:	6139      	str	r1, [r7, #16]
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f90:	4659      	mov	r1, fp
 8003f92:	018b      	lsls	r3, r1, #6
 8003f94:	4651      	mov	r1, sl
 8003f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f9a:	4651      	mov	r1, sl
 8003f9c:	018a      	lsls	r2, r1, #6
 8003f9e:	46d4      	mov	ip, sl
 8003fa0:	ebb2 080c 	subs.w	r8, r2, ip
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fbe:	4690      	mov	r8, r2
 8003fc0:	4699      	mov	r9, r3
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	eb18 0303 	adds.w	r3, r8, r3
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	462b      	mov	r3, r5
 8003fcc:	eb49 0303 	adc.w	r3, r9, r3
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fde:	4629      	mov	r1, r5
 8003fe0:	028b      	lsls	r3, r1, #10
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003fec:	4601      	mov	r1, r0
 8003fee:	028a      	lsls	r2, r1, #10
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ffc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004000:	f7fc fedc 	bl	8000dbc <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4613      	mov	r3, r2
 800400a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800400c:	e05c      	b.n	80040c8 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400e:	4b3a      	ldr	r3, [pc, #232]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	2200      	movs	r2, #0
 8004016:	4618      	mov	r0, r3
 8004018:	4611      	mov	r1, r2
 800401a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
 8004024:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	f04f 0000 	mov.w	r0, #0
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	0159      	lsls	r1, r3, #5
 8004036:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800403a:	0150      	lsls	r0, r2, #5
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	46c4      	mov	ip, r8
 8004042:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004046:	4640      	mov	r0, r8
 8004048:	4649      	mov	r1, r9
 800404a:	468c      	mov	ip, r1
 800404c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800405c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004060:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004064:	ebb2 040a 	subs.w	r4, r2, sl
 8004068:	eb63 050b 	sbc.w	r5, r3, fp
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	00eb      	lsls	r3, r5, #3
 8004076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800407a:	00e2      	lsls	r2, r4, #3
 800407c:	4614      	mov	r4, r2
 800407e:	461d      	mov	r5, r3
 8004080:	4603      	mov	r3, r0
 8004082:	18e3      	adds	r3, r4, r3
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	460b      	mov	r3, r1
 8004088:	eb45 0303 	adc.w	r3, r5, r3
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800409a:	4629      	mov	r1, r5
 800409c:	028b      	lsls	r3, r1, #10
 800409e:	4620      	mov	r0, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	4604      	mov	r4, r0
 80040a4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80040a8:	4601      	mov	r1, r0
 80040aa:	028a      	lsls	r2, r1, #10
 80040ac:	4610      	mov	r0, r2
 80040ae:	4619      	mov	r1, r3
 80040b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b2:	2200      	movs	r2, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	61fa      	str	r2, [r7, #28]
 80040b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040bc:	f7fc fe7e 	bl	8000dbc <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4613      	mov	r3, r2
 80040c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x20c>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	3301      	adds	r3, #1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80040d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x210>)
 80040e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3750      	adds	r7, #80	@ 0x50
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800
 80040fc:	00f42400 	.word	0x00f42400

08004100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004104:	4b02      	ldr	r3, [pc, #8]	@ (8004110 <HAL_RCC_GetHCLKFreq+0x10>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	20000000 	.word	0x20000000

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800411a:	f7ff fff1 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 800411e:	4601      	mov	r1, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004128:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 800412c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	fa92 f2a2 	rbit	r2, r2
 8004134:	603a      	str	r2, [r7, #0]
  return result;
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	fab2 f282 	clz	r2, r2
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	40d3      	lsrs	r3, r2
 8004140:	4a04      	ldr	r2, [pc, #16]	@ (8004154 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004142:	5cd3      	ldrb	r3, [r2, r3]
 8004144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40023800 	.word	0x40023800
 8004154:	08007ff0 	.word	0x08007ff0

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800415e:	f7ff ffcf 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 8004162:	4601      	mov	r1, r0
 8004164:	4b0b      	ldr	r3, [pc, #44]	@ (8004194 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800416c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8004170:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	fa92 f2a2 	rbit	r2, r2
 8004178:	603a      	str	r2, [r7, #0]
  return result;
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	fab2 f282 	clz	r2, r2
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	40d3      	lsrs	r3, r2
 8004184:	4a04      	ldr	r2, [pc, #16]	@ (8004198 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	fa21 f303 	lsr.w	r3, r1, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	08007ff0 	.word	0x08007ff0

0800419c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e07b      	b.n	80042a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d108      	bne.n	80041c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041be:	d009      	beq.n	80041d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	61da      	str	r2, [r3, #28]
 80041c6:	e005      	b.n	80041d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd fffe 	bl	80021f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800420a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004258:	ea42 0103 	orr.w	r1, r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	f003 0104 	and.w	r1, r3, #4
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	f003 0210 	and.w	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b088      	sub	sp, #32
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042be:	f7fe f9f5 	bl	80026ac <HAL_GetTick>
 80042c2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d001      	beq.n	80042d8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
 80042d6:	e12a      	b.n	800452e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_SPI_Transmit+0x36>
 80042de:	88fb      	ldrh	r3, [r7, #6]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e122      	b.n	800452e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d101      	bne.n	80042f6 <HAL_SPI_Transmit+0x48>
 80042f2:	2302      	movs	r3, #2
 80042f4:	e11b      	b.n	800452e <HAL_SPI_Transmit+0x280>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2203      	movs	r2, #3
 8004302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004344:	d10f      	bne.n	8004366 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004370:	2b40      	cmp	r3, #64	@ 0x40
 8004372:	d007      	beq.n	8004384 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438c:	d152      	bne.n	8004434 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_SPI_Transmit+0xee>
 8004396:	8b7b      	ldrh	r3, [r7, #26]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d145      	bne.n	8004428 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	881a      	ldrh	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	1c9a      	adds	r2, r3, #2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043c0:	e032      	b.n	8004428 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d112      	bne.n	80043f6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d4:	881a      	ldrh	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e0:	1c9a      	adds	r2, r3, #2
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043f4:	e018      	b.n	8004428 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f6:	f7fe f959 	bl	80026ac <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d803      	bhi.n	800440e <HAL_SPI_Transmit+0x160>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d102      	bne.n	8004414 <HAL_SPI_Transmit+0x166>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e082      	b.n	800452e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1c7      	bne.n	80043c2 <HAL_SPI_Transmit+0x114>
 8004432:	e053      	b.n	80044dc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_SPI_Transmit+0x194>
 800443c:	8b7b      	ldrh	r3, [r7, #26]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d147      	bne.n	80044d2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	7812      	ldrb	r2, [r2, #0]
 800444e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004468:	e033      	b.n	80044d2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b02      	cmp	r3, #2
 8004476:	d113      	bne.n	80044a0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800449e:	e018      	b.n	80044d2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044a0:	f7fe f904 	bl	80026ac <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d803      	bhi.n	80044b8 <HAL_SPI_Transmit+0x20a>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d102      	bne.n	80044be <HAL_SPI_Transmit+0x210>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e02d      	b.n	800452e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1c6      	bne.n	800446a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044dc:	69fa      	ldr	r2, [r7, #28]
 80044de:	6839      	ldr	r1, [r7, #0]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fa59 	bl	8004998 <SPI_EndRxTxTransaction>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800452c:	2300      	movs	r3, #0
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b08a      	sub	sp, #40	@ 0x28
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004548:	f7fe f8b0 	bl	80026ac <HAL_GetTick>
 800454c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004554:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004560:	7ffb      	ldrb	r3, [r7, #31]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d00c      	beq.n	8004580 <HAL_SPI_TransmitReceive+0x4a>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800456c:	d106      	bne.n	800457c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <HAL_SPI_TransmitReceive+0x46>
 8004576:	7ffb      	ldrb	r3, [r7, #31]
 8004578:	2b04      	cmp	r3, #4
 800457a:	d001      	beq.n	8004580 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
 800457e:	e17f      	b.n	8004880 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x5c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_SPI_TransmitReceive+0x5c>
 800458c:	887b      	ldrh	r3, [r7, #2]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e174      	b.n	8004880 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_SPI_TransmitReceive+0x6e>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e16d      	b.n	8004880 <HAL_SPI_TransmitReceive+0x34a>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d003      	beq.n	80045c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2205      	movs	r2, #5
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	887a      	ldrh	r2, [r7, #2]
 80045d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	887a      	ldrh	r2, [r7, #2]
 80045d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	887a      	ldrh	r2, [r7, #2]
 80045e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	887a      	ldrh	r2, [r7, #2]
 80045e8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b40      	cmp	r3, #64	@ 0x40
 8004602:	d007      	beq.n	8004614 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800461c:	d17e      	bne.n	800471c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_TransmitReceive+0xf6>
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d16c      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004650:	e059      	b.n	8004706 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b02      	cmp	r3, #2
 800465e:	d11b      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x162>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d016      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x162>
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	2b01      	cmp	r3, #1
 800466e:	d113      	bne.n	8004698 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	881a      	ldrh	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004680:	1c9a      	adds	r2, r3, #2
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d119      	bne.n	80046da <HAL_SPI_TransmitReceive+0x1a4>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d014      	beq.n	80046da <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ba:	b292      	uxth	r2, r2
 80046bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	1c9a      	adds	r2, r3, #2
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d6:	2301      	movs	r3, #1
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046da:	f7fd ffe7 	bl	80026ac <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d80d      	bhi.n	8004706 <HAL_SPI_TransmitReceive+0x1d0>
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d009      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0bc      	b.n	8004880 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800470a:	b29b      	uxth	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1a0      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x11c>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d19b      	bne.n	8004652 <HAL_SPI_TransmitReceive+0x11c>
 800471a:	e082      	b.n	8004822 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_SPI_TransmitReceive+0x1f4>
 8004724:	8afb      	ldrh	r3, [r7, #22]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d171      	bne.n	800480e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004750:	e05d      	b.n	800480e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d11c      	bne.n	800479a <HAL_SPI_TransmitReceive+0x264>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d017      	beq.n	800479a <HAL_SPI_TransmitReceive+0x264>
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	2b01      	cmp	r3, #1
 800476e:	d114      	bne.n	800479a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	7812      	ldrb	r2, [r2, #0]
 800477c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d119      	bne.n	80047dc <HAL_SPI_TransmitReceive+0x2a6>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d014      	beq.n	80047dc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047d8:	2301      	movs	r3, #1
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047dc:	f7fd ff66 	bl	80026ac <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d803      	bhi.n	80047f4 <HAL_SPI_TransmitReceive+0x2be>
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d102      	bne.n	80047fa <HAL_SPI_TransmitReceive+0x2c4>
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e038      	b.n	8004880 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d19c      	bne.n	8004752 <HAL_SPI_TransmitReceive+0x21c>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d197      	bne.n	8004752 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f8b6 	bl	8004998 <SPI_EndRxTxTransaction>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e01d      	b.n	8004880 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10a      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800487e:	2300      	movs	r3, #0
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3728      	adds	r7, #40	@ 0x28
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	4613      	mov	r3, r2
 8004896:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004898:	f7fd ff08 	bl	80026ac <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	4413      	add	r3, r2
 80048a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048a8:	f7fd ff00 	bl	80026ac <HAL_GetTick>
 80048ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048ae:	4b39      	ldr	r3, [pc, #228]	@ (8004994 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	015b      	lsls	r3, r3, #5
 80048b4:	0d1b      	lsrs	r3, r3, #20
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048be:	e054      	b.n	800496a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c6:	d050      	beq.n	800496a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048c8:	f7fd fef0 	bl	80026ac <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d902      	bls.n	80048de <SPI_WaitFlagStateUntilTimeout+0x56>
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d13d      	bne.n	800495a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048f6:	d111      	bne.n	800491c <SPI_WaitFlagStateUntilTimeout+0x94>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004900:	d004      	beq.n	800490c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800490a:	d107      	bne.n	800491c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800491a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004924:	d10f      	bne.n	8004946 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e017      	b.n	800498a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3b01      	subs	r3, #1
 8004968:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	429a      	cmp	r2, r3
 8004978:	bf0c      	ite	eq
 800497a:	2301      	moveq	r3, #1
 800497c:	2300      	movne	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	461a      	mov	r2, r3
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	429a      	cmp	r2, r3
 8004986:	d19b      	bne.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000000 	.word	0x20000000

08004998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af02      	add	r7, sp, #8
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2201      	movs	r2, #1
 80049ac:	2102      	movs	r1, #2
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff ff6a 	bl	8004888 <SPI_WaitFlagStateUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d007      	beq.n	80049ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049be:	f043 0220 	orr.w	r2, r3, #32
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e013      	b.n	80049f2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2180      	movs	r1, #128	@ 0x80
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f7ff ff57 	bl	8004888 <SPI_WaitFlagStateUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d007      	beq.n	80049f0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e4:	f043 0220 	orr.w	r2, r3, #32
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e000      	b.n	80049f2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e041      	b.n	8004a90 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fd fc2d 	bl	8002280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
 8004a36:	4619      	mov	r1, r3
 8004a38:	4610      	mov	r0, r2
 8004a3a:	f000 f95b 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d001      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e046      	b.n	8004b3e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a22      	ldr	r2, [pc, #136]	@ (8004b48 <HAL_TIM_Base_Start+0xb0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d022      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aca:	d01d      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	@ (8004b4c <HAL_TIM_Base_Start+0xb4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d018      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1d      	ldr	r2, [pc, #116]	@ (8004b50 <HAL_TIM_Base_Start+0xb8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b54 <HAL_TIM_Base_Start+0xbc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00e      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <HAL_TIM_Base_Start+0xc0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d009      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <HAL_TIM_Base_Start+0xc4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d004      	beq.n	8004b08 <HAL_TIM_Base_Start+0x70>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a17      	ldr	r2, [pc, #92]	@ (8004b60 <HAL_TIM_Base_Start+0xc8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d111      	bne.n	8004b2c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b06      	cmp	r3, #6
 8004b18:	d010      	beq.n	8004b3c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2a:	e007      	b.n	8004b3c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00
 8004b58:	40010400 	.word	0x40010400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40001800 	.word	0x40001800

08004b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIM_ConfigClockSource+0x1c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e0b4      	b.n	8004cea <HAL_TIM_ConfigClockSource+0x186>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ba6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb8:	d03e      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0xd4>
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bbe:	f200 8087 	bhi.w	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc6:	f000 8086 	beq.w	8004cd6 <HAL_TIM_ConfigClockSource+0x172>
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bce:	d87f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b70      	cmp	r3, #112	@ 0x70
 8004bd2:	d01a      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xa6>
 8004bd4:	2b70      	cmp	r3, #112	@ 0x70
 8004bd6:	d87b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b60      	cmp	r3, #96	@ 0x60
 8004bda:	d050      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x11a>
 8004bdc:	2b60      	cmp	r3, #96	@ 0x60
 8004bde:	d877      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b50      	cmp	r3, #80	@ 0x50
 8004be2:	d03c      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xfa>
 8004be4:	2b50      	cmp	r3, #80	@ 0x50
 8004be6:	d873      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b40      	cmp	r3, #64	@ 0x40
 8004bea:	d058      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x13a>
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d86f      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b30      	cmp	r3, #48	@ 0x30
 8004bf2:	d064      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b30      	cmp	r3, #48	@ 0x30
 8004bf6:	d86b      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d060      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15a>
 8004bfc:	2b20      	cmp	r3, #32
 8004bfe:	d867      	bhi.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d05c      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15a>
 8004c04:	2b10      	cmp	r3, #16
 8004c06:	d05a      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0x15a>
 8004c08:	e062      	b.n	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c1a:	f000 f98c 	bl	8004f36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	609a      	str	r2, [r3, #8]
      break;
 8004c36:	e04f      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	f000 f975 	bl	8004f36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c5a:	609a      	str	r2, [r3, #8]
      break;
 8004c5c:	e03c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 f8ec 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2150      	movs	r1, #80	@ 0x50
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f943 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e02c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 f90a 	bl	8004ea4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2160      	movs	r1, #96	@ 0x60
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f933 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e01c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	461a      	mov	r2, r3
 8004cac:	f000 f8cc 	bl	8004e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2140      	movs	r1, #64	@ 0x40
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f923 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004cbc:	e00c      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4610      	mov	r0, r2
 8004cca:	f000 f91a 	bl	8004f02 <TIM_ITRx_SetConfig>
      break;
 8004cce:	e003      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e000      	b.n	8004cd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a45      	ldr	r2, [pc, #276]	@ (8004e1c <TIM_Base_SetConfig+0x128>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d12:	d00f      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a42      	ldr	r2, [pc, #264]	@ (8004e20 <TIM_Base_SetConfig+0x12c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a41      	ldr	r2, [pc, #260]	@ (8004e24 <TIM_Base_SetConfig+0x130>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a40      	ldr	r2, [pc, #256]	@ (8004e28 <TIM_Base_SetConfig+0x134>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8004e2c <TIM_Base_SetConfig+0x138>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a34      	ldr	r2, [pc, #208]	@ (8004e1c <TIM_Base_SetConfig+0x128>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d02b      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d54:	d027      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a31      	ldr	r2, [pc, #196]	@ (8004e20 <TIM_Base_SetConfig+0x12c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d023      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a30      	ldr	r2, [pc, #192]	@ (8004e24 <TIM_Base_SetConfig+0x130>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d01f      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a2f      	ldr	r2, [pc, #188]	@ (8004e28 <TIM_Base_SetConfig+0x134>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01b      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2e      	ldr	r2, [pc, #184]	@ (8004e2c <TIM_Base_SetConfig+0x138>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d017      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2d      	ldr	r2, [pc, #180]	@ (8004e30 <TIM_Base_SetConfig+0x13c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2c      	ldr	r2, [pc, #176]	@ (8004e34 <TIM_Base_SetConfig+0x140>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a2b      	ldr	r2, [pc, #172]	@ (8004e38 <TIM_Base_SetConfig+0x144>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a2a      	ldr	r2, [pc, #168]	@ (8004e3c <TIM_Base_SetConfig+0x148>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a29      	ldr	r2, [pc, #164]	@ (8004e40 <TIM_Base_SetConfig+0x14c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a28      	ldr	r2, [pc, #160]	@ (8004e44 <TIM_Base_SetConfig+0x150>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d108      	bne.n	8004db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a0f      	ldr	r2, [pc, #60]	@ (8004e1c <TIM_Base_SetConfig+0x128>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0xf8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a11      	ldr	r2, [pc, #68]	@ (8004e2c <TIM_Base_SetConfig+0x138>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d103      	bne.n	8004df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d105      	bne.n	8004e12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f023 0201 	bic.w	r2, r3, #1
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	611a      	str	r2, [r3, #16]
  }
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40000400 	.word	0x40000400
 8004e24:	40000800 	.word	0x40000800
 8004e28:	40000c00 	.word	0x40000c00
 8004e2c:	40010400 	.word	0x40010400
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40014400 	.word	0x40014400
 8004e38:	40014800 	.word	0x40014800
 8004e3c:	40001800 	.word	0x40001800
 8004e40:	40001c00 	.word	0x40001c00
 8004e44:	40002000 	.word	0x40002000

08004e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0201 	bic.w	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 030a 	bic.w	r3, r3, #10
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0210 	bic.w	r2, r3, #16
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	031b      	lsls	r3, r3, #12
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	621a      	str	r2, [r3, #32]
}
 8004ef8:	bf00      	nop
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b085      	sub	sp, #20
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f043 0307 	orr.w	r3, r3, #7
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	609a      	str	r2, [r3, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b087      	sub	sp, #28
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
 8004f42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	021a      	lsls	r2, r3, #8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	609a      	str	r2, [r3, #8]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr

08004f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e05a      	b.n	8005042 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a20      	ldr	r2, [pc, #128]	@ (800504c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd8:	d01d      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1c      	ldr	r2, [pc, #112]	@ (8005050 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8005054 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a19      	ldr	r2, [pc, #100]	@ (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a17      	ldr	r2, [pc, #92]	@ (800505c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a16      	ldr	r2, [pc, #88]	@ (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a14      	ldr	r2, [pc, #80]	@ (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d10c      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800501c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4313      	orrs	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	40010000 	.word	0x40010000
 8005050:	40000400 	.word	0x40000400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40010400 	.word	0x40010400
 8005060:	40014000 	.word	0x40014000
 8005064:	40001800 	.word	0x40001800

08005068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e042      	b.n	8005100 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd f916 	bl	80022c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f82b 	bl	8005108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695a      	ldr	r2, [r3, #20]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689a      	ldr	r2, [r3, #8]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	431a      	orrs	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	4313      	orrs	r3, r2
 800513c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005148:	f023 030c 	bic.w	r3, r3, #12
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	430b      	orrs	r3, r1
 8005154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a57      	ldr	r2, [pc, #348]	@ (80052d0 <UART_SetConfig+0x1c8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <UART_SetConfig+0x78>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a56      	ldr	r2, [pc, #344]	@ (80052d4 <UART_SetConfig+0x1cc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d103      	bne.n	8005188 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005180:	f7fe ffea 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	e002      	b.n	800518e <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005188:	f7fe ffc4 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 800518c:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005196:	d14c      	bne.n	8005232 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009a      	lsls	r2, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	4a4a      	ldr	r2, [pc, #296]	@ (80052d8 <UART_SetConfig+0x1d0>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	0119      	lsls	r1, r3, #4
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4613      	mov	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	009a      	lsls	r2, r3, #2
 80051c2:	441a      	add	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80051ce:	4b42      	ldr	r3, [pc, #264]	@ (80052d8 <UART_SetConfig+0x1d0>)
 80051d0:	fba3 0302 	umull	r0, r3, r3, r2
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	2064      	movs	r0, #100	@ 0x64
 80051d8:	fb00 f303 	mul.w	r3, r0, r3
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	3332      	adds	r3, #50	@ 0x32
 80051e2:	4a3d      	ldr	r2, [pc, #244]	@ (80052d8 <UART_SetConfig+0x1d0>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	095b      	lsrs	r3, r3, #5
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051f0:	4419      	add	r1, r3
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009a      	lsls	r2, r3, #2
 80051fc:	441a      	add	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	fbb2 f2f3 	udiv	r2, r2, r3
 8005208:	4b33      	ldr	r3, [pc, #204]	@ (80052d8 <UART_SetConfig+0x1d0>)
 800520a:	fba3 0302 	umull	r0, r3, r3, r2
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	2064      	movs	r0, #100	@ 0x64
 8005212:	fb00 f303 	mul.w	r3, r0, r3
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	3332      	adds	r3, #50	@ 0x32
 800521c:	4a2e      	ldr	r2, [pc, #184]	@ (80052d8 <UART_SetConfig+0x1d0>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	f003 0207 	and.w	r2, r3, #7
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	440a      	add	r2, r1
 800522e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005230:	e04a      	b.n	80052c8 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	009a      	lsls	r2, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	4a23      	ldr	r2, [pc, #140]	@ (80052d8 <UART_SetConfig+0x1d0>)
 800524a:	fba2 2303 	umull	r2, r3, r2, r3
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	0119      	lsls	r1, r3, #4
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009a      	lsls	r2, r3, #2
 800525c:	441a      	add	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	fbb2 f2f3 	udiv	r2, r2, r3
 8005268:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <UART_SetConfig+0x1d0>)
 800526a:	fba3 0302 	umull	r0, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2064      	movs	r0, #100	@ 0x64
 8005272:	fb00 f303 	mul.w	r3, r0, r3
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	3332      	adds	r3, #50	@ 0x32
 800527c:	4a16      	ldr	r2, [pc, #88]	@ (80052d8 <UART_SetConfig+0x1d0>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005288:	4419      	add	r1, r3
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009a      	lsls	r2, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	fbb2 f2f3 	udiv	r2, r2, r3
 80052a0:	4b0d      	ldr	r3, [pc, #52]	@ (80052d8 <UART_SetConfig+0x1d0>)
 80052a2:	fba3 0302 	umull	r0, r3, r3, r2
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	2064      	movs	r0, #100	@ 0x64
 80052aa:	fb00 f303 	mul.w	r3, r0, r3
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	3332      	adds	r3, #50	@ 0x32
 80052b4:	4a08      	ldr	r2, [pc, #32]	@ (80052d8 <UART_SetConfig+0x1d0>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	440a      	add	r2, r1
 80052c6:	609a      	str	r2, [r3, #8]
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40011000 	.word	0x40011000
 80052d4:	40011400 	.word	0x40011400
 80052d8:	51eb851f 	.word	0x51eb851f

080052dc <__cvt>:
 80052dc:	2b00      	cmp	r3, #0
 80052de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e2:	461d      	mov	r5, r3
 80052e4:	bfbb      	ittet	lt
 80052e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80052ea:	461d      	movlt	r5, r3
 80052ec:	2300      	movge	r3, #0
 80052ee:	232d      	movlt	r3, #45	@ 0x2d
 80052f0:	b088      	sub	sp, #32
 80052f2:	4614      	mov	r4, r2
 80052f4:	bfb8      	it	lt
 80052f6:	4614      	movlt	r4, r2
 80052f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80052fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80052fc:	7013      	strb	r3, [r2, #0]
 80052fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005300:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005304:	f023 0820 	bic.w	r8, r3, #32
 8005308:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800530c:	d005      	beq.n	800531a <__cvt+0x3e>
 800530e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005312:	d100      	bne.n	8005316 <__cvt+0x3a>
 8005314:	3601      	adds	r6, #1
 8005316:	2302      	movs	r3, #2
 8005318:	e000      	b.n	800531c <__cvt+0x40>
 800531a:	2303      	movs	r3, #3
 800531c:	aa07      	add	r2, sp, #28
 800531e:	9204      	str	r2, [sp, #16]
 8005320:	aa06      	add	r2, sp, #24
 8005322:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005326:	e9cd 3600 	strd	r3, r6, [sp]
 800532a:	4622      	mov	r2, r4
 800532c:	462b      	mov	r3, r5
 800532e:	f000 ff53 	bl	80061d8 <_dtoa_r>
 8005332:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005336:	4607      	mov	r7, r0
 8005338:	d119      	bne.n	800536e <__cvt+0x92>
 800533a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800533c:	07db      	lsls	r3, r3, #31
 800533e:	d50e      	bpl.n	800535e <__cvt+0x82>
 8005340:	eb00 0906 	add.w	r9, r0, r6
 8005344:	2200      	movs	r2, #0
 8005346:	2300      	movs	r3, #0
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	f7fb fb68 	bl	8000a20 <__aeabi_dcmpeq>
 8005350:	b108      	cbz	r0, 8005356 <__cvt+0x7a>
 8005352:	f8cd 901c 	str.w	r9, [sp, #28]
 8005356:	2230      	movs	r2, #48	@ 0x30
 8005358:	9b07      	ldr	r3, [sp, #28]
 800535a:	454b      	cmp	r3, r9
 800535c:	d31e      	bcc.n	800539c <__cvt+0xc0>
 800535e:	4638      	mov	r0, r7
 8005360:	9b07      	ldr	r3, [sp, #28]
 8005362:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005364:	1bdb      	subs	r3, r3, r7
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	b008      	add	sp, #32
 800536a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005372:	eb00 0906 	add.w	r9, r0, r6
 8005376:	d1e5      	bne.n	8005344 <__cvt+0x68>
 8005378:	7803      	ldrb	r3, [r0, #0]
 800537a:	2b30      	cmp	r3, #48	@ 0x30
 800537c:	d10a      	bne.n	8005394 <__cvt+0xb8>
 800537e:	2200      	movs	r2, #0
 8005380:	2300      	movs	r3, #0
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	f7fb fb4b 	bl	8000a20 <__aeabi_dcmpeq>
 800538a:	b918      	cbnz	r0, 8005394 <__cvt+0xb8>
 800538c:	f1c6 0601 	rsb	r6, r6, #1
 8005390:	f8ca 6000 	str.w	r6, [sl]
 8005394:	f8da 3000 	ldr.w	r3, [sl]
 8005398:	4499      	add	r9, r3
 800539a:	e7d3      	b.n	8005344 <__cvt+0x68>
 800539c:	1c59      	adds	r1, r3, #1
 800539e:	9107      	str	r1, [sp, #28]
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	e7d9      	b.n	8005358 <__cvt+0x7c>

080053a4 <__exponent>:
 80053a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a6:	2900      	cmp	r1, #0
 80053a8:	bfb6      	itet	lt
 80053aa:	232d      	movlt	r3, #45	@ 0x2d
 80053ac:	232b      	movge	r3, #43	@ 0x2b
 80053ae:	4249      	neglt	r1, r1
 80053b0:	2909      	cmp	r1, #9
 80053b2:	7002      	strb	r2, [r0, #0]
 80053b4:	7043      	strb	r3, [r0, #1]
 80053b6:	dd29      	ble.n	800540c <__exponent+0x68>
 80053b8:	f10d 0307 	add.w	r3, sp, #7
 80053bc:	461d      	mov	r5, r3
 80053be:	270a      	movs	r7, #10
 80053c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80053c4:	461a      	mov	r2, r3
 80053c6:	fb07 1416 	mls	r4, r7, r6, r1
 80053ca:	3430      	adds	r4, #48	@ 0x30
 80053cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80053d0:	460c      	mov	r4, r1
 80053d2:	2c63      	cmp	r4, #99	@ 0x63
 80053d4:	4631      	mov	r1, r6
 80053d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80053da:	dcf1      	bgt.n	80053c0 <__exponent+0x1c>
 80053dc:	3130      	adds	r1, #48	@ 0x30
 80053de:	1e94      	subs	r4, r2, #2
 80053e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053e4:	4623      	mov	r3, r4
 80053e6:	1c41      	adds	r1, r0, #1
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	d30a      	bcc.n	8005402 <__exponent+0x5e>
 80053ec:	f10d 0309 	add.w	r3, sp, #9
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	42ac      	cmp	r4, r5
 80053f4:	bf88      	it	hi
 80053f6:	2300      	movhi	r3, #0
 80053f8:	3302      	adds	r3, #2
 80053fa:	4403      	add	r3, r0
 80053fc:	1a18      	subs	r0, r3, r0
 80053fe:	b003      	add	sp, #12
 8005400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005402:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005406:	f801 6f01 	strb.w	r6, [r1, #1]!
 800540a:	e7ed      	b.n	80053e8 <__exponent+0x44>
 800540c:	2330      	movs	r3, #48	@ 0x30
 800540e:	3130      	adds	r1, #48	@ 0x30
 8005410:	7083      	strb	r3, [r0, #2]
 8005412:	70c1      	strb	r1, [r0, #3]
 8005414:	1d03      	adds	r3, r0, #4
 8005416:	e7f1      	b.n	80053fc <__exponent+0x58>

08005418 <_printf_float>:
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	b091      	sub	sp, #68	@ 0x44
 800541e:	460c      	mov	r4, r1
 8005420:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005424:	4616      	mov	r6, r2
 8005426:	461f      	mov	r7, r3
 8005428:	4605      	mov	r5, r0
 800542a:	f000 fdc5 	bl	8005fb8 <_localeconv_r>
 800542e:	6803      	ldr	r3, [r0, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	9308      	str	r3, [sp, #32]
 8005434:	f7fa fec8 	bl	80001c8 <strlen>
 8005438:	2300      	movs	r3, #0
 800543a:	930e      	str	r3, [sp, #56]	@ 0x38
 800543c:	f8d8 3000 	ldr.w	r3, [r8]
 8005440:	9009      	str	r0, [sp, #36]	@ 0x24
 8005442:	3307      	adds	r3, #7
 8005444:	f023 0307 	bic.w	r3, r3, #7
 8005448:	f103 0208 	add.w	r2, r3, #8
 800544c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005450:	f8d4 b000 	ldr.w	fp, [r4]
 8005454:	f8c8 2000 	str.w	r2, [r8]
 8005458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800545c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005462:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005466:	f04f 32ff 	mov.w	r2, #4294967295
 800546a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800546e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005472:	4b9c      	ldr	r3, [pc, #624]	@ (80056e4 <_printf_float+0x2cc>)
 8005474:	f7fb fb06 	bl	8000a84 <__aeabi_dcmpun>
 8005478:	bb70      	cbnz	r0, 80054d8 <_printf_float+0xc0>
 800547a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800547e:	f04f 32ff 	mov.w	r2, #4294967295
 8005482:	4b98      	ldr	r3, [pc, #608]	@ (80056e4 <_printf_float+0x2cc>)
 8005484:	f7fb fae0 	bl	8000a48 <__aeabi_dcmple>
 8005488:	bb30      	cbnz	r0, 80054d8 <_printf_float+0xc0>
 800548a:	2200      	movs	r2, #0
 800548c:	2300      	movs	r3, #0
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fb facf 	bl	8000a34 <__aeabi_dcmplt>
 8005496:	b110      	cbz	r0, 800549e <_printf_float+0x86>
 8005498:	232d      	movs	r3, #45	@ 0x2d
 800549a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800549e:	4a92      	ldr	r2, [pc, #584]	@ (80056e8 <_printf_float+0x2d0>)
 80054a0:	4b92      	ldr	r3, [pc, #584]	@ (80056ec <_printf_float+0x2d4>)
 80054a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80054a6:	bf94      	ite	ls
 80054a8:	4690      	movls	r8, r2
 80054aa:	4698      	movhi	r8, r3
 80054ac:	2303      	movs	r3, #3
 80054ae:	f04f 0900 	mov.w	r9, #0
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	f02b 0304 	bic.w	r3, fp, #4
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	4633      	mov	r3, r6
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	9700      	str	r7, [sp, #0]
 80054c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80054c4:	f000 f9d4 	bl	8005870 <_printf_common>
 80054c8:	3001      	adds	r0, #1
 80054ca:	f040 8090 	bne.w	80055ee <_printf_float+0x1d6>
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
 80054d2:	b011      	add	sp, #68	@ 0x44
 80054d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d8:	4642      	mov	r2, r8
 80054da:	464b      	mov	r3, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb fad0 	bl	8000a84 <__aeabi_dcmpun>
 80054e4:	b148      	cbz	r0, 80054fa <_printf_float+0xe2>
 80054e6:	464b      	mov	r3, r9
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bfb8      	it	lt
 80054ec:	232d      	movlt	r3, #45	@ 0x2d
 80054ee:	4a80      	ldr	r2, [pc, #512]	@ (80056f0 <_printf_float+0x2d8>)
 80054f0:	bfb8      	it	lt
 80054f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054f6:	4b7f      	ldr	r3, [pc, #508]	@ (80056f4 <_printf_float+0x2dc>)
 80054f8:	e7d3      	b.n	80054a2 <_printf_float+0x8a>
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	d13f      	bne.n	8005584 <_printf_float+0x16c>
 8005504:	2306      	movs	r3, #6
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800550e:	6023      	str	r3, [r4, #0]
 8005510:	9206      	str	r2, [sp, #24]
 8005512:	aa0e      	add	r2, sp, #56	@ 0x38
 8005514:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005518:	aa0d      	add	r2, sp, #52	@ 0x34
 800551a:	9203      	str	r2, [sp, #12]
 800551c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005520:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005524:	6863      	ldr	r3, [r4, #4]
 8005526:	4642      	mov	r2, r8
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	4628      	mov	r0, r5
 800552c:	464b      	mov	r3, r9
 800552e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005530:	f7ff fed4 	bl	80052dc <__cvt>
 8005534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005536:	4680      	mov	r8, r0
 8005538:	2947      	cmp	r1, #71	@ 0x47
 800553a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800553c:	d128      	bne.n	8005590 <_printf_float+0x178>
 800553e:	1cc8      	adds	r0, r1, #3
 8005540:	db02      	blt.n	8005548 <_printf_float+0x130>
 8005542:	6863      	ldr	r3, [r4, #4]
 8005544:	4299      	cmp	r1, r3
 8005546:	dd40      	ble.n	80055ca <_printf_float+0x1b2>
 8005548:	f1aa 0a02 	sub.w	sl, sl, #2
 800554c:	fa5f fa8a 	uxtb.w	sl, sl
 8005550:	4652      	mov	r2, sl
 8005552:	3901      	subs	r1, #1
 8005554:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005558:	910d      	str	r1, [sp, #52]	@ 0x34
 800555a:	f7ff ff23 	bl	80053a4 <__exponent>
 800555e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005560:	4681      	mov	r9, r0
 8005562:	1813      	adds	r3, r2, r0
 8005564:	2a01      	cmp	r2, #1
 8005566:	6123      	str	r3, [r4, #16]
 8005568:	dc02      	bgt.n	8005570 <_printf_float+0x158>
 800556a:	6822      	ldr	r2, [r4, #0]
 800556c:	07d2      	lsls	r2, r2, #31
 800556e:	d501      	bpl.n	8005574 <_printf_float+0x15c>
 8005570:	3301      	adds	r3, #1
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005578:	2b00      	cmp	r3, #0
 800557a:	d09e      	beq.n	80054ba <_printf_float+0xa2>
 800557c:	232d      	movs	r3, #45	@ 0x2d
 800557e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005582:	e79a      	b.n	80054ba <_printf_float+0xa2>
 8005584:	2947      	cmp	r1, #71	@ 0x47
 8005586:	d1bf      	bne.n	8005508 <_printf_float+0xf0>
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1bd      	bne.n	8005508 <_printf_float+0xf0>
 800558c:	2301      	movs	r3, #1
 800558e:	e7ba      	b.n	8005506 <_printf_float+0xee>
 8005590:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005594:	d9dc      	bls.n	8005550 <_printf_float+0x138>
 8005596:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800559a:	d118      	bne.n	80055ce <_printf_float+0x1b6>
 800559c:	2900      	cmp	r1, #0
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	dd0b      	ble.n	80055ba <_printf_float+0x1a2>
 80055a2:	6121      	str	r1, [r4, #16]
 80055a4:	b913      	cbnz	r3, 80055ac <_printf_float+0x194>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	07d0      	lsls	r0, r2, #31
 80055aa:	d502      	bpl.n	80055b2 <_printf_float+0x19a>
 80055ac:	3301      	adds	r3, #1
 80055ae:	440b      	add	r3, r1
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	f04f 0900 	mov.w	r9, #0
 80055b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055b8:	e7dc      	b.n	8005574 <_printf_float+0x15c>
 80055ba:	b913      	cbnz	r3, 80055c2 <_printf_float+0x1aa>
 80055bc:	6822      	ldr	r2, [r4, #0]
 80055be:	07d2      	lsls	r2, r2, #31
 80055c0:	d501      	bpl.n	80055c6 <_printf_float+0x1ae>
 80055c2:	3302      	adds	r3, #2
 80055c4:	e7f4      	b.n	80055b0 <_printf_float+0x198>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e7f2      	b.n	80055b0 <_printf_float+0x198>
 80055ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80055ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055d0:	4299      	cmp	r1, r3
 80055d2:	db05      	blt.n	80055e0 <_printf_float+0x1c8>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	6121      	str	r1, [r4, #16]
 80055d8:	07d8      	lsls	r0, r3, #31
 80055da:	d5ea      	bpl.n	80055b2 <_printf_float+0x19a>
 80055dc:	1c4b      	adds	r3, r1, #1
 80055de:	e7e7      	b.n	80055b0 <_printf_float+0x198>
 80055e0:	2900      	cmp	r1, #0
 80055e2:	bfcc      	ite	gt
 80055e4:	2201      	movgt	r2, #1
 80055e6:	f1c1 0202 	rsble	r2, r1, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	e7e0      	b.n	80055b0 <_printf_float+0x198>
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	055a      	lsls	r2, r3, #21
 80055f2:	d407      	bmi.n	8005604 <_printf_float+0x1ec>
 80055f4:	6923      	ldr	r3, [r4, #16]
 80055f6:	4642      	mov	r2, r8
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d12b      	bne.n	800565a <_printf_float+0x242>
 8005602:	e764      	b.n	80054ce <_printf_float+0xb6>
 8005604:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005608:	f240 80dc 	bls.w	80057c4 <_printf_float+0x3ac>
 800560c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	f7fb fa04 	bl	8000a20 <__aeabi_dcmpeq>
 8005618:	2800      	cmp	r0, #0
 800561a:	d033      	beq.n	8005684 <_printf_float+0x26c>
 800561c:	2301      	movs	r3, #1
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	4a35      	ldr	r2, [pc, #212]	@ (80056f8 <_printf_float+0x2e0>)
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f af51 	beq.w	80054ce <_printf_float+0xb6>
 800562c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005630:	4543      	cmp	r3, r8
 8005632:	db02      	blt.n	800563a <_printf_float+0x222>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	07d8      	lsls	r0, r3, #31
 8005638:	d50f      	bpl.n	800565a <_printf_float+0x242>
 800563a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800563e:	4631      	mov	r1, r6
 8005640:	4628      	mov	r0, r5
 8005642:	47b8      	blx	r7
 8005644:	3001      	adds	r0, #1
 8005646:	f43f af42 	beq.w	80054ce <_printf_float+0xb6>
 800564a:	f04f 0900 	mov.w	r9, #0
 800564e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005652:	f104 0a1a 	add.w	sl, r4, #26
 8005656:	45c8      	cmp	r8, r9
 8005658:	dc09      	bgt.n	800566e <_printf_float+0x256>
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	079b      	lsls	r3, r3, #30
 800565e:	f100 8102 	bmi.w	8005866 <_printf_float+0x44e>
 8005662:	68e0      	ldr	r0, [r4, #12]
 8005664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005666:	4298      	cmp	r0, r3
 8005668:	bfb8      	it	lt
 800566a:	4618      	movlt	r0, r3
 800566c:	e731      	b.n	80054d2 <_printf_float+0xba>
 800566e:	2301      	movs	r3, #1
 8005670:	4652      	mov	r2, sl
 8005672:	4631      	mov	r1, r6
 8005674:	4628      	mov	r0, r5
 8005676:	47b8      	blx	r7
 8005678:	3001      	adds	r0, #1
 800567a:	f43f af28 	beq.w	80054ce <_printf_float+0xb6>
 800567e:	f109 0901 	add.w	r9, r9, #1
 8005682:	e7e8      	b.n	8005656 <_printf_float+0x23e>
 8005684:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005686:	2b00      	cmp	r3, #0
 8005688:	dc38      	bgt.n	80056fc <_printf_float+0x2e4>
 800568a:	2301      	movs	r3, #1
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	4a19      	ldr	r2, [pc, #100]	@ (80056f8 <_printf_float+0x2e0>)
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f af1a 	beq.w	80054ce <_printf_float+0xb6>
 800569a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800569e:	ea59 0303 	orrs.w	r3, r9, r3
 80056a2:	d102      	bne.n	80056aa <_printf_float+0x292>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	07d9      	lsls	r1, r3, #31
 80056a8:	d5d7      	bpl.n	800565a <_printf_float+0x242>
 80056aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056ae:	4631      	mov	r1, r6
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b8      	blx	r7
 80056b4:	3001      	adds	r0, #1
 80056b6:	f43f af0a 	beq.w	80054ce <_printf_float+0xb6>
 80056ba:	f04f 0a00 	mov.w	sl, #0
 80056be:	f104 0b1a 	add.w	fp, r4, #26
 80056c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056c4:	425b      	negs	r3, r3
 80056c6:	4553      	cmp	r3, sl
 80056c8:	dc01      	bgt.n	80056ce <_printf_float+0x2b6>
 80056ca:	464b      	mov	r3, r9
 80056cc:	e793      	b.n	80055f6 <_printf_float+0x1de>
 80056ce:	2301      	movs	r3, #1
 80056d0:	465a      	mov	r2, fp
 80056d2:	4631      	mov	r1, r6
 80056d4:	4628      	mov	r0, r5
 80056d6:	47b8      	blx	r7
 80056d8:	3001      	adds	r0, #1
 80056da:	f43f aef8 	beq.w	80054ce <_printf_float+0xb6>
 80056de:	f10a 0a01 	add.w	sl, sl, #1
 80056e2:	e7ee      	b.n	80056c2 <_printf_float+0x2aa>
 80056e4:	7fefffff 	.word	0x7fefffff
 80056e8:	08007ff8 	.word	0x08007ff8
 80056ec:	08007ffc 	.word	0x08007ffc
 80056f0:	08008000 	.word	0x08008000
 80056f4:	08008004 	.word	0x08008004
 80056f8:	08008008 	.word	0x08008008
 80056fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005702:	4553      	cmp	r3, sl
 8005704:	bfa8      	it	ge
 8005706:	4653      	movge	r3, sl
 8005708:	2b00      	cmp	r3, #0
 800570a:	4699      	mov	r9, r3
 800570c:	dc36      	bgt.n	800577c <_printf_float+0x364>
 800570e:	f04f 0b00 	mov.w	fp, #0
 8005712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005716:	f104 021a 	add.w	r2, r4, #26
 800571a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800571c:	930a      	str	r3, [sp, #40]	@ 0x28
 800571e:	eba3 0309 	sub.w	r3, r3, r9
 8005722:	455b      	cmp	r3, fp
 8005724:	dc31      	bgt.n	800578a <_printf_float+0x372>
 8005726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005728:	459a      	cmp	sl, r3
 800572a:	dc3a      	bgt.n	80057a2 <_printf_float+0x38a>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	07da      	lsls	r2, r3, #31
 8005730:	d437      	bmi.n	80057a2 <_printf_float+0x38a>
 8005732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005734:	ebaa 0903 	sub.w	r9, sl, r3
 8005738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800573a:	ebaa 0303 	sub.w	r3, sl, r3
 800573e:	4599      	cmp	r9, r3
 8005740:	bfa8      	it	ge
 8005742:	4699      	movge	r9, r3
 8005744:	f1b9 0f00 	cmp.w	r9, #0
 8005748:	dc33      	bgt.n	80057b2 <_printf_float+0x39a>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005752:	f104 0b1a 	add.w	fp, r4, #26
 8005756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005758:	ebaa 0303 	sub.w	r3, sl, r3
 800575c:	eba3 0309 	sub.w	r3, r3, r9
 8005760:	4543      	cmp	r3, r8
 8005762:	f77f af7a 	ble.w	800565a <_printf_float+0x242>
 8005766:	2301      	movs	r3, #1
 8005768:	465a      	mov	r2, fp
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	f43f aeac 	beq.w	80054ce <_printf_float+0xb6>
 8005776:	f108 0801 	add.w	r8, r8, #1
 800577a:	e7ec      	b.n	8005756 <_printf_float+0x33e>
 800577c:	4642      	mov	r2, r8
 800577e:	4631      	mov	r1, r6
 8005780:	4628      	mov	r0, r5
 8005782:	47b8      	blx	r7
 8005784:	3001      	adds	r0, #1
 8005786:	d1c2      	bne.n	800570e <_printf_float+0x2f6>
 8005788:	e6a1      	b.n	80054ce <_printf_float+0xb6>
 800578a:	2301      	movs	r3, #1
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	920a      	str	r2, [sp, #40]	@ 0x28
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	f43f ae9a 	beq.w	80054ce <_printf_float+0xb6>
 800579a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800579c:	f10b 0b01 	add.w	fp, fp, #1
 80057a0:	e7bb      	b.n	800571a <_printf_float+0x302>
 80057a2:	4631      	mov	r1, r6
 80057a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	d1c0      	bne.n	8005732 <_printf_float+0x31a>
 80057b0:	e68d      	b.n	80054ce <_printf_float+0xb6>
 80057b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80057b4:	464b      	mov	r3, r9
 80057b6:	4631      	mov	r1, r6
 80057b8:	4628      	mov	r0, r5
 80057ba:	4442      	add	r2, r8
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d1c3      	bne.n	800574a <_printf_float+0x332>
 80057c2:	e684      	b.n	80054ce <_printf_float+0xb6>
 80057c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057c8:	f1ba 0f01 	cmp.w	sl, #1
 80057cc:	dc01      	bgt.n	80057d2 <_printf_float+0x3ba>
 80057ce:	07db      	lsls	r3, r3, #31
 80057d0:	d536      	bpl.n	8005840 <_printf_float+0x428>
 80057d2:	2301      	movs	r3, #1
 80057d4:	4642      	mov	r2, r8
 80057d6:	4631      	mov	r1, r6
 80057d8:	4628      	mov	r0, r5
 80057da:	47b8      	blx	r7
 80057dc:	3001      	adds	r0, #1
 80057de:	f43f ae76 	beq.w	80054ce <_printf_float+0xb6>
 80057e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f ae6e 	beq.w	80054ce <_printf_float+0xb6>
 80057f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057f6:	2200      	movs	r2, #0
 80057f8:	2300      	movs	r3, #0
 80057fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057fe:	f7fb f90f 	bl	8000a20 <__aeabi_dcmpeq>
 8005802:	b9c0      	cbnz	r0, 8005836 <_printf_float+0x41e>
 8005804:	4653      	mov	r3, sl
 8005806:	f108 0201 	add.w	r2, r8, #1
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	d10c      	bne.n	800582e <_printf_float+0x416>
 8005814:	e65b      	b.n	80054ce <_printf_float+0xb6>
 8005816:	2301      	movs	r3, #1
 8005818:	465a      	mov	r2, fp
 800581a:	4631      	mov	r1, r6
 800581c:	4628      	mov	r0, r5
 800581e:	47b8      	blx	r7
 8005820:	3001      	adds	r0, #1
 8005822:	f43f ae54 	beq.w	80054ce <_printf_float+0xb6>
 8005826:	f108 0801 	add.w	r8, r8, #1
 800582a:	45d0      	cmp	r8, sl
 800582c:	dbf3      	blt.n	8005816 <_printf_float+0x3fe>
 800582e:	464b      	mov	r3, r9
 8005830:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005834:	e6e0      	b.n	80055f8 <_printf_float+0x1e0>
 8005836:	f04f 0800 	mov.w	r8, #0
 800583a:	f104 0b1a 	add.w	fp, r4, #26
 800583e:	e7f4      	b.n	800582a <_printf_float+0x412>
 8005840:	2301      	movs	r3, #1
 8005842:	4642      	mov	r2, r8
 8005844:	e7e1      	b.n	800580a <_printf_float+0x3f2>
 8005846:	2301      	movs	r3, #1
 8005848:	464a      	mov	r2, r9
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	f43f ae3c 	beq.w	80054ce <_printf_float+0xb6>
 8005856:	f108 0801 	add.w	r8, r8, #1
 800585a:	68e3      	ldr	r3, [r4, #12]
 800585c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800585e:	1a5b      	subs	r3, r3, r1
 8005860:	4543      	cmp	r3, r8
 8005862:	dcf0      	bgt.n	8005846 <_printf_float+0x42e>
 8005864:	e6fd      	b.n	8005662 <_printf_float+0x24a>
 8005866:	f04f 0800 	mov.w	r8, #0
 800586a:	f104 0919 	add.w	r9, r4, #25
 800586e:	e7f4      	b.n	800585a <_printf_float+0x442>

08005870 <_printf_common>:
 8005870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005874:	4616      	mov	r6, r2
 8005876:	4698      	mov	r8, r3
 8005878:	688a      	ldr	r2, [r1, #8]
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	4607      	mov	r7, r0
 800587e:	4293      	cmp	r3, r2
 8005880:	bfb8      	it	lt
 8005882:	4613      	movlt	r3, r2
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800588a:	460c      	mov	r4, r1
 800588c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005890:	b10a      	cbz	r2, 8005896 <_printf_common+0x26>
 8005892:	3301      	adds	r3, #1
 8005894:	6033      	str	r3, [r6, #0]
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	0699      	lsls	r1, r3, #26
 800589a:	bf42      	ittt	mi
 800589c:	6833      	ldrmi	r3, [r6, #0]
 800589e:	3302      	addmi	r3, #2
 80058a0:	6033      	strmi	r3, [r6, #0]
 80058a2:	6825      	ldr	r5, [r4, #0]
 80058a4:	f015 0506 	ands.w	r5, r5, #6
 80058a8:	d106      	bne.n	80058b8 <_printf_common+0x48>
 80058aa:	f104 0a19 	add.w	sl, r4, #25
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	6832      	ldr	r2, [r6, #0]
 80058b2:	1a9b      	subs	r3, r3, r2
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	dc2b      	bgt.n	8005910 <_printf_common+0xa0>
 80058b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058bc:	6822      	ldr	r2, [r4, #0]
 80058be:	3b00      	subs	r3, #0
 80058c0:	bf18      	it	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	0692      	lsls	r2, r2, #26
 80058c6:	d430      	bmi.n	800592a <_printf_common+0xba>
 80058c8:	4641      	mov	r1, r8
 80058ca:	4638      	mov	r0, r7
 80058cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058d0:	47c8      	blx	r9
 80058d2:	3001      	adds	r0, #1
 80058d4:	d023      	beq.n	800591e <_printf_common+0xae>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	2b04      	cmp	r3, #4
 80058e0:	bf14      	ite	ne
 80058e2:	2500      	movne	r5, #0
 80058e4:	6833      	ldreq	r3, [r6, #0]
 80058e6:	f04f 0600 	mov.w	r6, #0
 80058ea:	bf08      	it	eq
 80058ec:	68e5      	ldreq	r5, [r4, #12]
 80058ee:	f104 041a 	add.w	r4, r4, #26
 80058f2:	bf08      	it	eq
 80058f4:	1aed      	subeq	r5, r5, r3
 80058f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80058fa:	bf08      	it	eq
 80058fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005900:	4293      	cmp	r3, r2
 8005902:	bfc4      	itt	gt
 8005904:	1a9b      	subgt	r3, r3, r2
 8005906:	18ed      	addgt	r5, r5, r3
 8005908:	42b5      	cmp	r5, r6
 800590a:	d11a      	bne.n	8005942 <_printf_common+0xd2>
 800590c:	2000      	movs	r0, #0
 800590e:	e008      	b.n	8005922 <_printf_common+0xb2>
 8005910:	2301      	movs	r3, #1
 8005912:	4652      	mov	r2, sl
 8005914:	4641      	mov	r1, r8
 8005916:	4638      	mov	r0, r7
 8005918:	47c8      	blx	r9
 800591a:	3001      	adds	r0, #1
 800591c:	d103      	bne.n	8005926 <_printf_common+0xb6>
 800591e:	f04f 30ff 	mov.w	r0, #4294967295
 8005922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005926:	3501      	adds	r5, #1
 8005928:	e7c1      	b.n	80058ae <_printf_common+0x3e>
 800592a:	2030      	movs	r0, #48	@ 0x30
 800592c:	18e1      	adds	r1, r4, r3
 800592e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005938:	4422      	add	r2, r4
 800593a:	3302      	adds	r3, #2
 800593c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005940:	e7c2      	b.n	80058c8 <_printf_common+0x58>
 8005942:	2301      	movs	r3, #1
 8005944:	4622      	mov	r2, r4
 8005946:	4641      	mov	r1, r8
 8005948:	4638      	mov	r0, r7
 800594a:	47c8      	blx	r9
 800594c:	3001      	adds	r0, #1
 800594e:	d0e6      	beq.n	800591e <_printf_common+0xae>
 8005950:	3601      	adds	r6, #1
 8005952:	e7d9      	b.n	8005908 <_printf_common+0x98>

08005954 <_printf_i>:
 8005954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	7e0f      	ldrb	r7, [r1, #24]
 800595a:	4691      	mov	r9, r2
 800595c:	2f78      	cmp	r7, #120	@ 0x78
 800595e:	4680      	mov	r8, r0
 8005960:	460c      	mov	r4, r1
 8005962:	469a      	mov	sl, r3
 8005964:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005966:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800596a:	d807      	bhi.n	800597c <_printf_i+0x28>
 800596c:	2f62      	cmp	r7, #98	@ 0x62
 800596e:	d80a      	bhi.n	8005986 <_printf_i+0x32>
 8005970:	2f00      	cmp	r7, #0
 8005972:	f000 80d3 	beq.w	8005b1c <_printf_i+0x1c8>
 8005976:	2f58      	cmp	r7, #88	@ 0x58
 8005978:	f000 80ba 	beq.w	8005af0 <_printf_i+0x19c>
 800597c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005980:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005984:	e03a      	b.n	80059fc <_printf_i+0xa8>
 8005986:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800598a:	2b15      	cmp	r3, #21
 800598c:	d8f6      	bhi.n	800597c <_printf_i+0x28>
 800598e:	a101      	add	r1, pc, #4	@ (adr r1, 8005994 <_printf_i+0x40>)
 8005990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005994:	080059ed 	.word	0x080059ed
 8005998:	08005a01 	.word	0x08005a01
 800599c:	0800597d 	.word	0x0800597d
 80059a0:	0800597d 	.word	0x0800597d
 80059a4:	0800597d 	.word	0x0800597d
 80059a8:	0800597d 	.word	0x0800597d
 80059ac:	08005a01 	.word	0x08005a01
 80059b0:	0800597d 	.word	0x0800597d
 80059b4:	0800597d 	.word	0x0800597d
 80059b8:	0800597d 	.word	0x0800597d
 80059bc:	0800597d 	.word	0x0800597d
 80059c0:	08005b03 	.word	0x08005b03
 80059c4:	08005a2b 	.word	0x08005a2b
 80059c8:	08005abd 	.word	0x08005abd
 80059cc:	0800597d 	.word	0x0800597d
 80059d0:	0800597d 	.word	0x0800597d
 80059d4:	08005b25 	.word	0x08005b25
 80059d8:	0800597d 	.word	0x0800597d
 80059dc:	08005a2b 	.word	0x08005a2b
 80059e0:	0800597d 	.word	0x0800597d
 80059e4:	0800597d 	.word	0x0800597d
 80059e8:	08005ac5 	.word	0x08005ac5
 80059ec:	6833      	ldr	r3, [r6, #0]
 80059ee:	1d1a      	adds	r2, r3, #4
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6032      	str	r2, [r6, #0]
 80059f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059fc:	2301      	movs	r3, #1
 80059fe:	e09e      	b.n	8005b3e <_printf_i+0x1ea>
 8005a00:	6833      	ldr	r3, [r6, #0]
 8005a02:	6820      	ldr	r0, [r4, #0]
 8005a04:	1d19      	adds	r1, r3, #4
 8005a06:	6031      	str	r1, [r6, #0]
 8005a08:	0606      	lsls	r6, r0, #24
 8005a0a:	d501      	bpl.n	8005a10 <_printf_i+0xbc>
 8005a0c:	681d      	ldr	r5, [r3, #0]
 8005a0e:	e003      	b.n	8005a18 <_printf_i+0xc4>
 8005a10:	0645      	lsls	r5, r0, #25
 8005a12:	d5fb      	bpl.n	8005a0c <_printf_i+0xb8>
 8005a14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a18:	2d00      	cmp	r5, #0
 8005a1a:	da03      	bge.n	8005a24 <_printf_i+0xd0>
 8005a1c:	232d      	movs	r3, #45	@ 0x2d
 8005a1e:	426d      	negs	r5, r5
 8005a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a24:	230a      	movs	r3, #10
 8005a26:	4859      	ldr	r0, [pc, #356]	@ (8005b8c <_printf_i+0x238>)
 8005a28:	e011      	b.n	8005a4e <_printf_i+0xfa>
 8005a2a:	6821      	ldr	r1, [r4, #0]
 8005a2c:	6833      	ldr	r3, [r6, #0]
 8005a2e:	0608      	lsls	r0, r1, #24
 8005a30:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a34:	d402      	bmi.n	8005a3c <_printf_i+0xe8>
 8005a36:	0649      	lsls	r1, r1, #25
 8005a38:	bf48      	it	mi
 8005a3a:	b2ad      	uxthmi	r5, r5
 8005a3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a3e:	6033      	str	r3, [r6, #0]
 8005a40:	bf14      	ite	ne
 8005a42:	230a      	movne	r3, #10
 8005a44:	2308      	moveq	r3, #8
 8005a46:	4851      	ldr	r0, [pc, #324]	@ (8005b8c <_printf_i+0x238>)
 8005a48:	2100      	movs	r1, #0
 8005a4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a4e:	6866      	ldr	r6, [r4, #4]
 8005a50:	2e00      	cmp	r6, #0
 8005a52:	bfa8      	it	ge
 8005a54:	6821      	ldrge	r1, [r4, #0]
 8005a56:	60a6      	str	r6, [r4, #8]
 8005a58:	bfa4      	itt	ge
 8005a5a:	f021 0104 	bicge.w	r1, r1, #4
 8005a5e:	6021      	strge	r1, [r4, #0]
 8005a60:	b90d      	cbnz	r5, 8005a66 <_printf_i+0x112>
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	d04b      	beq.n	8005afe <_printf_i+0x1aa>
 8005a66:	4616      	mov	r6, r2
 8005a68:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a6c:	fb03 5711 	mls	r7, r3, r1, r5
 8005a70:	5dc7      	ldrb	r7, [r0, r7]
 8005a72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a76:	462f      	mov	r7, r5
 8005a78:	42bb      	cmp	r3, r7
 8005a7a:	460d      	mov	r5, r1
 8005a7c:	d9f4      	bls.n	8005a68 <_printf_i+0x114>
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d10b      	bne.n	8005a9a <_printf_i+0x146>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	07df      	lsls	r7, r3, #31
 8005a86:	d508      	bpl.n	8005a9a <_printf_i+0x146>
 8005a88:	6923      	ldr	r3, [r4, #16]
 8005a8a:	6861      	ldr	r1, [r4, #4]
 8005a8c:	4299      	cmp	r1, r3
 8005a8e:	bfde      	ittt	le
 8005a90:	2330      	movle	r3, #48	@ 0x30
 8005a92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a9a:	1b92      	subs	r2, r2, r6
 8005a9c:	6122      	str	r2, [r4, #16]
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4640      	mov	r0, r8
 8005aa4:	f8cd a000 	str.w	sl, [sp]
 8005aa8:	aa03      	add	r2, sp, #12
 8005aaa:	f7ff fee1 	bl	8005870 <_printf_common>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d14a      	bne.n	8005b48 <_printf_i+0x1f4>
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	b004      	add	sp, #16
 8005ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	f043 0320 	orr.w	r3, r3, #32
 8005ac2:	6023      	str	r3, [r4, #0]
 8005ac4:	2778      	movs	r7, #120	@ 0x78
 8005ac6:	4832      	ldr	r0, [pc, #200]	@ (8005b90 <_printf_i+0x23c>)
 8005ac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	6831      	ldr	r1, [r6, #0]
 8005ad0:	061f      	lsls	r7, r3, #24
 8005ad2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ad6:	d402      	bmi.n	8005ade <_printf_i+0x18a>
 8005ad8:	065f      	lsls	r7, r3, #25
 8005ada:	bf48      	it	mi
 8005adc:	b2ad      	uxthmi	r5, r5
 8005ade:	6031      	str	r1, [r6, #0]
 8005ae0:	07d9      	lsls	r1, r3, #31
 8005ae2:	bf44      	itt	mi
 8005ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ae8:	6023      	strmi	r3, [r4, #0]
 8005aea:	b11d      	cbz	r5, 8005af4 <_printf_i+0x1a0>
 8005aec:	2310      	movs	r3, #16
 8005aee:	e7ab      	b.n	8005a48 <_printf_i+0xf4>
 8005af0:	4826      	ldr	r0, [pc, #152]	@ (8005b8c <_printf_i+0x238>)
 8005af2:	e7e9      	b.n	8005ac8 <_printf_i+0x174>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	f023 0320 	bic.w	r3, r3, #32
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	e7f6      	b.n	8005aec <_printf_i+0x198>
 8005afe:	4616      	mov	r6, r2
 8005b00:	e7bd      	b.n	8005a7e <_printf_i+0x12a>
 8005b02:	6833      	ldr	r3, [r6, #0]
 8005b04:	6825      	ldr	r5, [r4, #0]
 8005b06:	1d18      	adds	r0, r3, #4
 8005b08:	6961      	ldr	r1, [r4, #20]
 8005b0a:	6030      	str	r0, [r6, #0]
 8005b0c:	062e      	lsls	r6, r5, #24
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	d501      	bpl.n	8005b16 <_printf_i+0x1c2>
 8005b12:	6019      	str	r1, [r3, #0]
 8005b14:	e002      	b.n	8005b1c <_printf_i+0x1c8>
 8005b16:	0668      	lsls	r0, r5, #25
 8005b18:	d5fb      	bpl.n	8005b12 <_printf_i+0x1be>
 8005b1a:	8019      	strh	r1, [r3, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4616      	mov	r6, r2
 8005b20:	6123      	str	r3, [r4, #16]
 8005b22:	e7bc      	b.n	8005a9e <_printf_i+0x14a>
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	2100      	movs	r1, #0
 8005b28:	1d1a      	adds	r2, r3, #4
 8005b2a:	6032      	str	r2, [r6, #0]
 8005b2c:	681e      	ldr	r6, [r3, #0]
 8005b2e:	6862      	ldr	r2, [r4, #4]
 8005b30:	4630      	mov	r0, r6
 8005b32:	f000 fab8 	bl	80060a6 <memchr>
 8005b36:	b108      	cbz	r0, 8005b3c <_printf_i+0x1e8>
 8005b38:	1b80      	subs	r0, r0, r6
 8005b3a:	6060      	str	r0, [r4, #4]
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	6123      	str	r3, [r4, #16]
 8005b40:	2300      	movs	r3, #0
 8005b42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b46:	e7aa      	b.n	8005a9e <_printf_i+0x14a>
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	47d0      	blx	sl
 8005b52:	3001      	adds	r0, #1
 8005b54:	d0ad      	beq.n	8005ab2 <_printf_i+0x15e>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	079b      	lsls	r3, r3, #30
 8005b5a:	d413      	bmi.n	8005b84 <_printf_i+0x230>
 8005b5c:	68e0      	ldr	r0, [r4, #12]
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	4298      	cmp	r0, r3
 8005b62:	bfb8      	it	lt
 8005b64:	4618      	movlt	r0, r3
 8005b66:	e7a6      	b.n	8005ab6 <_printf_i+0x162>
 8005b68:	2301      	movs	r3, #1
 8005b6a:	4632      	mov	r2, r6
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	4640      	mov	r0, r8
 8005b70:	47d0      	blx	sl
 8005b72:	3001      	adds	r0, #1
 8005b74:	d09d      	beq.n	8005ab2 <_printf_i+0x15e>
 8005b76:	3501      	adds	r5, #1
 8005b78:	68e3      	ldr	r3, [r4, #12]
 8005b7a:	9903      	ldr	r1, [sp, #12]
 8005b7c:	1a5b      	subs	r3, r3, r1
 8005b7e:	42ab      	cmp	r3, r5
 8005b80:	dcf2      	bgt.n	8005b68 <_printf_i+0x214>
 8005b82:	e7eb      	b.n	8005b5c <_printf_i+0x208>
 8005b84:	2500      	movs	r5, #0
 8005b86:	f104 0619 	add.w	r6, r4, #25
 8005b8a:	e7f5      	b.n	8005b78 <_printf_i+0x224>
 8005b8c:	0800800a 	.word	0x0800800a
 8005b90:	0800801b 	.word	0x0800801b

08005b94 <std>:
 8005b94:	2300      	movs	r3, #0
 8005b96:	b510      	push	{r4, lr}
 8005b98:	4604      	mov	r4, r0
 8005b9a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ba2:	6083      	str	r3, [r0, #8]
 8005ba4:	8181      	strh	r1, [r0, #12]
 8005ba6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ba8:	81c2      	strh	r2, [r0, #14]
 8005baa:	6183      	str	r3, [r0, #24]
 8005bac:	4619      	mov	r1, r3
 8005bae:	2208      	movs	r2, #8
 8005bb0:	305c      	adds	r0, #92	@ 0x5c
 8005bb2:	f000 f9f9 	bl	8005fa8 <memset>
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <std+0x58>)
 8005bb8:	6224      	str	r4, [r4, #32]
 8005bba:	6263      	str	r3, [r4, #36]	@ 0x24
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf0 <std+0x5c>)
 8005bbe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf4 <std+0x60>)
 8005bc2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bf8 <std+0x64>)
 8005bc6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8005bfc <std+0x68>)
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	d006      	beq.n	8005bdc <std+0x48>
 8005bce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bd2:	4294      	cmp	r4, r2
 8005bd4:	d002      	beq.n	8005bdc <std+0x48>
 8005bd6:	33d0      	adds	r3, #208	@ 0xd0
 8005bd8:	429c      	cmp	r4, r3
 8005bda:	d105      	bne.n	8005be8 <std+0x54>
 8005bdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005be4:	f000 ba5c 	b.w	80060a0 <__retarget_lock_init_recursive>
 8005be8:	bd10      	pop	{r4, pc}
 8005bea:	bf00      	nop
 8005bec:	08005df9 	.word	0x08005df9
 8005bf0:	08005e1b 	.word	0x08005e1b
 8005bf4:	08005e53 	.word	0x08005e53
 8005bf8:	08005e77 	.word	0x08005e77
 8005bfc:	20000494 	.word	0x20000494

08005c00 <stdio_exit_handler>:
 8005c00:	4a02      	ldr	r2, [pc, #8]	@ (8005c0c <stdio_exit_handler+0xc>)
 8005c02:	4903      	ldr	r1, [pc, #12]	@ (8005c10 <stdio_exit_handler+0x10>)
 8005c04:	4803      	ldr	r0, [pc, #12]	@ (8005c14 <stdio_exit_handler+0x14>)
 8005c06:	f000 b869 	b.w	8005cdc <_fwalk_sglue>
 8005c0a:	bf00      	nop
 8005c0c:	2000000c 	.word	0x2000000c
 8005c10:	080079e5 	.word	0x080079e5
 8005c14:	2000001c 	.word	0x2000001c

08005c18 <cleanup_stdio>:
 8005c18:	6841      	ldr	r1, [r0, #4]
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c4c <cleanup_stdio+0x34>)
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	4299      	cmp	r1, r3
 8005c20:	4604      	mov	r4, r0
 8005c22:	d001      	beq.n	8005c28 <cleanup_stdio+0x10>
 8005c24:	f001 fede 	bl	80079e4 <_fflush_r>
 8005c28:	68a1      	ldr	r1, [r4, #8]
 8005c2a:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <cleanup_stdio+0x38>)
 8005c2c:	4299      	cmp	r1, r3
 8005c2e:	d002      	beq.n	8005c36 <cleanup_stdio+0x1e>
 8005c30:	4620      	mov	r0, r4
 8005c32:	f001 fed7 	bl	80079e4 <_fflush_r>
 8005c36:	68e1      	ldr	r1, [r4, #12]
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <cleanup_stdio+0x3c>)
 8005c3a:	4299      	cmp	r1, r3
 8005c3c:	d004      	beq.n	8005c48 <cleanup_stdio+0x30>
 8005c3e:	4620      	mov	r0, r4
 8005c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c44:	f001 bece 	b.w	80079e4 <_fflush_r>
 8005c48:	bd10      	pop	{r4, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000494 	.word	0x20000494
 8005c50:	200004fc 	.word	0x200004fc
 8005c54:	20000564 	.word	0x20000564

08005c58 <global_stdio_init.part.0>:
 8005c58:	b510      	push	{r4, lr}
 8005c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c88 <global_stdio_init.part.0+0x30>)
 8005c5c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c8c <global_stdio_init.part.0+0x34>)
 8005c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c90 <global_stdio_init.part.0+0x38>)
 8005c60:	4620      	mov	r0, r4
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	2104      	movs	r1, #4
 8005c66:	2200      	movs	r2, #0
 8005c68:	f7ff ff94 	bl	8005b94 <std>
 8005c6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c70:	2201      	movs	r2, #1
 8005c72:	2109      	movs	r1, #9
 8005c74:	f7ff ff8e 	bl	8005b94 <std>
 8005c78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c82:	2112      	movs	r1, #18
 8005c84:	f7ff bf86 	b.w	8005b94 <std>
 8005c88:	200005cc 	.word	0x200005cc
 8005c8c:	20000494 	.word	0x20000494
 8005c90:	08005c01 	.word	0x08005c01

08005c94 <__sfp_lock_acquire>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__sfp_lock_acquire+0x8>)
 8005c96:	f000 ba04 	b.w	80060a2 <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	200005d5 	.word	0x200005d5

08005ca0 <__sfp_lock_release>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	@ (8005ca8 <__sfp_lock_release+0x8>)
 8005ca2:	f000 b9ff 	b.w	80060a4 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	200005d5 	.word	0x200005d5

08005cac <__sinit>:
 8005cac:	b510      	push	{r4, lr}
 8005cae:	4604      	mov	r4, r0
 8005cb0:	f7ff fff0 	bl	8005c94 <__sfp_lock_acquire>
 8005cb4:	6a23      	ldr	r3, [r4, #32]
 8005cb6:	b11b      	cbz	r3, 8005cc0 <__sinit+0x14>
 8005cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cbc:	f7ff bff0 	b.w	8005ca0 <__sfp_lock_release>
 8005cc0:	4b04      	ldr	r3, [pc, #16]	@ (8005cd4 <__sinit+0x28>)
 8005cc2:	6223      	str	r3, [r4, #32]
 8005cc4:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <__sinit+0x2c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f5      	bne.n	8005cb8 <__sinit+0xc>
 8005ccc:	f7ff ffc4 	bl	8005c58 <global_stdio_init.part.0>
 8005cd0:	e7f2      	b.n	8005cb8 <__sinit+0xc>
 8005cd2:	bf00      	nop
 8005cd4:	08005c19 	.word	0x08005c19
 8005cd8:	200005cc 	.word	0x200005cc

08005cdc <_fwalk_sglue>:
 8005cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce0:	4607      	mov	r7, r0
 8005ce2:	4688      	mov	r8, r1
 8005ce4:	4614      	mov	r4, r2
 8005ce6:	2600      	movs	r6, #0
 8005ce8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cec:	f1b9 0901 	subs.w	r9, r9, #1
 8005cf0:	d505      	bpl.n	8005cfe <_fwalk_sglue+0x22>
 8005cf2:	6824      	ldr	r4, [r4, #0]
 8005cf4:	2c00      	cmp	r4, #0
 8005cf6:	d1f7      	bne.n	8005ce8 <_fwalk_sglue+0xc>
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cfe:	89ab      	ldrh	r3, [r5, #12]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d907      	bls.n	8005d14 <_fwalk_sglue+0x38>
 8005d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	d003      	beq.n	8005d14 <_fwalk_sglue+0x38>
 8005d0c:	4629      	mov	r1, r5
 8005d0e:	4638      	mov	r0, r7
 8005d10:	47c0      	blx	r8
 8005d12:	4306      	orrs	r6, r0
 8005d14:	3568      	adds	r5, #104	@ 0x68
 8005d16:	e7e9      	b.n	8005cec <_fwalk_sglue+0x10>

08005d18 <iprintf>:
 8005d18:	b40f      	push	{r0, r1, r2, r3}
 8005d1a:	b507      	push	{r0, r1, r2, lr}
 8005d1c:	4906      	ldr	r1, [pc, #24]	@ (8005d38 <iprintf+0x20>)
 8005d1e:	ab04      	add	r3, sp, #16
 8005d20:	6808      	ldr	r0, [r1, #0]
 8005d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d26:	6881      	ldr	r1, [r0, #8]
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	f001 fcc3 	bl	80076b4 <_vfiprintf_r>
 8005d2e:	b003      	add	sp, #12
 8005d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d34:	b004      	add	sp, #16
 8005d36:	4770      	bx	lr
 8005d38:	20000018 	.word	0x20000018

08005d3c <_puts_r>:
 8005d3c:	6a03      	ldr	r3, [r0, #32]
 8005d3e:	b570      	push	{r4, r5, r6, lr}
 8005d40:	4605      	mov	r5, r0
 8005d42:	460e      	mov	r6, r1
 8005d44:	6884      	ldr	r4, [r0, #8]
 8005d46:	b90b      	cbnz	r3, 8005d4c <_puts_r+0x10>
 8005d48:	f7ff ffb0 	bl	8005cac <__sinit>
 8005d4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d4e:	07db      	lsls	r3, r3, #31
 8005d50:	d405      	bmi.n	8005d5e <_puts_r+0x22>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	0598      	lsls	r0, r3, #22
 8005d56:	d402      	bmi.n	8005d5e <_puts_r+0x22>
 8005d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d5a:	f000 f9a2 	bl	80060a2 <__retarget_lock_acquire_recursive>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	0719      	lsls	r1, r3, #28
 8005d62:	d502      	bpl.n	8005d6a <_puts_r+0x2e>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d135      	bne.n	8005dd6 <_puts_r+0x9a>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f000 f8c5 	bl	8005efc <__swsetup_r>
 8005d72:	b380      	cbz	r0, 8005dd6 <_puts_r+0x9a>
 8005d74:	f04f 35ff 	mov.w	r5, #4294967295
 8005d78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d7a:	07da      	lsls	r2, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_puts_r+0x4e>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	059b      	lsls	r3, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_puts_r+0x4e>
 8005d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d86:	f000 f98d 	bl	80060a4 <__retarget_lock_release_recursive>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da04      	bge.n	8005d9c <_puts_r+0x60>
 8005d92:	69a2      	ldr	r2, [r4, #24]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	dc17      	bgt.n	8005dc8 <_puts_r+0x8c>
 8005d98:	290a      	cmp	r1, #10
 8005d9a:	d015      	beq.n	8005dc8 <_puts_r+0x8c>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	6022      	str	r2, [r4, #0]
 8005da2:	7019      	strb	r1, [r3, #0]
 8005da4:	68a3      	ldr	r3, [r4, #8]
 8005da6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	2900      	cmp	r1, #0
 8005db0:	d1ed      	bne.n	8005d8e <_puts_r+0x52>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da11      	bge.n	8005dda <_puts_r+0x9e>
 8005db6:	4622      	mov	r2, r4
 8005db8:	210a      	movs	r1, #10
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 f85f 	bl	8005e7e <__swbuf_r>
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d0d7      	beq.n	8005d74 <_puts_r+0x38>
 8005dc4:	250a      	movs	r5, #10
 8005dc6:	e7d7      	b.n	8005d78 <_puts_r+0x3c>
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f857 	bl	8005e7e <__swbuf_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d1e7      	bne.n	8005da4 <_puts_r+0x68>
 8005dd4:	e7ce      	b.n	8005d74 <_puts_r+0x38>
 8005dd6:	3e01      	subs	r6, #1
 8005dd8:	e7e4      	b.n	8005da4 <_puts_r+0x68>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	6022      	str	r2, [r4, #0]
 8005de0:	220a      	movs	r2, #10
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e7ee      	b.n	8005dc4 <_puts_r+0x88>
	...

08005de8 <puts>:
 8005de8:	4b02      	ldr	r3, [pc, #8]	@ (8005df4 <puts+0xc>)
 8005dea:	4601      	mov	r1, r0
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f7ff bfa5 	b.w	8005d3c <_puts_r>
 8005df2:	bf00      	nop
 8005df4:	20000018 	.word	0x20000018

08005df8 <__sread>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e00:	f000 f900 	bl	8006004 <_read_r>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	bfab      	itete	ge
 8005e08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e0c:	181b      	addge	r3, r3, r0
 8005e0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e12:	bfac      	ite	ge
 8005e14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e16:	81a3      	strhlt	r3, [r4, #12]
 8005e18:	bd10      	pop	{r4, pc}

08005e1a <__swrite>:
 8005e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1e:	461f      	mov	r7, r3
 8005e20:	898b      	ldrh	r3, [r1, #12]
 8005e22:	4605      	mov	r5, r0
 8005e24:	05db      	lsls	r3, r3, #23
 8005e26:	460c      	mov	r4, r1
 8005e28:	4616      	mov	r6, r2
 8005e2a:	d505      	bpl.n	8005e38 <__swrite+0x1e>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e34:	f000 f8d4 	bl	8005fe0 <_lseek_r>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	4632      	mov	r2, r6
 8005e3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	4628      	mov	r0, r5
 8005e44:	463b      	mov	r3, r7
 8005e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4e:	f000 b8eb 	b.w	8006028 <_write_r>

08005e52 <__sseek>:
 8005e52:	b510      	push	{r4, lr}
 8005e54:	460c      	mov	r4, r1
 8005e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e5a:	f000 f8c1 	bl	8005fe0 <_lseek_r>
 8005e5e:	1c43      	adds	r3, r0, #1
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	bf15      	itete	ne
 8005e64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e6e:	81a3      	strheq	r3, [r4, #12]
 8005e70:	bf18      	it	ne
 8005e72:	81a3      	strhne	r3, [r4, #12]
 8005e74:	bd10      	pop	{r4, pc}

08005e76 <__sclose>:
 8005e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7a:	f000 b8a1 	b.w	8005fc0 <_close_r>

08005e7e <__swbuf_r>:
 8005e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e80:	460e      	mov	r6, r1
 8005e82:	4614      	mov	r4, r2
 8005e84:	4605      	mov	r5, r0
 8005e86:	b118      	cbz	r0, 8005e90 <__swbuf_r+0x12>
 8005e88:	6a03      	ldr	r3, [r0, #32]
 8005e8a:	b90b      	cbnz	r3, 8005e90 <__swbuf_r+0x12>
 8005e8c:	f7ff ff0e 	bl	8005cac <__sinit>
 8005e90:	69a3      	ldr	r3, [r4, #24]
 8005e92:	60a3      	str	r3, [r4, #8]
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	071a      	lsls	r2, r3, #28
 8005e98:	d501      	bpl.n	8005e9e <__swbuf_r+0x20>
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	b943      	cbnz	r3, 8005eb0 <__swbuf_r+0x32>
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 f82b 	bl	8005efc <__swsetup_r>
 8005ea6:	b118      	cbz	r0, 8005eb0 <__swbuf_r+0x32>
 8005ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8005eac:	4638      	mov	r0, r7
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	6922      	ldr	r2, [r4, #16]
 8005eb4:	b2f6      	uxtb	r6, r6
 8005eb6:	1a98      	subs	r0, r3, r2
 8005eb8:	6963      	ldr	r3, [r4, #20]
 8005eba:	4637      	mov	r7, r6
 8005ebc:	4283      	cmp	r3, r0
 8005ebe:	dc05      	bgt.n	8005ecc <__swbuf_r+0x4e>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f001 fd8e 	bl	80079e4 <_fflush_r>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d1ed      	bne.n	8005ea8 <__swbuf_r+0x2a>
 8005ecc:	68a3      	ldr	r3, [r4, #8]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	60a3      	str	r3, [r4, #8]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	701e      	strb	r6, [r3, #0]
 8005eda:	6962      	ldr	r2, [r4, #20]
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d004      	beq.n	8005eec <__swbuf_r+0x6e>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	07db      	lsls	r3, r3, #31
 8005ee6:	d5e1      	bpl.n	8005eac <__swbuf_r+0x2e>
 8005ee8:	2e0a      	cmp	r6, #10
 8005eea:	d1df      	bne.n	8005eac <__swbuf_r+0x2e>
 8005eec:	4621      	mov	r1, r4
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f001 fd78 	bl	80079e4 <_fflush_r>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0d9      	beq.n	8005eac <__swbuf_r+0x2e>
 8005ef8:	e7d6      	b.n	8005ea8 <__swbuf_r+0x2a>
	...

08005efc <__swsetup_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4b29      	ldr	r3, [pc, #164]	@ (8005fa4 <__swsetup_r+0xa8>)
 8005f00:	4605      	mov	r5, r0
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	460c      	mov	r4, r1
 8005f06:	b118      	cbz	r0, 8005f10 <__swsetup_r+0x14>
 8005f08:	6a03      	ldr	r3, [r0, #32]
 8005f0a:	b90b      	cbnz	r3, 8005f10 <__swsetup_r+0x14>
 8005f0c:	f7ff fece 	bl	8005cac <__sinit>
 8005f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f14:	0719      	lsls	r1, r3, #28
 8005f16:	d422      	bmi.n	8005f5e <__swsetup_r+0x62>
 8005f18:	06da      	lsls	r2, r3, #27
 8005f1a:	d407      	bmi.n	8005f2c <__swsetup_r+0x30>
 8005f1c:	2209      	movs	r2, #9
 8005f1e:	602a      	str	r2, [r5, #0]
 8005f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295
 8005f28:	81a3      	strh	r3, [r4, #12]
 8005f2a:	e033      	b.n	8005f94 <__swsetup_r+0x98>
 8005f2c:	0758      	lsls	r0, r3, #29
 8005f2e:	d512      	bpl.n	8005f56 <__swsetup_r+0x5a>
 8005f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f32:	b141      	cbz	r1, 8005f46 <__swsetup_r+0x4a>
 8005f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d002      	beq.n	8005f42 <__swsetup_r+0x46>
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 ff13 	bl	8006d68 <_free_r>
 8005f42:	2300      	movs	r3, #0
 8005f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	b94b      	cbnz	r3, 8005f76 <__swsetup_r+0x7a>
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6c:	d003      	beq.n	8005f76 <__swsetup_r+0x7a>
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	f001 fd84 	bl	8007a7e <__smakebuf_r>
 8005f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f7a:	f013 0201 	ands.w	r2, r3, #1
 8005f7e:	d00a      	beq.n	8005f96 <__swsetup_r+0x9a>
 8005f80:	2200      	movs	r2, #0
 8005f82:	60a2      	str	r2, [r4, #8]
 8005f84:	6962      	ldr	r2, [r4, #20]
 8005f86:	4252      	negs	r2, r2
 8005f88:	61a2      	str	r2, [r4, #24]
 8005f8a:	6922      	ldr	r2, [r4, #16]
 8005f8c:	b942      	cbnz	r2, 8005fa0 <__swsetup_r+0xa4>
 8005f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f92:	d1c5      	bne.n	8005f20 <__swsetup_r+0x24>
 8005f94:	bd38      	pop	{r3, r4, r5, pc}
 8005f96:	0799      	lsls	r1, r3, #30
 8005f98:	bf58      	it	pl
 8005f9a:	6962      	ldrpl	r2, [r4, #20]
 8005f9c:	60a2      	str	r2, [r4, #8]
 8005f9e:	e7f4      	b.n	8005f8a <__swsetup_r+0x8e>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e7f7      	b.n	8005f94 <__swsetup_r+0x98>
 8005fa4:	20000018 	.word	0x20000018

08005fa8 <memset>:
 8005fa8:	4603      	mov	r3, r0
 8005faa:	4402      	add	r2, r0
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d100      	bne.n	8005fb2 <memset+0xa>
 8005fb0:	4770      	bx	lr
 8005fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb6:	e7f9      	b.n	8005fac <memset+0x4>

08005fb8 <_localeconv_r>:
 8005fb8:	4800      	ldr	r0, [pc, #0]	@ (8005fbc <_localeconv_r+0x4>)
 8005fba:	4770      	bx	lr
 8005fbc:	20000158 	.word	0x20000158

08005fc0 <_close_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	4d05      	ldr	r5, [pc, #20]	@ (8005fdc <_close_r+0x1c>)
 8005fc6:	4604      	mov	r4, r0
 8005fc8:	4608      	mov	r0, r1
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	f7fc fa73 	bl	80024b6 <_close>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_close_r+0x1a>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_close_r+0x1a>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200005d0 	.word	0x200005d0

08005fe0 <_lseek_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4d05      	ldr	r5, [pc, #20]	@ (8006000 <_lseek_r+0x20>)
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7fc fa85 	bl	80024fe <_lseek>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_lseek_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_lseek_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	200005d0 	.word	0x200005d0

08006004 <_read_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	2200      	movs	r2, #0
 800600e:	4d05      	ldr	r5, [pc, #20]	@ (8006024 <_read_r+0x20>)
 8006010:	602a      	str	r2, [r5, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	f7fc fa32 	bl	800247c <_read>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_read_r+0x1e>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_read_r+0x1e>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	200005d0 	.word	0x200005d0

08006028 <_write_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4604      	mov	r4, r0
 800602c:	4608      	mov	r0, r1
 800602e:	4611      	mov	r1, r2
 8006030:	2200      	movs	r2, #0
 8006032:	4d05      	ldr	r5, [pc, #20]	@ (8006048 <_write_r+0x20>)
 8006034:	602a      	str	r2, [r5, #0]
 8006036:	461a      	mov	r2, r3
 8006038:	f7fb fca4 	bl	8001984 <_write>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_write_r+0x1e>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_write_r+0x1e>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	200005d0 	.word	0x200005d0

0800604c <__errno>:
 800604c:	4b01      	ldr	r3, [pc, #4]	@ (8006054 <__errno+0x8>)
 800604e:	6818      	ldr	r0, [r3, #0]
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	20000018 	.word	0x20000018

08006058 <__libc_init_array>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	2600      	movs	r6, #0
 800605c:	4d0c      	ldr	r5, [pc, #48]	@ (8006090 <__libc_init_array+0x38>)
 800605e:	4c0d      	ldr	r4, [pc, #52]	@ (8006094 <__libc_init_array+0x3c>)
 8006060:	1b64      	subs	r4, r4, r5
 8006062:	10a4      	asrs	r4, r4, #2
 8006064:	42a6      	cmp	r6, r4
 8006066:	d109      	bne.n	800607c <__libc_init_array+0x24>
 8006068:	f001 fe36 	bl	8007cd8 <_init>
 800606c:	2600      	movs	r6, #0
 800606e:	4d0a      	ldr	r5, [pc, #40]	@ (8006098 <__libc_init_array+0x40>)
 8006070:	4c0a      	ldr	r4, [pc, #40]	@ (800609c <__libc_init_array+0x44>)
 8006072:	1b64      	subs	r4, r4, r5
 8006074:	10a4      	asrs	r4, r4, #2
 8006076:	42a6      	cmp	r6, r4
 8006078:	d105      	bne.n	8006086 <__libc_init_array+0x2e>
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006080:	4798      	blx	r3
 8006082:	3601      	adds	r6, #1
 8006084:	e7ee      	b.n	8006064 <__libc_init_array+0xc>
 8006086:	f855 3b04 	ldr.w	r3, [r5], #4
 800608a:	4798      	blx	r3
 800608c:	3601      	adds	r6, #1
 800608e:	e7f2      	b.n	8006076 <__libc_init_array+0x1e>
 8006090:	08008370 	.word	0x08008370
 8006094:	08008370 	.word	0x08008370
 8006098:	08008370 	.word	0x08008370
 800609c:	08008374 	.word	0x08008374

080060a0 <__retarget_lock_init_recursive>:
 80060a0:	4770      	bx	lr

080060a2 <__retarget_lock_acquire_recursive>:
 80060a2:	4770      	bx	lr

080060a4 <__retarget_lock_release_recursive>:
 80060a4:	4770      	bx	lr

080060a6 <memchr>:
 80060a6:	4603      	mov	r3, r0
 80060a8:	b510      	push	{r4, lr}
 80060aa:	b2c9      	uxtb	r1, r1
 80060ac:	4402      	add	r2, r0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	4618      	mov	r0, r3
 80060b2:	d101      	bne.n	80060b8 <memchr+0x12>
 80060b4:	2000      	movs	r0, #0
 80060b6:	e003      	b.n	80060c0 <memchr+0x1a>
 80060b8:	7804      	ldrb	r4, [r0, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	428c      	cmp	r4, r1
 80060be:	d1f6      	bne.n	80060ae <memchr+0x8>
 80060c0:	bd10      	pop	{r4, pc}

080060c2 <quorem>:
 80060c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c6:	6903      	ldr	r3, [r0, #16]
 80060c8:	690c      	ldr	r4, [r1, #16]
 80060ca:	4607      	mov	r7, r0
 80060cc:	42a3      	cmp	r3, r4
 80060ce:	db7e      	blt.n	80061ce <quorem+0x10c>
 80060d0:	3c01      	subs	r4, #1
 80060d2:	00a3      	lsls	r3, r4, #2
 80060d4:	f100 0514 	add.w	r5, r0, #20
 80060d8:	f101 0814 	add.w	r8, r1, #20
 80060dc:	9300      	str	r3, [sp, #0]
 80060de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060ec:	3301      	adds	r3, #1
 80060ee:	429a      	cmp	r2, r3
 80060f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80060f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060f8:	d32e      	bcc.n	8006158 <quorem+0x96>
 80060fa:	f04f 0a00 	mov.w	sl, #0
 80060fe:	46c4      	mov	ip, r8
 8006100:	46ae      	mov	lr, r5
 8006102:	46d3      	mov	fp, sl
 8006104:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006108:	b298      	uxth	r0, r3
 800610a:	fb06 a000 	mla	r0, r6, r0, sl
 800610e:	0c1b      	lsrs	r3, r3, #16
 8006110:	0c02      	lsrs	r2, r0, #16
 8006112:	fb06 2303 	mla	r3, r6, r3, r2
 8006116:	f8de 2000 	ldr.w	r2, [lr]
 800611a:	b280      	uxth	r0, r0
 800611c:	b292      	uxth	r2, r2
 800611e:	1a12      	subs	r2, r2, r0
 8006120:	445a      	add	r2, fp
 8006122:	f8de 0000 	ldr.w	r0, [lr]
 8006126:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800612a:	b29b      	uxth	r3, r3
 800612c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006130:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006134:	b292      	uxth	r2, r2
 8006136:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800613a:	45e1      	cmp	r9, ip
 800613c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006140:	f84e 2b04 	str.w	r2, [lr], #4
 8006144:	d2de      	bcs.n	8006104 <quorem+0x42>
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	58eb      	ldr	r3, [r5, r3]
 800614a:	b92b      	cbnz	r3, 8006158 <quorem+0x96>
 800614c:	9b01      	ldr	r3, [sp, #4]
 800614e:	3b04      	subs	r3, #4
 8006150:	429d      	cmp	r5, r3
 8006152:	461a      	mov	r2, r3
 8006154:	d32f      	bcc.n	80061b6 <quorem+0xf4>
 8006156:	613c      	str	r4, [r7, #16]
 8006158:	4638      	mov	r0, r7
 800615a:	f001 f97b 	bl	8007454 <__mcmp>
 800615e:	2800      	cmp	r0, #0
 8006160:	db25      	blt.n	80061ae <quorem+0xec>
 8006162:	4629      	mov	r1, r5
 8006164:	2000      	movs	r0, #0
 8006166:	f858 2b04 	ldr.w	r2, [r8], #4
 800616a:	f8d1 c000 	ldr.w	ip, [r1]
 800616e:	fa1f fe82 	uxth.w	lr, r2
 8006172:	fa1f f38c 	uxth.w	r3, ip
 8006176:	eba3 030e 	sub.w	r3, r3, lr
 800617a:	4403      	add	r3, r0
 800617c:	0c12      	lsrs	r2, r2, #16
 800617e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006182:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006186:	b29b      	uxth	r3, r3
 8006188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800618c:	45c1      	cmp	r9, r8
 800618e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006192:	f841 3b04 	str.w	r3, [r1], #4
 8006196:	d2e6      	bcs.n	8006166 <quorem+0xa4>
 8006198:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800619c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061a0:	b922      	cbnz	r2, 80061ac <quorem+0xea>
 80061a2:	3b04      	subs	r3, #4
 80061a4:	429d      	cmp	r5, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	d30b      	bcc.n	80061c2 <quorem+0x100>
 80061aa:	613c      	str	r4, [r7, #16]
 80061ac:	3601      	adds	r6, #1
 80061ae:	4630      	mov	r0, r6
 80061b0:	b003      	add	sp, #12
 80061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b6:	6812      	ldr	r2, [r2, #0]
 80061b8:	3b04      	subs	r3, #4
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	d1cb      	bne.n	8006156 <quorem+0x94>
 80061be:	3c01      	subs	r4, #1
 80061c0:	e7c6      	b.n	8006150 <quorem+0x8e>
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	3b04      	subs	r3, #4
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	d1ef      	bne.n	80061aa <quorem+0xe8>
 80061ca:	3c01      	subs	r4, #1
 80061cc:	e7ea      	b.n	80061a4 <quorem+0xe2>
 80061ce:	2000      	movs	r0, #0
 80061d0:	e7ee      	b.n	80061b0 <quorem+0xee>
 80061d2:	0000      	movs	r0, r0
 80061d4:	0000      	movs	r0, r0
	...

080061d8 <_dtoa_r>:
 80061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	4614      	mov	r4, r2
 80061de:	461d      	mov	r5, r3
 80061e0:	69c7      	ldr	r7, [r0, #28]
 80061e2:	b097      	sub	sp, #92	@ 0x5c
 80061e4:	4683      	mov	fp, r0
 80061e6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80061ea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80061ec:	b97f      	cbnz	r7, 800620e <_dtoa_r+0x36>
 80061ee:	2010      	movs	r0, #16
 80061f0:	f000 fe02 	bl	8006df8 <malloc>
 80061f4:	4602      	mov	r2, r0
 80061f6:	f8cb 001c 	str.w	r0, [fp, #28]
 80061fa:	b920      	cbnz	r0, 8006206 <_dtoa_r+0x2e>
 80061fc:	21ef      	movs	r1, #239	@ 0xef
 80061fe:	4ba8      	ldr	r3, [pc, #672]	@ (80064a0 <_dtoa_r+0x2c8>)
 8006200:	48a8      	ldr	r0, [pc, #672]	@ (80064a4 <_dtoa_r+0x2cc>)
 8006202:	f001 fcb9 	bl	8007b78 <__assert_func>
 8006206:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800620a:	6007      	str	r7, [r0, #0]
 800620c:	60c7      	str	r7, [r0, #12]
 800620e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	b159      	cbz	r1, 800622e <_dtoa_r+0x56>
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	2301      	movs	r3, #1
 800621a:	4093      	lsls	r3, r2
 800621c:	604a      	str	r2, [r1, #4]
 800621e:	608b      	str	r3, [r1, #8]
 8006220:	4658      	mov	r0, fp
 8006222:	f000 fedf 	bl	8006fe4 <_Bfree>
 8006226:	2200      	movs	r2, #0
 8006228:	f8db 301c 	ldr.w	r3, [fp, #28]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	1e2b      	subs	r3, r5, #0
 8006230:	bfaf      	iteee	ge
 8006232:	2300      	movge	r3, #0
 8006234:	2201      	movlt	r2, #1
 8006236:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800623a:	9303      	strlt	r3, [sp, #12]
 800623c:	bfa8      	it	ge
 800623e:	6033      	strge	r3, [r6, #0]
 8006240:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006244:	4b98      	ldr	r3, [pc, #608]	@ (80064a8 <_dtoa_r+0x2d0>)
 8006246:	bfb8      	it	lt
 8006248:	6032      	strlt	r2, [r6, #0]
 800624a:	ea33 0308 	bics.w	r3, r3, r8
 800624e:	d112      	bne.n	8006276 <_dtoa_r+0x9e>
 8006250:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006254:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800625c:	4323      	orrs	r3, r4
 800625e:	f000 8550 	beq.w	8006d02 <_dtoa_r+0xb2a>
 8006262:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006264:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80064ac <_dtoa_r+0x2d4>
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8552 	beq.w	8006d12 <_dtoa_r+0xb3a>
 800626e:	f10a 0303 	add.w	r3, sl, #3
 8006272:	f000 bd4c 	b.w	8006d0e <_dtoa_r+0xb36>
 8006276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800627a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800627e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006282:	2200      	movs	r2, #0
 8006284:	2300      	movs	r3, #0
 8006286:	f7fa fbcb 	bl	8000a20 <__aeabi_dcmpeq>
 800628a:	4607      	mov	r7, r0
 800628c:	b158      	cbz	r0, 80062a6 <_dtoa_r+0xce>
 800628e:	2301      	movs	r3, #1
 8006290:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006296:	b113      	cbz	r3, 800629e <_dtoa_r+0xc6>
 8006298:	4b85      	ldr	r3, [pc, #532]	@ (80064b0 <_dtoa_r+0x2d8>)
 800629a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80064b4 <_dtoa_r+0x2dc>
 80062a2:	f000 bd36 	b.w	8006d12 <_dtoa_r+0xb3a>
 80062a6:	ab14      	add	r3, sp, #80	@ 0x50
 80062a8:	9301      	str	r3, [sp, #4]
 80062aa:	ab15      	add	r3, sp, #84	@ 0x54
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	4658      	mov	r0, fp
 80062b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062b4:	f001 f97e 	bl	80075b4 <__d2b>
 80062b8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80062bc:	4681      	mov	r9, r0
 80062be:	2e00      	cmp	r6, #0
 80062c0:	d077      	beq.n	80063b2 <_dtoa_r+0x1da>
 80062c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062c8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062d0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062d4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062d8:	9712      	str	r7, [sp, #72]	@ 0x48
 80062da:	4619      	mov	r1, r3
 80062dc:	2200      	movs	r2, #0
 80062de:	4b76      	ldr	r3, [pc, #472]	@ (80064b8 <_dtoa_r+0x2e0>)
 80062e0:	f7f9 ff7e 	bl	80001e0 <__aeabi_dsub>
 80062e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006488 <_dtoa_r+0x2b0>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7fa f931 	bl	8000550 <__aeabi_dmul>
 80062ee:	a368      	add	r3, pc, #416	@ (adr r3, 8006490 <_dtoa_r+0x2b8>)
 80062f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f4:	f7f9 ff76 	bl	80001e4 <__adddf3>
 80062f8:	4604      	mov	r4, r0
 80062fa:	4630      	mov	r0, r6
 80062fc:	460d      	mov	r5, r1
 80062fe:	f7fa f8bd 	bl	800047c <__aeabi_i2d>
 8006302:	a365      	add	r3, pc, #404	@ (adr r3, 8006498 <_dtoa_r+0x2c0>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7fa f922 	bl	8000550 <__aeabi_dmul>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4620      	mov	r0, r4
 8006312:	4629      	mov	r1, r5
 8006314:	f7f9 ff66 	bl	80001e4 <__adddf3>
 8006318:	4604      	mov	r4, r0
 800631a:	460d      	mov	r5, r1
 800631c:	f7fa fbc8 	bl	8000ab0 <__aeabi_d2iz>
 8006320:	2200      	movs	r2, #0
 8006322:	4607      	mov	r7, r0
 8006324:	2300      	movs	r3, #0
 8006326:	4620      	mov	r0, r4
 8006328:	4629      	mov	r1, r5
 800632a:	f7fa fb83 	bl	8000a34 <__aeabi_dcmplt>
 800632e:	b140      	cbz	r0, 8006342 <_dtoa_r+0x16a>
 8006330:	4638      	mov	r0, r7
 8006332:	f7fa f8a3 	bl	800047c <__aeabi_i2d>
 8006336:	4622      	mov	r2, r4
 8006338:	462b      	mov	r3, r5
 800633a:	f7fa fb71 	bl	8000a20 <__aeabi_dcmpeq>
 800633e:	b900      	cbnz	r0, 8006342 <_dtoa_r+0x16a>
 8006340:	3f01      	subs	r7, #1
 8006342:	2f16      	cmp	r7, #22
 8006344:	d853      	bhi.n	80063ee <_dtoa_r+0x216>
 8006346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800634a:	4b5c      	ldr	r3, [pc, #368]	@ (80064bc <_dtoa_r+0x2e4>)
 800634c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f7fa fb6e 	bl	8000a34 <__aeabi_dcmplt>
 8006358:	2800      	cmp	r0, #0
 800635a:	d04a      	beq.n	80063f2 <_dtoa_r+0x21a>
 800635c:	2300      	movs	r3, #0
 800635e:	3f01      	subs	r7, #1
 8006360:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006362:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006364:	1b9b      	subs	r3, r3, r6
 8006366:	1e5a      	subs	r2, r3, #1
 8006368:	bf46      	itte	mi
 800636a:	f1c3 0801 	rsbmi	r8, r3, #1
 800636e:	2300      	movmi	r3, #0
 8006370:	f04f 0800 	movpl.w	r8, #0
 8006374:	9209      	str	r2, [sp, #36]	@ 0x24
 8006376:	bf48      	it	mi
 8006378:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800637a:	2f00      	cmp	r7, #0
 800637c:	db3b      	blt.n	80063f6 <_dtoa_r+0x21e>
 800637e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006380:	970e      	str	r7, [sp, #56]	@ 0x38
 8006382:	443b      	add	r3, r7
 8006384:	9309      	str	r3, [sp, #36]	@ 0x24
 8006386:	2300      	movs	r3, #0
 8006388:	930a      	str	r3, [sp, #40]	@ 0x28
 800638a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800638c:	2b09      	cmp	r3, #9
 800638e:	d866      	bhi.n	800645e <_dtoa_r+0x286>
 8006390:	2b05      	cmp	r3, #5
 8006392:	bfc4      	itt	gt
 8006394:	3b04      	subgt	r3, #4
 8006396:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006398:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800639a:	bfc8      	it	gt
 800639c:	2400      	movgt	r4, #0
 800639e:	f1a3 0302 	sub.w	r3, r3, #2
 80063a2:	bfd8      	it	le
 80063a4:	2401      	movle	r4, #1
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d864      	bhi.n	8006474 <_dtoa_r+0x29c>
 80063aa:	e8df f003 	tbb	[pc, r3]
 80063ae:	382b      	.short	0x382b
 80063b0:	5636      	.short	0x5636
 80063b2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063b6:	441e      	add	r6, r3
 80063b8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063bc:	2b20      	cmp	r3, #32
 80063be:	bfc1      	itttt	gt
 80063c0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80063c8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063d0:	bfd6      	itet	le
 80063d2:	f1c3 0320 	rsble	r3, r3, #32
 80063d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80063da:	fa04 f003 	lslle.w	r0, r4, r3
 80063de:	f7fa f83d 	bl	800045c <__aeabi_ui2d>
 80063e2:	2201      	movs	r2, #1
 80063e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063e8:	3e01      	subs	r6, #1
 80063ea:	9212      	str	r2, [sp, #72]	@ 0x48
 80063ec:	e775      	b.n	80062da <_dtoa_r+0x102>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e7b6      	b.n	8006360 <_dtoa_r+0x188>
 80063f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063f4:	e7b5      	b.n	8006362 <_dtoa_r+0x18a>
 80063f6:	427b      	negs	r3, r7
 80063f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063fa:	2300      	movs	r3, #0
 80063fc:	eba8 0807 	sub.w	r8, r8, r7
 8006400:	930e      	str	r3, [sp, #56]	@ 0x38
 8006402:	e7c2      	b.n	800638a <_dtoa_r+0x1b2>
 8006404:	2300      	movs	r3, #0
 8006406:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006408:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800640a:	2b00      	cmp	r3, #0
 800640c:	dc35      	bgt.n	800647a <_dtoa_r+0x2a2>
 800640e:	2301      	movs	r3, #1
 8006410:	461a      	mov	r2, r3
 8006412:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006416:	9221      	str	r2, [sp, #132]	@ 0x84
 8006418:	e00b      	b.n	8006432 <_dtoa_r+0x25a>
 800641a:	2301      	movs	r3, #1
 800641c:	e7f3      	b.n	8006406 <_dtoa_r+0x22e>
 800641e:	2300      	movs	r3, #0
 8006420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006422:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006424:	18fb      	adds	r3, r7, r3
 8006426:	9308      	str	r3, [sp, #32]
 8006428:	3301      	adds	r3, #1
 800642a:	2b01      	cmp	r3, #1
 800642c:	9307      	str	r3, [sp, #28]
 800642e:	bfb8      	it	lt
 8006430:	2301      	movlt	r3, #1
 8006432:	2100      	movs	r1, #0
 8006434:	2204      	movs	r2, #4
 8006436:	f8db 001c 	ldr.w	r0, [fp, #28]
 800643a:	f102 0514 	add.w	r5, r2, #20
 800643e:	429d      	cmp	r5, r3
 8006440:	d91f      	bls.n	8006482 <_dtoa_r+0x2aa>
 8006442:	6041      	str	r1, [r0, #4]
 8006444:	4658      	mov	r0, fp
 8006446:	f000 fd8d 	bl	8006f64 <_Balloc>
 800644a:	4682      	mov	sl, r0
 800644c:	2800      	cmp	r0, #0
 800644e:	d139      	bne.n	80064c4 <_dtoa_r+0x2ec>
 8006450:	4602      	mov	r2, r0
 8006452:	f240 11af 	movw	r1, #431	@ 0x1af
 8006456:	4b1a      	ldr	r3, [pc, #104]	@ (80064c0 <_dtoa_r+0x2e8>)
 8006458:	e6d2      	b.n	8006200 <_dtoa_r+0x28>
 800645a:	2301      	movs	r3, #1
 800645c:	e7e0      	b.n	8006420 <_dtoa_r+0x248>
 800645e:	2401      	movs	r4, #1
 8006460:	2300      	movs	r3, #0
 8006462:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006464:	9320      	str	r3, [sp, #128]	@ 0x80
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	2200      	movs	r2, #0
 800646c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006470:	2312      	movs	r3, #18
 8006472:	e7d0      	b.n	8006416 <_dtoa_r+0x23e>
 8006474:	2301      	movs	r3, #1
 8006476:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006478:	e7f5      	b.n	8006466 <_dtoa_r+0x28e>
 800647a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800647c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006480:	e7d7      	b.n	8006432 <_dtoa_r+0x25a>
 8006482:	3101      	adds	r1, #1
 8006484:	0052      	lsls	r2, r2, #1
 8006486:	e7d8      	b.n	800643a <_dtoa_r+0x262>
 8006488:	636f4361 	.word	0x636f4361
 800648c:	3fd287a7 	.word	0x3fd287a7
 8006490:	8b60c8b3 	.word	0x8b60c8b3
 8006494:	3fc68a28 	.word	0x3fc68a28
 8006498:	509f79fb 	.word	0x509f79fb
 800649c:	3fd34413 	.word	0x3fd34413
 80064a0:	08008039 	.word	0x08008039
 80064a4:	08008050 	.word	0x08008050
 80064a8:	7ff00000 	.word	0x7ff00000
 80064ac:	08008035 	.word	0x08008035
 80064b0:	08008009 	.word	0x08008009
 80064b4:	08008008 	.word	0x08008008
 80064b8:	3ff80000 	.word	0x3ff80000
 80064bc:	08008148 	.word	0x08008148
 80064c0:	080080a8 	.word	0x080080a8
 80064c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064c8:	6018      	str	r0, [r3, #0]
 80064ca:	9b07      	ldr	r3, [sp, #28]
 80064cc:	2b0e      	cmp	r3, #14
 80064ce:	f200 80a4 	bhi.w	800661a <_dtoa_r+0x442>
 80064d2:	2c00      	cmp	r4, #0
 80064d4:	f000 80a1 	beq.w	800661a <_dtoa_r+0x442>
 80064d8:	2f00      	cmp	r7, #0
 80064da:	dd33      	ble.n	8006544 <_dtoa_r+0x36c>
 80064dc:	4b86      	ldr	r3, [pc, #536]	@ (80066f8 <_dtoa_r+0x520>)
 80064de:	f007 020f 	and.w	r2, r7, #15
 80064e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064e6:	05f8      	lsls	r0, r7, #23
 80064e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064f4:	d516      	bpl.n	8006524 <_dtoa_r+0x34c>
 80064f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064fa:	4b80      	ldr	r3, [pc, #512]	@ (80066fc <_dtoa_r+0x524>)
 80064fc:	2603      	movs	r6, #3
 80064fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006502:	f7fa f94f 	bl	80007a4 <__aeabi_ddiv>
 8006506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800650a:	f004 040f 	and.w	r4, r4, #15
 800650e:	4d7b      	ldr	r5, [pc, #492]	@ (80066fc <_dtoa_r+0x524>)
 8006510:	b954      	cbnz	r4, 8006528 <_dtoa_r+0x350>
 8006512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651a:	f7fa f943 	bl	80007a4 <__aeabi_ddiv>
 800651e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006522:	e028      	b.n	8006576 <_dtoa_r+0x39e>
 8006524:	2602      	movs	r6, #2
 8006526:	e7f2      	b.n	800650e <_dtoa_r+0x336>
 8006528:	07e1      	lsls	r1, r4, #31
 800652a:	d508      	bpl.n	800653e <_dtoa_r+0x366>
 800652c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006534:	f7fa f80c 	bl	8000550 <__aeabi_dmul>
 8006538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800653c:	3601      	adds	r6, #1
 800653e:	1064      	asrs	r4, r4, #1
 8006540:	3508      	adds	r5, #8
 8006542:	e7e5      	b.n	8006510 <_dtoa_r+0x338>
 8006544:	f000 80d2 	beq.w	80066ec <_dtoa_r+0x514>
 8006548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800654c:	427c      	negs	r4, r7
 800654e:	4b6a      	ldr	r3, [pc, #424]	@ (80066f8 <_dtoa_r+0x520>)
 8006550:	f004 020f 	and.w	r2, r4, #15
 8006554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 fff8 	bl	8000550 <__aeabi_dmul>
 8006560:	2602      	movs	r6, #2
 8006562:	2300      	movs	r3, #0
 8006564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006568:	4d64      	ldr	r5, [pc, #400]	@ (80066fc <_dtoa_r+0x524>)
 800656a:	1124      	asrs	r4, r4, #4
 800656c:	2c00      	cmp	r4, #0
 800656e:	f040 80b2 	bne.w	80066d6 <_dtoa_r+0x4fe>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1d3      	bne.n	800651e <_dtoa_r+0x346>
 8006576:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800657a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80b7 	beq.w	80066f0 <_dtoa_r+0x518>
 8006582:	2200      	movs	r2, #0
 8006584:	4620      	mov	r0, r4
 8006586:	4629      	mov	r1, r5
 8006588:	4b5d      	ldr	r3, [pc, #372]	@ (8006700 <_dtoa_r+0x528>)
 800658a:	f7fa fa53 	bl	8000a34 <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	f000 80ae 	beq.w	80066f0 <_dtoa_r+0x518>
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80aa 	beq.w	80066f0 <_dtoa_r+0x518>
 800659c:	9b08      	ldr	r3, [sp, #32]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dd37      	ble.n	8006612 <_dtoa_r+0x43a>
 80065a2:	1e7b      	subs	r3, r7, #1
 80065a4:	4620      	mov	r0, r4
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	2200      	movs	r2, #0
 80065aa:	4629      	mov	r1, r5
 80065ac:	4b55      	ldr	r3, [pc, #340]	@ (8006704 <_dtoa_r+0x52c>)
 80065ae:	f7f9 ffcf 	bl	8000550 <__aeabi_dmul>
 80065b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b6:	9c08      	ldr	r4, [sp, #32]
 80065b8:	3601      	adds	r6, #1
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7f9 ff5e 	bl	800047c <__aeabi_i2d>
 80065c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c4:	f7f9 ffc4 	bl	8000550 <__aeabi_dmul>
 80065c8:	2200      	movs	r2, #0
 80065ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006708 <_dtoa_r+0x530>)
 80065cc:	f7f9 fe0a 	bl	80001e4 <__adddf3>
 80065d0:	4605      	mov	r5, r0
 80065d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065d6:	2c00      	cmp	r4, #0
 80065d8:	f040 809a 	bne.w	8006710 <_dtoa_r+0x538>
 80065dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e0:	2200      	movs	r2, #0
 80065e2:	4b4a      	ldr	r3, [pc, #296]	@ (800670c <_dtoa_r+0x534>)
 80065e4:	f7f9 fdfc 	bl	80001e0 <__aeabi_dsub>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065f0:	462a      	mov	r2, r5
 80065f2:	4633      	mov	r3, r6
 80065f4:	f7fa fa3c 	bl	8000a70 <__aeabi_dcmpgt>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	f040 828e 	bne.w	8006b1a <_dtoa_r+0x942>
 80065fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006602:	462a      	mov	r2, r5
 8006604:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006608:	f7fa fa14 	bl	8000a34 <__aeabi_dcmplt>
 800660c:	2800      	cmp	r0, #0
 800660e:	f040 8127 	bne.w	8006860 <_dtoa_r+0x688>
 8006612:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006616:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800661a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800661c:	2b00      	cmp	r3, #0
 800661e:	f2c0 8163 	blt.w	80068e8 <_dtoa_r+0x710>
 8006622:	2f0e      	cmp	r7, #14
 8006624:	f300 8160 	bgt.w	80068e8 <_dtoa_r+0x710>
 8006628:	4b33      	ldr	r3, [pc, #204]	@ (80066f8 <_dtoa_r+0x520>)
 800662a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800662e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006632:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006636:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006638:	2b00      	cmp	r3, #0
 800663a:	da03      	bge.n	8006644 <_dtoa_r+0x46c>
 800663c:	9b07      	ldr	r3, [sp, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f340 8100 	ble.w	8006844 <_dtoa_r+0x66c>
 8006644:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006648:	4656      	mov	r6, sl
 800664a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fa f8a7 	bl	80007a4 <__aeabi_ddiv>
 8006656:	f7fa fa2b 	bl	8000ab0 <__aeabi_d2iz>
 800665a:	4680      	mov	r8, r0
 800665c:	f7f9 ff0e 	bl	800047c <__aeabi_i2d>
 8006660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006664:	f7f9 ff74 	bl	8000550 <__aeabi_dmul>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f7f9 fdb6 	bl	80001e0 <__aeabi_dsub>
 8006674:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006678:	9d07      	ldr	r5, [sp, #28]
 800667a:	f806 4b01 	strb.w	r4, [r6], #1
 800667e:	eba6 040a 	sub.w	r4, r6, sl
 8006682:	42a5      	cmp	r5, r4
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	f040 8116 	bne.w	80068b8 <_dtoa_r+0x6e0>
 800668c:	f7f9 fdaa 	bl	80001e4 <__adddf3>
 8006690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	f7fa f9ea 	bl	8000a70 <__aeabi_dcmpgt>
 800669c:	2800      	cmp	r0, #0
 800669e:	f040 80f8 	bne.w	8006892 <_dtoa_r+0x6ba>
 80066a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7fa f9b9 	bl	8000a20 <__aeabi_dcmpeq>
 80066ae:	b118      	cbz	r0, 80066b8 <_dtoa_r+0x4e0>
 80066b0:	f018 0f01 	tst.w	r8, #1
 80066b4:	f040 80ed 	bne.w	8006892 <_dtoa_r+0x6ba>
 80066b8:	4649      	mov	r1, r9
 80066ba:	4658      	mov	r0, fp
 80066bc:	f000 fc92 	bl	8006fe4 <_Bfree>
 80066c0:	2300      	movs	r3, #0
 80066c2:	7033      	strb	r3, [r6, #0]
 80066c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066c6:	3701      	adds	r7, #1
 80066c8:	601f      	str	r7, [r3, #0]
 80066ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8320 	beq.w	8006d12 <_dtoa_r+0xb3a>
 80066d2:	601e      	str	r6, [r3, #0]
 80066d4:	e31d      	b.n	8006d12 <_dtoa_r+0xb3a>
 80066d6:	07e2      	lsls	r2, r4, #31
 80066d8:	d505      	bpl.n	80066e6 <_dtoa_r+0x50e>
 80066da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066de:	f7f9 ff37 	bl	8000550 <__aeabi_dmul>
 80066e2:	2301      	movs	r3, #1
 80066e4:	3601      	adds	r6, #1
 80066e6:	1064      	asrs	r4, r4, #1
 80066e8:	3508      	adds	r5, #8
 80066ea:	e73f      	b.n	800656c <_dtoa_r+0x394>
 80066ec:	2602      	movs	r6, #2
 80066ee:	e742      	b.n	8006576 <_dtoa_r+0x39e>
 80066f0:	9c07      	ldr	r4, [sp, #28]
 80066f2:	9704      	str	r7, [sp, #16]
 80066f4:	e761      	b.n	80065ba <_dtoa_r+0x3e2>
 80066f6:	bf00      	nop
 80066f8:	08008148 	.word	0x08008148
 80066fc:	08008120 	.word	0x08008120
 8006700:	3ff00000 	.word	0x3ff00000
 8006704:	40240000 	.word	0x40240000
 8006708:	401c0000 	.word	0x401c0000
 800670c:	40140000 	.word	0x40140000
 8006710:	4b70      	ldr	r3, [pc, #448]	@ (80068d4 <_dtoa_r+0x6fc>)
 8006712:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006714:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006718:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800671c:	4454      	add	r4, sl
 800671e:	2900      	cmp	r1, #0
 8006720:	d045      	beq.n	80067ae <_dtoa_r+0x5d6>
 8006722:	2000      	movs	r0, #0
 8006724:	496c      	ldr	r1, [pc, #432]	@ (80068d8 <_dtoa_r+0x700>)
 8006726:	f7fa f83d 	bl	80007a4 <__aeabi_ddiv>
 800672a:	4633      	mov	r3, r6
 800672c:	462a      	mov	r2, r5
 800672e:	f7f9 fd57 	bl	80001e0 <__aeabi_dsub>
 8006732:	4656      	mov	r6, sl
 8006734:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673c:	f7fa f9b8 	bl	8000ab0 <__aeabi_d2iz>
 8006740:	4605      	mov	r5, r0
 8006742:	f7f9 fe9b 	bl	800047c <__aeabi_i2d>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800674e:	f7f9 fd47 	bl	80001e0 <__aeabi_dsub>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	3530      	adds	r5, #48	@ 0x30
 8006758:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800675c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006760:	f806 5b01 	strb.w	r5, [r6], #1
 8006764:	f7fa f966 	bl	8000a34 <__aeabi_dcmplt>
 8006768:	2800      	cmp	r0, #0
 800676a:	d163      	bne.n	8006834 <_dtoa_r+0x65c>
 800676c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006770:	2000      	movs	r0, #0
 8006772:	495a      	ldr	r1, [pc, #360]	@ (80068dc <_dtoa_r+0x704>)
 8006774:	f7f9 fd34 	bl	80001e0 <__aeabi_dsub>
 8006778:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800677c:	f7fa f95a 	bl	8000a34 <__aeabi_dcmplt>
 8006780:	2800      	cmp	r0, #0
 8006782:	f040 8087 	bne.w	8006894 <_dtoa_r+0x6bc>
 8006786:	42a6      	cmp	r6, r4
 8006788:	f43f af43 	beq.w	8006612 <_dtoa_r+0x43a>
 800678c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006790:	2200      	movs	r2, #0
 8006792:	4b53      	ldr	r3, [pc, #332]	@ (80068e0 <_dtoa_r+0x708>)
 8006794:	f7f9 fedc 	bl	8000550 <__aeabi_dmul>
 8006798:	2200      	movs	r2, #0
 800679a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800679e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a2:	4b4f      	ldr	r3, [pc, #316]	@ (80068e0 <_dtoa_r+0x708>)
 80067a4:	f7f9 fed4 	bl	8000550 <__aeabi_dmul>
 80067a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ac:	e7c4      	b.n	8006738 <_dtoa_r+0x560>
 80067ae:	4631      	mov	r1, r6
 80067b0:	4628      	mov	r0, r5
 80067b2:	f7f9 fecd 	bl	8000550 <__aeabi_dmul>
 80067b6:	4656      	mov	r6, sl
 80067b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80067be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c2:	f7fa f975 	bl	8000ab0 <__aeabi_d2iz>
 80067c6:	4605      	mov	r5, r0
 80067c8:	f7f9 fe58 	bl	800047c <__aeabi_i2d>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d4:	f7f9 fd04 	bl	80001e0 <__aeabi_dsub>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	3530      	adds	r5, #48	@ 0x30
 80067de:	f806 5b01 	strb.w	r5, [r6], #1
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	d124      	bne.n	8006838 <_dtoa_r+0x660>
 80067ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067f2:	4b39      	ldr	r3, [pc, #228]	@ (80068d8 <_dtoa_r+0x700>)
 80067f4:	f7f9 fcf6 	bl	80001e4 <__adddf3>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006800:	f7fa f936 	bl	8000a70 <__aeabi_dcmpgt>
 8006804:	2800      	cmp	r0, #0
 8006806:	d145      	bne.n	8006894 <_dtoa_r+0x6bc>
 8006808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800680c:	2000      	movs	r0, #0
 800680e:	4932      	ldr	r1, [pc, #200]	@ (80068d8 <_dtoa_r+0x700>)
 8006810:	f7f9 fce6 	bl	80001e0 <__aeabi_dsub>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800681c:	f7fa f90a 	bl	8000a34 <__aeabi_dcmplt>
 8006820:	2800      	cmp	r0, #0
 8006822:	f43f aef6 	beq.w	8006612 <_dtoa_r+0x43a>
 8006826:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006828:	1e73      	subs	r3, r6, #1
 800682a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800682c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006830:	2b30      	cmp	r3, #48	@ 0x30
 8006832:	d0f8      	beq.n	8006826 <_dtoa_r+0x64e>
 8006834:	9f04      	ldr	r7, [sp, #16]
 8006836:	e73f      	b.n	80066b8 <_dtoa_r+0x4e0>
 8006838:	4b29      	ldr	r3, [pc, #164]	@ (80068e0 <_dtoa_r+0x708>)
 800683a:	f7f9 fe89 	bl	8000550 <__aeabi_dmul>
 800683e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006842:	e7bc      	b.n	80067be <_dtoa_r+0x5e6>
 8006844:	d10c      	bne.n	8006860 <_dtoa_r+0x688>
 8006846:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800684a:	2200      	movs	r2, #0
 800684c:	4b25      	ldr	r3, [pc, #148]	@ (80068e4 <_dtoa_r+0x70c>)
 800684e:	f7f9 fe7f 	bl	8000550 <__aeabi_dmul>
 8006852:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006856:	f7fa f901 	bl	8000a5c <__aeabi_dcmpge>
 800685a:	2800      	cmp	r0, #0
 800685c:	f000 815b 	beq.w	8006b16 <_dtoa_r+0x93e>
 8006860:	2400      	movs	r4, #0
 8006862:	4625      	mov	r5, r4
 8006864:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006866:	4656      	mov	r6, sl
 8006868:	43db      	mvns	r3, r3
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	2700      	movs	r7, #0
 800686e:	4621      	mov	r1, r4
 8006870:	4658      	mov	r0, fp
 8006872:	f000 fbb7 	bl	8006fe4 <_Bfree>
 8006876:	2d00      	cmp	r5, #0
 8006878:	d0dc      	beq.n	8006834 <_dtoa_r+0x65c>
 800687a:	b12f      	cbz	r7, 8006888 <_dtoa_r+0x6b0>
 800687c:	42af      	cmp	r7, r5
 800687e:	d003      	beq.n	8006888 <_dtoa_r+0x6b0>
 8006880:	4639      	mov	r1, r7
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fbae 	bl	8006fe4 <_Bfree>
 8006888:	4629      	mov	r1, r5
 800688a:	4658      	mov	r0, fp
 800688c:	f000 fbaa 	bl	8006fe4 <_Bfree>
 8006890:	e7d0      	b.n	8006834 <_dtoa_r+0x65c>
 8006892:	9704      	str	r7, [sp, #16]
 8006894:	4633      	mov	r3, r6
 8006896:	461e      	mov	r6, r3
 8006898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800689c:	2a39      	cmp	r2, #57	@ 0x39
 800689e:	d107      	bne.n	80068b0 <_dtoa_r+0x6d8>
 80068a0:	459a      	cmp	sl, r3
 80068a2:	d1f8      	bne.n	8006896 <_dtoa_r+0x6be>
 80068a4:	9a04      	ldr	r2, [sp, #16]
 80068a6:	3201      	adds	r2, #1
 80068a8:	9204      	str	r2, [sp, #16]
 80068aa:	2230      	movs	r2, #48	@ 0x30
 80068ac:	f88a 2000 	strb.w	r2, [sl]
 80068b0:	781a      	ldrb	r2, [r3, #0]
 80068b2:	3201      	adds	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e7bd      	b.n	8006834 <_dtoa_r+0x65c>
 80068b8:	2200      	movs	r2, #0
 80068ba:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <_dtoa_r+0x708>)
 80068bc:	f7f9 fe48 	bl	8000550 <__aeabi_dmul>
 80068c0:	2200      	movs	r2, #0
 80068c2:	2300      	movs	r3, #0
 80068c4:	4604      	mov	r4, r0
 80068c6:	460d      	mov	r5, r1
 80068c8:	f7fa f8aa 	bl	8000a20 <__aeabi_dcmpeq>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f43f aebc 	beq.w	800664a <_dtoa_r+0x472>
 80068d2:	e6f1      	b.n	80066b8 <_dtoa_r+0x4e0>
 80068d4:	08008148 	.word	0x08008148
 80068d8:	3fe00000 	.word	0x3fe00000
 80068dc:	3ff00000 	.word	0x3ff00000
 80068e0:	40240000 	.word	0x40240000
 80068e4:	40140000 	.word	0x40140000
 80068e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	f000 80db 	beq.w	8006aa6 <_dtoa_r+0x8ce>
 80068f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068f2:	2a01      	cmp	r2, #1
 80068f4:	f300 80bf 	bgt.w	8006a76 <_dtoa_r+0x89e>
 80068f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068fa:	2a00      	cmp	r2, #0
 80068fc:	f000 80b7 	beq.w	8006a6e <_dtoa_r+0x896>
 8006900:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006904:	4646      	mov	r6, r8
 8006906:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800690a:	2101      	movs	r1, #1
 800690c:	441a      	add	r2, r3
 800690e:	4658      	mov	r0, fp
 8006910:	4498      	add	r8, r3
 8006912:	9209      	str	r2, [sp, #36]	@ 0x24
 8006914:	f000 fc1a 	bl	800714c <__i2b>
 8006918:	4605      	mov	r5, r0
 800691a:	b15e      	cbz	r6, 8006934 <_dtoa_r+0x75c>
 800691c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	dd08      	ble.n	8006934 <_dtoa_r+0x75c>
 8006922:	42b3      	cmp	r3, r6
 8006924:	bfa8      	it	ge
 8006926:	4633      	movge	r3, r6
 8006928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800692a:	eba8 0803 	sub.w	r8, r8, r3
 800692e:	1af6      	subs	r6, r6, r3
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	9309      	str	r3, [sp, #36]	@ 0x24
 8006934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006936:	b1f3      	cbz	r3, 8006976 <_dtoa_r+0x79e>
 8006938:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800693a:	2b00      	cmp	r3, #0
 800693c:	f000 80b7 	beq.w	8006aae <_dtoa_r+0x8d6>
 8006940:	b18c      	cbz	r4, 8006966 <_dtoa_r+0x78e>
 8006942:	4629      	mov	r1, r5
 8006944:	4622      	mov	r2, r4
 8006946:	4658      	mov	r0, fp
 8006948:	f000 fcbe 	bl	80072c8 <__pow5mult>
 800694c:	464a      	mov	r2, r9
 800694e:	4601      	mov	r1, r0
 8006950:	4605      	mov	r5, r0
 8006952:	4658      	mov	r0, fp
 8006954:	f000 fc10 	bl	8007178 <__multiply>
 8006958:	4649      	mov	r1, r9
 800695a:	9004      	str	r0, [sp, #16]
 800695c:	4658      	mov	r0, fp
 800695e:	f000 fb41 	bl	8006fe4 <_Bfree>
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	4699      	mov	r9, r3
 8006966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006968:	1b1a      	subs	r2, r3, r4
 800696a:	d004      	beq.n	8006976 <_dtoa_r+0x79e>
 800696c:	4649      	mov	r1, r9
 800696e:	4658      	mov	r0, fp
 8006970:	f000 fcaa 	bl	80072c8 <__pow5mult>
 8006974:	4681      	mov	r9, r0
 8006976:	2101      	movs	r1, #1
 8006978:	4658      	mov	r0, fp
 800697a:	f000 fbe7 	bl	800714c <__i2b>
 800697e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006980:	4604      	mov	r4, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 81c9 	beq.w	8006d1a <_dtoa_r+0xb42>
 8006988:	461a      	mov	r2, r3
 800698a:	4601      	mov	r1, r0
 800698c:	4658      	mov	r0, fp
 800698e:	f000 fc9b 	bl	80072c8 <__pow5mult>
 8006992:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006994:	4604      	mov	r4, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	f300 808f 	bgt.w	8006aba <_dtoa_r+0x8e2>
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 8087 	bne.w	8006ab2 <_dtoa_r+0x8da>
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f040 8083 	bne.w	8006ab6 <_dtoa_r+0x8de>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069b6:	0d1b      	lsrs	r3, r3, #20
 80069b8:	051b      	lsls	r3, r3, #20
 80069ba:	b12b      	cbz	r3, 80069c8 <_dtoa_r+0x7f0>
 80069bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069be:	f108 0801 	add.w	r8, r8, #1
 80069c2:	3301      	adds	r3, #1
 80069c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069c6:	2301      	movs	r3, #1
 80069c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 81aa 	beq.w	8006d26 <_dtoa_r+0xb4e>
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069d8:	6918      	ldr	r0, [r3, #16]
 80069da:	f000 fb6b 	bl	80070b4 <__hi0bits>
 80069de:	f1c0 0020 	rsb	r0, r0, #32
 80069e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e4:	4418      	add	r0, r3
 80069e6:	f010 001f 	ands.w	r0, r0, #31
 80069ea:	d071      	beq.n	8006ad0 <_dtoa_r+0x8f8>
 80069ec:	f1c0 0320 	rsb	r3, r0, #32
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	dd65      	ble.n	8006ac0 <_dtoa_r+0x8e8>
 80069f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f6:	f1c0 001c 	rsb	r0, r0, #28
 80069fa:	4403      	add	r3, r0
 80069fc:	4480      	add	r8, r0
 80069fe:	4406      	add	r6, r0
 8006a00:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a02:	f1b8 0f00 	cmp.w	r8, #0
 8006a06:	dd05      	ble.n	8006a14 <_dtoa_r+0x83c>
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4642      	mov	r2, r8
 8006a0c:	4658      	mov	r0, fp
 8006a0e:	f000 fcb5 	bl	800737c <__lshift>
 8006a12:	4681      	mov	r9, r0
 8006a14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dd05      	ble.n	8006a26 <_dtoa_r+0x84e>
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f000 fcac 	bl	800737c <__lshift>
 8006a24:	4604      	mov	r4, r0
 8006a26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d053      	beq.n	8006ad4 <_dtoa_r+0x8fc>
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	4648      	mov	r0, r9
 8006a30:	f000 fd10 	bl	8007454 <__mcmp>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	da4d      	bge.n	8006ad4 <_dtoa_r+0x8fc>
 8006a38:	1e7b      	subs	r3, r7, #1
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	9304      	str	r3, [sp, #16]
 8006a3e:	220a      	movs	r2, #10
 8006a40:	2300      	movs	r3, #0
 8006a42:	4658      	mov	r0, fp
 8006a44:	f000 faf0 	bl	8007028 <__multadd>
 8006a48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a4a:	4681      	mov	r9, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 816c 	beq.w	8006d2a <_dtoa_r+0xb52>
 8006a52:	2300      	movs	r3, #0
 8006a54:	4629      	mov	r1, r5
 8006a56:	220a      	movs	r2, #10
 8006a58:	4658      	mov	r0, fp
 8006a5a:	f000 fae5 	bl	8007028 <__multadd>
 8006a5e:	9b08      	ldr	r3, [sp, #32]
 8006a60:	4605      	mov	r5, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dc61      	bgt.n	8006b2a <_dtoa_r+0x952>
 8006a66:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	dc3b      	bgt.n	8006ae4 <_dtoa_r+0x90c>
 8006a6c:	e05d      	b.n	8006b2a <_dtoa_r+0x952>
 8006a6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a70:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a74:	e746      	b.n	8006904 <_dtoa_r+0x72c>
 8006a76:	9b07      	ldr	r3, [sp, #28]
 8006a78:	1e5c      	subs	r4, r3, #1
 8006a7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	bfbf      	itttt	lt
 8006a80:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a82:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006a84:	1ae3      	sublt	r3, r4, r3
 8006a86:	18d2      	addlt	r2, r2, r3
 8006a88:	bfa8      	it	ge
 8006a8a:	1b1c      	subge	r4, r3, r4
 8006a8c:	9b07      	ldr	r3, [sp, #28]
 8006a8e:	bfbe      	ittt	lt
 8006a90:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a92:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a94:	2400      	movlt	r4, #0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bfb5      	itete	lt
 8006a9a:	eba8 0603 	sublt.w	r6, r8, r3
 8006a9e:	4646      	movge	r6, r8
 8006aa0:	2300      	movlt	r3, #0
 8006aa2:	9b07      	ldrge	r3, [sp, #28]
 8006aa4:	e730      	b.n	8006908 <_dtoa_r+0x730>
 8006aa6:	4646      	mov	r6, r8
 8006aa8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aaa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006aac:	e735      	b.n	800691a <_dtoa_r+0x742>
 8006aae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ab0:	e75c      	b.n	800696c <_dtoa_r+0x794>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e788      	b.n	80069c8 <_dtoa_r+0x7f0>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	e786      	b.n	80069c8 <_dtoa_r+0x7f0>
 8006aba:	2300      	movs	r3, #0
 8006abc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006abe:	e788      	b.n	80069d2 <_dtoa_r+0x7fa>
 8006ac0:	d09f      	beq.n	8006a02 <_dtoa_r+0x82a>
 8006ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac4:	331c      	adds	r3, #28
 8006ac6:	441a      	add	r2, r3
 8006ac8:	4498      	add	r8, r3
 8006aca:	441e      	add	r6, r3
 8006acc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ace:	e798      	b.n	8006a02 <_dtoa_r+0x82a>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	e7f6      	b.n	8006ac2 <_dtoa_r+0x8ea>
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	9704      	str	r7, [sp, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	dc20      	bgt.n	8006b1e <_dtoa_r+0x946>
 8006adc:	9308      	str	r3, [sp, #32]
 8006ade:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	dd1e      	ble.n	8006b22 <_dtoa_r+0x94a>
 8006ae4:	9b08      	ldr	r3, [sp, #32]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f47f aebc 	bne.w	8006864 <_dtoa_r+0x68c>
 8006aec:	4621      	mov	r1, r4
 8006aee:	2205      	movs	r2, #5
 8006af0:	4658      	mov	r0, fp
 8006af2:	f000 fa99 	bl	8007028 <__multadd>
 8006af6:	4601      	mov	r1, r0
 8006af8:	4604      	mov	r4, r0
 8006afa:	4648      	mov	r0, r9
 8006afc:	f000 fcaa 	bl	8007454 <__mcmp>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f77f aeaf 	ble.w	8006864 <_dtoa_r+0x68c>
 8006b06:	2331      	movs	r3, #49	@ 0x31
 8006b08:	4656      	mov	r6, sl
 8006b0a:	f806 3b01 	strb.w	r3, [r6], #1
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	3301      	adds	r3, #1
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	e6aa      	b.n	800686c <_dtoa_r+0x694>
 8006b16:	9c07      	ldr	r4, [sp, #28]
 8006b18:	9704      	str	r7, [sp, #16]
 8006b1a:	4625      	mov	r5, r4
 8006b1c:	e7f3      	b.n	8006b06 <_dtoa_r+0x92e>
 8006b1e:	9b07      	ldr	r3, [sp, #28]
 8006b20:	9308      	str	r3, [sp, #32]
 8006b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8104 	beq.w	8006d32 <_dtoa_r+0xb5a>
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	dd05      	ble.n	8006b3a <_dtoa_r+0x962>
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4632      	mov	r2, r6
 8006b32:	4658      	mov	r0, fp
 8006b34:	f000 fc22 	bl	800737c <__lshift>
 8006b38:	4605      	mov	r5, r0
 8006b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d05a      	beq.n	8006bf6 <_dtoa_r+0xa1e>
 8006b40:	4658      	mov	r0, fp
 8006b42:	6869      	ldr	r1, [r5, #4]
 8006b44:	f000 fa0e 	bl	8006f64 <_Balloc>
 8006b48:	4606      	mov	r6, r0
 8006b4a:	b928      	cbnz	r0, 8006b58 <_dtoa_r+0x980>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b52:	4b83      	ldr	r3, [pc, #524]	@ (8006d60 <_dtoa_r+0xb88>)
 8006b54:	f7ff bb54 	b.w	8006200 <_dtoa_r+0x28>
 8006b58:	692a      	ldr	r2, [r5, #16]
 8006b5a:	f105 010c 	add.w	r1, r5, #12
 8006b5e:	3202      	adds	r2, #2
 8006b60:	0092      	lsls	r2, r2, #2
 8006b62:	300c      	adds	r0, #12
 8006b64:	f000 fffa 	bl	8007b5c <memcpy>
 8006b68:	2201      	movs	r2, #1
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4658      	mov	r0, fp
 8006b6e:	f000 fc05 	bl	800737c <__lshift>
 8006b72:	462f      	mov	r7, r5
 8006b74:	4605      	mov	r5, r0
 8006b76:	f10a 0301 	add.w	r3, sl, #1
 8006b7a:	9307      	str	r3, [sp, #28]
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	4453      	add	r3, sl
 8006b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b82:	9b02      	ldr	r3, [sp, #8]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b8a:	9b07      	ldr	r3, [sp, #28]
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	4648      	mov	r0, r9
 8006b92:	9302      	str	r3, [sp, #8]
 8006b94:	f7ff fa95 	bl	80060c2 <quorem>
 8006b98:	4639      	mov	r1, r7
 8006b9a:	9008      	str	r0, [sp, #32]
 8006b9c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ba0:	4648      	mov	r0, r9
 8006ba2:	f000 fc57 	bl	8007454 <__mcmp>
 8006ba6:	462a      	mov	r2, r5
 8006ba8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006baa:	4621      	mov	r1, r4
 8006bac:	4658      	mov	r0, fp
 8006bae:	f000 fc6d 	bl	800748c <__mdiff>
 8006bb2:	68c2      	ldr	r2, [r0, #12]
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	bb02      	cbnz	r2, 8006bfa <_dtoa_r+0xa22>
 8006bb8:	4601      	mov	r1, r0
 8006bba:	4648      	mov	r0, r9
 8006bbc:	f000 fc4a 	bl	8007454 <__mcmp>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4658      	mov	r0, fp
 8006bc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006bc8:	f000 fa0c 	bl	8006fe4 <_Bfree>
 8006bcc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006bd0:	9e07      	ldr	r6, [sp, #28]
 8006bd2:	ea43 0102 	orr.w	r1, r3, r2
 8006bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd8:	4319      	orrs	r1, r3
 8006bda:	d110      	bne.n	8006bfe <_dtoa_r+0xa26>
 8006bdc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006be0:	d029      	beq.n	8006c36 <_dtoa_r+0xa5e>
 8006be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dd02      	ble.n	8006bee <_dtoa_r+0xa16>
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bee:	9b02      	ldr	r3, [sp, #8]
 8006bf0:	f883 8000 	strb.w	r8, [r3]
 8006bf4:	e63b      	b.n	800686e <_dtoa_r+0x696>
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	e7bb      	b.n	8006b72 <_dtoa_r+0x99a>
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	e7e1      	b.n	8006bc2 <_dtoa_r+0x9ea>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	db04      	blt.n	8006c0e <_dtoa_r+0xa36>
 8006c04:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006c06:	430b      	orrs	r3, r1
 8006c08:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	d120      	bne.n	8006c50 <_dtoa_r+0xa78>
 8006c0e:	2a00      	cmp	r2, #0
 8006c10:	dded      	ble.n	8006bee <_dtoa_r+0xa16>
 8006c12:	4649      	mov	r1, r9
 8006c14:	2201      	movs	r2, #1
 8006c16:	4658      	mov	r0, fp
 8006c18:	f000 fbb0 	bl	800737c <__lshift>
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4681      	mov	r9, r0
 8006c20:	f000 fc18 	bl	8007454 <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	dc03      	bgt.n	8006c30 <_dtoa_r+0xa58>
 8006c28:	d1e1      	bne.n	8006bee <_dtoa_r+0xa16>
 8006c2a:	f018 0f01 	tst.w	r8, #1
 8006c2e:	d0de      	beq.n	8006bee <_dtoa_r+0xa16>
 8006c30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c34:	d1d8      	bne.n	8006be8 <_dtoa_r+0xa10>
 8006c36:	2339      	movs	r3, #57	@ 0x39
 8006c38:	9a02      	ldr	r2, [sp, #8]
 8006c3a:	7013      	strb	r3, [r2, #0]
 8006c3c:	4633      	mov	r3, r6
 8006c3e:	461e      	mov	r6, r3
 8006c40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	2a39      	cmp	r2, #57	@ 0x39
 8006c48:	d052      	beq.n	8006cf0 <_dtoa_r+0xb18>
 8006c4a:	3201      	adds	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	e60e      	b.n	800686e <_dtoa_r+0x696>
 8006c50:	2a00      	cmp	r2, #0
 8006c52:	dd07      	ble.n	8006c64 <_dtoa_r+0xa8c>
 8006c54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c58:	d0ed      	beq.n	8006c36 <_dtoa_r+0xa5e>
 8006c5a:	9a02      	ldr	r2, [sp, #8]
 8006c5c:	f108 0301 	add.w	r3, r8, #1
 8006c60:	7013      	strb	r3, [r2, #0]
 8006c62:	e604      	b.n	800686e <_dtoa_r+0x696>
 8006c64:	9b07      	ldr	r3, [sp, #28]
 8006c66:	9a07      	ldr	r2, [sp, #28]
 8006c68:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d028      	beq.n	8006cc4 <_dtoa_r+0xaec>
 8006c72:	4649      	mov	r1, r9
 8006c74:	2300      	movs	r3, #0
 8006c76:	220a      	movs	r2, #10
 8006c78:	4658      	mov	r0, fp
 8006c7a:	f000 f9d5 	bl	8007028 <__multadd>
 8006c7e:	42af      	cmp	r7, r5
 8006c80:	4681      	mov	r9, r0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	f04f 020a 	mov.w	r2, #10
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	4658      	mov	r0, fp
 8006c8e:	d107      	bne.n	8006ca0 <_dtoa_r+0xac8>
 8006c90:	f000 f9ca 	bl	8007028 <__multadd>
 8006c94:	4607      	mov	r7, r0
 8006c96:	4605      	mov	r5, r0
 8006c98:	9b07      	ldr	r3, [sp, #28]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	9307      	str	r3, [sp, #28]
 8006c9e:	e774      	b.n	8006b8a <_dtoa_r+0x9b2>
 8006ca0:	f000 f9c2 	bl	8007028 <__multadd>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	220a      	movs	r2, #10
 8006cac:	4658      	mov	r0, fp
 8006cae:	f000 f9bb 	bl	8007028 <__multadd>
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	e7f0      	b.n	8006c98 <_dtoa_r+0xac0>
 8006cb6:	9b08      	ldr	r3, [sp, #32]
 8006cb8:	2700      	movs	r7, #0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	bfcc      	ite	gt
 8006cbe:	461e      	movgt	r6, r3
 8006cc0:	2601      	movle	r6, #1
 8006cc2:	4456      	add	r6, sl
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	4658      	mov	r0, fp
 8006cca:	f000 fb57 	bl	800737c <__lshift>
 8006cce:	4621      	mov	r1, r4
 8006cd0:	4681      	mov	r9, r0
 8006cd2:	f000 fbbf 	bl	8007454 <__mcmp>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	dcb0      	bgt.n	8006c3c <_dtoa_r+0xa64>
 8006cda:	d102      	bne.n	8006ce2 <_dtoa_r+0xb0a>
 8006cdc:	f018 0f01 	tst.w	r8, #1
 8006ce0:	d1ac      	bne.n	8006c3c <_dtoa_r+0xa64>
 8006ce2:	4633      	mov	r3, r6
 8006ce4:	461e      	mov	r6, r3
 8006ce6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cea:	2a30      	cmp	r2, #48	@ 0x30
 8006cec:	d0fa      	beq.n	8006ce4 <_dtoa_r+0xb0c>
 8006cee:	e5be      	b.n	800686e <_dtoa_r+0x696>
 8006cf0:	459a      	cmp	sl, r3
 8006cf2:	d1a4      	bne.n	8006c3e <_dtoa_r+0xa66>
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	9304      	str	r3, [sp, #16]
 8006cfa:	2331      	movs	r3, #49	@ 0x31
 8006cfc:	f88a 3000 	strb.w	r3, [sl]
 8006d00:	e5b5      	b.n	800686e <_dtoa_r+0x696>
 8006d02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d04:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d64 <_dtoa_r+0xb8c>
 8006d08:	b11b      	cbz	r3, 8006d12 <_dtoa_r+0xb3a>
 8006d0a:	f10a 0308 	add.w	r3, sl, #8
 8006d0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	4650      	mov	r0, sl
 8006d14:	b017      	add	sp, #92	@ 0x5c
 8006d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f77f ae3d 	ble.w	800699c <_dtoa_r+0x7c4>
 8006d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d24:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d26:	2001      	movs	r0, #1
 8006d28:	e65b      	b.n	80069e2 <_dtoa_r+0x80a>
 8006d2a:	9b08      	ldr	r3, [sp, #32]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f77f aed6 	ble.w	8006ade <_dtoa_r+0x906>
 8006d32:	4656      	mov	r6, sl
 8006d34:	4621      	mov	r1, r4
 8006d36:	4648      	mov	r0, r9
 8006d38:	f7ff f9c3 	bl	80060c2 <quorem>
 8006d3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	f806 8b01 	strb.w	r8, [r6], #1
 8006d46:	eba6 020a 	sub.w	r2, r6, sl
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	ddb3      	ble.n	8006cb6 <_dtoa_r+0xade>
 8006d4e:	4649      	mov	r1, r9
 8006d50:	2300      	movs	r3, #0
 8006d52:	220a      	movs	r2, #10
 8006d54:	4658      	mov	r0, fp
 8006d56:	f000 f967 	bl	8007028 <__multadd>
 8006d5a:	4681      	mov	r9, r0
 8006d5c:	e7ea      	b.n	8006d34 <_dtoa_r+0xb5c>
 8006d5e:	bf00      	nop
 8006d60:	080080a8 	.word	0x080080a8
 8006d64:	0800802c 	.word	0x0800802c

08006d68 <_free_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	d040      	beq.n	8006df2 <_free_r+0x8a>
 8006d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d74:	1f0c      	subs	r4, r1, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	bfb8      	it	lt
 8006d7a:	18e4      	addlt	r4, r4, r3
 8006d7c:	f000 f8e6 	bl	8006f4c <__malloc_lock>
 8006d80:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <_free_r+0x8c>)
 8006d82:	6813      	ldr	r3, [r2, #0]
 8006d84:	b933      	cbnz	r3, 8006d94 <_free_r+0x2c>
 8006d86:	6063      	str	r3, [r4, #4]
 8006d88:	6014      	str	r4, [r2, #0]
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d90:	f000 b8e2 	b.w	8006f58 <__malloc_unlock>
 8006d94:	42a3      	cmp	r3, r4
 8006d96:	d908      	bls.n	8006daa <_free_r+0x42>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	1821      	adds	r1, r4, r0
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	bf01      	itttt	eq
 8006da0:	6819      	ldreq	r1, [r3, #0]
 8006da2:	685b      	ldreq	r3, [r3, #4]
 8006da4:	1809      	addeq	r1, r1, r0
 8006da6:	6021      	streq	r1, [r4, #0]
 8006da8:	e7ed      	b.n	8006d86 <_free_r+0x1e>
 8006daa:	461a      	mov	r2, r3
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	b10b      	cbz	r3, 8006db4 <_free_r+0x4c>
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d9fa      	bls.n	8006daa <_free_r+0x42>
 8006db4:	6811      	ldr	r1, [r2, #0]
 8006db6:	1850      	adds	r0, r2, r1
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d10b      	bne.n	8006dd4 <_free_r+0x6c>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	4401      	add	r1, r0
 8006dc0:	1850      	adds	r0, r2, r1
 8006dc2:	4283      	cmp	r3, r0
 8006dc4:	6011      	str	r1, [r2, #0]
 8006dc6:	d1e0      	bne.n	8006d8a <_free_r+0x22>
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	4408      	add	r0, r1
 8006dce:	6010      	str	r0, [r2, #0]
 8006dd0:	6053      	str	r3, [r2, #4]
 8006dd2:	e7da      	b.n	8006d8a <_free_r+0x22>
 8006dd4:	d902      	bls.n	8006ddc <_free_r+0x74>
 8006dd6:	230c      	movs	r3, #12
 8006dd8:	602b      	str	r3, [r5, #0]
 8006dda:	e7d6      	b.n	8006d8a <_free_r+0x22>
 8006ddc:	6820      	ldr	r0, [r4, #0]
 8006dde:	1821      	adds	r1, r4, r0
 8006de0:	428b      	cmp	r3, r1
 8006de2:	bf01      	itttt	eq
 8006de4:	6819      	ldreq	r1, [r3, #0]
 8006de6:	685b      	ldreq	r3, [r3, #4]
 8006de8:	1809      	addeq	r1, r1, r0
 8006dea:	6021      	streq	r1, [r4, #0]
 8006dec:	6063      	str	r3, [r4, #4]
 8006dee:	6054      	str	r4, [r2, #4]
 8006df0:	e7cb      	b.n	8006d8a <_free_r+0x22>
 8006df2:	bd38      	pop	{r3, r4, r5, pc}
 8006df4:	200005dc 	.word	0x200005dc

08006df8 <malloc>:
 8006df8:	4b02      	ldr	r3, [pc, #8]	@ (8006e04 <malloc+0xc>)
 8006dfa:	4601      	mov	r1, r0
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	f000 b825 	b.w	8006e4c <_malloc_r>
 8006e02:	bf00      	nop
 8006e04:	20000018 	.word	0x20000018

08006e08 <sbrk_aligned>:
 8006e08:	b570      	push	{r4, r5, r6, lr}
 8006e0a:	4e0f      	ldr	r6, [pc, #60]	@ (8006e48 <sbrk_aligned+0x40>)
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	6831      	ldr	r1, [r6, #0]
 8006e10:	4605      	mov	r5, r0
 8006e12:	b911      	cbnz	r1, 8006e1a <sbrk_aligned+0x12>
 8006e14:	f000 fe92 	bl	8007b3c <_sbrk_r>
 8006e18:	6030      	str	r0, [r6, #0]
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 fe8d 	bl	8007b3c <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d103      	bne.n	8006e2e <sbrk_aligned+0x26>
 8006e26:	f04f 34ff 	mov.w	r4, #4294967295
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	1cc4      	adds	r4, r0, #3
 8006e30:	f024 0403 	bic.w	r4, r4, #3
 8006e34:	42a0      	cmp	r0, r4
 8006e36:	d0f8      	beq.n	8006e2a <sbrk_aligned+0x22>
 8006e38:	1a21      	subs	r1, r4, r0
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	f000 fe7e 	bl	8007b3c <_sbrk_r>
 8006e40:	3001      	adds	r0, #1
 8006e42:	d1f2      	bne.n	8006e2a <sbrk_aligned+0x22>
 8006e44:	e7ef      	b.n	8006e26 <sbrk_aligned+0x1e>
 8006e46:	bf00      	nop
 8006e48:	200005d8 	.word	0x200005d8

08006e4c <_malloc_r>:
 8006e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e50:	1ccd      	adds	r5, r1, #3
 8006e52:	f025 0503 	bic.w	r5, r5, #3
 8006e56:	3508      	adds	r5, #8
 8006e58:	2d0c      	cmp	r5, #12
 8006e5a:	bf38      	it	cc
 8006e5c:	250c      	movcc	r5, #12
 8006e5e:	2d00      	cmp	r5, #0
 8006e60:	4606      	mov	r6, r0
 8006e62:	db01      	blt.n	8006e68 <_malloc_r+0x1c>
 8006e64:	42a9      	cmp	r1, r5
 8006e66:	d904      	bls.n	8006e72 <_malloc_r+0x26>
 8006e68:	230c      	movs	r3, #12
 8006e6a:	6033      	str	r3, [r6, #0]
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f48 <_malloc_r+0xfc>
 8006e76:	f000 f869 	bl	8006f4c <__malloc_lock>
 8006e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7e:	461c      	mov	r4, r3
 8006e80:	bb44      	cbnz	r4, 8006ed4 <_malloc_r+0x88>
 8006e82:	4629      	mov	r1, r5
 8006e84:	4630      	mov	r0, r6
 8006e86:	f7ff ffbf 	bl	8006e08 <sbrk_aligned>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	d158      	bne.n	8006f42 <_malloc_r+0xf6>
 8006e90:	f8d8 4000 	ldr.w	r4, [r8]
 8006e94:	4627      	mov	r7, r4
 8006e96:	2f00      	cmp	r7, #0
 8006e98:	d143      	bne.n	8006f22 <_malloc_r+0xd6>
 8006e9a:	2c00      	cmp	r4, #0
 8006e9c:	d04b      	beq.n	8006f36 <_malloc_r+0xea>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	4639      	mov	r1, r7
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	eb04 0903 	add.w	r9, r4, r3
 8006ea8:	f000 fe48 	bl	8007b3c <_sbrk_r>
 8006eac:	4581      	cmp	r9, r0
 8006eae:	d142      	bne.n	8006f36 <_malloc_r+0xea>
 8006eb0:	6821      	ldr	r1, [r4, #0]
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	1a6d      	subs	r5, r5, r1
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7ff ffa6 	bl	8006e08 <sbrk_aligned>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d03a      	beq.n	8006f36 <_malloc_r+0xea>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	442b      	add	r3, r5
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	bb62      	cbnz	r2, 8006f28 <_malloc_r+0xdc>
 8006ece:	f8c8 7000 	str.w	r7, [r8]
 8006ed2:	e00f      	b.n	8006ef4 <_malloc_r+0xa8>
 8006ed4:	6822      	ldr	r2, [r4, #0]
 8006ed6:	1b52      	subs	r2, r2, r5
 8006ed8:	d420      	bmi.n	8006f1c <_malloc_r+0xd0>
 8006eda:	2a0b      	cmp	r2, #11
 8006edc:	d917      	bls.n	8006f0e <_malloc_r+0xc2>
 8006ede:	1961      	adds	r1, r4, r5
 8006ee0:	42a3      	cmp	r3, r4
 8006ee2:	6025      	str	r5, [r4, #0]
 8006ee4:	bf18      	it	ne
 8006ee6:	6059      	strne	r1, [r3, #4]
 8006ee8:	6863      	ldr	r3, [r4, #4]
 8006eea:	bf08      	it	eq
 8006eec:	f8c8 1000 	streq.w	r1, [r8]
 8006ef0:	5162      	str	r2, [r4, r5]
 8006ef2:	604b      	str	r3, [r1, #4]
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f000 f82f 	bl	8006f58 <__malloc_unlock>
 8006efa:	f104 000b 	add.w	r0, r4, #11
 8006efe:	1d23      	adds	r3, r4, #4
 8006f00:	f020 0007 	bic.w	r0, r0, #7
 8006f04:	1ac2      	subs	r2, r0, r3
 8006f06:	bf1c      	itt	ne
 8006f08:	1a1b      	subne	r3, r3, r0
 8006f0a:	50a3      	strne	r3, [r4, r2]
 8006f0c:	e7af      	b.n	8006e6e <_malloc_r+0x22>
 8006f0e:	6862      	ldr	r2, [r4, #4]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	bf0c      	ite	eq
 8006f14:	f8c8 2000 	streq.w	r2, [r8]
 8006f18:	605a      	strne	r2, [r3, #4]
 8006f1a:	e7eb      	b.n	8006ef4 <_malloc_r+0xa8>
 8006f1c:	4623      	mov	r3, r4
 8006f1e:	6864      	ldr	r4, [r4, #4]
 8006f20:	e7ae      	b.n	8006e80 <_malloc_r+0x34>
 8006f22:	463c      	mov	r4, r7
 8006f24:	687f      	ldr	r7, [r7, #4]
 8006f26:	e7b6      	b.n	8006e96 <_malloc_r+0x4a>
 8006f28:	461a      	mov	r2, r3
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	42a3      	cmp	r3, r4
 8006f2e:	d1fb      	bne.n	8006f28 <_malloc_r+0xdc>
 8006f30:	2300      	movs	r3, #0
 8006f32:	6053      	str	r3, [r2, #4]
 8006f34:	e7de      	b.n	8006ef4 <_malloc_r+0xa8>
 8006f36:	230c      	movs	r3, #12
 8006f38:	4630      	mov	r0, r6
 8006f3a:	6033      	str	r3, [r6, #0]
 8006f3c:	f000 f80c 	bl	8006f58 <__malloc_unlock>
 8006f40:	e794      	b.n	8006e6c <_malloc_r+0x20>
 8006f42:	6005      	str	r5, [r0, #0]
 8006f44:	e7d6      	b.n	8006ef4 <_malloc_r+0xa8>
 8006f46:	bf00      	nop
 8006f48:	200005dc 	.word	0x200005dc

08006f4c <__malloc_lock>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	@ (8006f54 <__malloc_lock+0x8>)
 8006f4e:	f7ff b8a8 	b.w	80060a2 <__retarget_lock_acquire_recursive>
 8006f52:	bf00      	nop
 8006f54:	200005d4 	.word	0x200005d4

08006f58 <__malloc_unlock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_unlock+0x8>)
 8006f5a:	f7ff b8a3 	b.w	80060a4 <__retarget_lock_release_recursive>
 8006f5e:	bf00      	nop
 8006f60:	200005d4 	.word	0x200005d4

08006f64 <_Balloc>:
 8006f64:	b570      	push	{r4, r5, r6, lr}
 8006f66:	69c6      	ldr	r6, [r0, #28]
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	b976      	cbnz	r6, 8006f8c <_Balloc+0x28>
 8006f6e:	2010      	movs	r0, #16
 8006f70:	f7ff ff42 	bl	8006df8 <malloc>
 8006f74:	4602      	mov	r2, r0
 8006f76:	61e0      	str	r0, [r4, #28]
 8006f78:	b920      	cbnz	r0, 8006f84 <_Balloc+0x20>
 8006f7a:	216b      	movs	r1, #107	@ 0x6b
 8006f7c:	4b17      	ldr	r3, [pc, #92]	@ (8006fdc <_Balloc+0x78>)
 8006f7e:	4818      	ldr	r0, [pc, #96]	@ (8006fe0 <_Balloc+0x7c>)
 8006f80:	f000 fdfa 	bl	8007b78 <__assert_func>
 8006f84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f88:	6006      	str	r6, [r0, #0]
 8006f8a:	60c6      	str	r6, [r0, #12]
 8006f8c:	69e6      	ldr	r6, [r4, #28]
 8006f8e:	68f3      	ldr	r3, [r6, #12]
 8006f90:	b183      	cbz	r3, 8006fb4 <_Balloc+0x50>
 8006f92:	69e3      	ldr	r3, [r4, #28]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f9a:	b9b8      	cbnz	r0, 8006fcc <_Balloc+0x68>
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	fa01 f605 	lsl.w	r6, r1, r5
 8006fa2:	1d72      	adds	r2, r6, #5
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	0092      	lsls	r2, r2, #2
 8006fa8:	f000 fe04 	bl	8007bb4 <_calloc_r>
 8006fac:	b160      	cbz	r0, 8006fc8 <_Balloc+0x64>
 8006fae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fb2:	e00e      	b.n	8006fd2 <_Balloc+0x6e>
 8006fb4:	2221      	movs	r2, #33	@ 0x21
 8006fb6:	2104      	movs	r1, #4
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fdfb 	bl	8007bb4 <_calloc_r>
 8006fbe:	69e3      	ldr	r3, [r4, #28]
 8006fc0:	60f0      	str	r0, [r6, #12]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e4      	bne.n	8006f92 <_Balloc+0x2e>
 8006fc8:	2000      	movs	r0, #0
 8006fca:	bd70      	pop	{r4, r5, r6, pc}
 8006fcc:	6802      	ldr	r2, [r0, #0]
 8006fce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fd8:	e7f7      	b.n	8006fca <_Balloc+0x66>
 8006fda:	bf00      	nop
 8006fdc:	08008039 	.word	0x08008039
 8006fe0:	080080b9 	.word	0x080080b9

08006fe4 <_Bfree>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	69c6      	ldr	r6, [r0, #28]
 8006fe8:	4605      	mov	r5, r0
 8006fea:	460c      	mov	r4, r1
 8006fec:	b976      	cbnz	r6, 800700c <_Bfree+0x28>
 8006fee:	2010      	movs	r0, #16
 8006ff0:	f7ff ff02 	bl	8006df8 <malloc>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	61e8      	str	r0, [r5, #28]
 8006ff8:	b920      	cbnz	r0, 8007004 <_Bfree+0x20>
 8006ffa:	218f      	movs	r1, #143	@ 0x8f
 8006ffc:	4b08      	ldr	r3, [pc, #32]	@ (8007020 <_Bfree+0x3c>)
 8006ffe:	4809      	ldr	r0, [pc, #36]	@ (8007024 <_Bfree+0x40>)
 8007000:	f000 fdba 	bl	8007b78 <__assert_func>
 8007004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007008:	6006      	str	r6, [r0, #0]
 800700a:	60c6      	str	r6, [r0, #12]
 800700c:	b13c      	cbz	r4, 800701e <_Bfree+0x3a>
 800700e:	69eb      	ldr	r3, [r5, #28]
 8007010:	6862      	ldr	r2, [r4, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007018:	6021      	str	r1, [r4, #0]
 800701a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	08008039 	.word	0x08008039
 8007024:	080080b9 	.word	0x080080b9

08007028 <__multadd>:
 8007028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702c:	4607      	mov	r7, r0
 800702e:	460c      	mov	r4, r1
 8007030:	461e      	mov	r6, r3
 8007032:	2000      	movs	r0, #0
 8007034:	690d      	ldr	r5, [r1, #16]
 8007036:	f101 0c14 	add.w	ip, r1, #20
 800703a:	f8dc 3000 	ldr.w	r3, [ip]
 800703e:	3001      	adds	r0, #1
 8007040:	b299      	uxth	r1, r3
 8007042:	fb02 6101 	mla	r1, r2, r1, r6
 8007046:	0c1e      	lsrs	r6, r3, #16
 8007048:	0c0b      	lsrs	r3, r1, #16
 800704a:	fb02 3306 	mla	r3, r2, r6, r3
 800704e:	b289      	uxth	r1, r1
 8007050:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007054:	4285      	cmp	r5, r0
 8007056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800705a:	f84c 1b04 	str.w	r1, [ip], #4
 800705e:	dcec      	bgt.n	800703a <__multadd+0x12>
 8007060:	b30e      	cbz	r6, 80070a6 <__multadd+0x7e>
 8007062:	68a3      	ldr	r3, [r4, #8]
 8007064:	42ab      	cmp	r3, r5
 8007066:	dc19      	bgt.n	800709c <__multadd+0x74>
 8007068:	6861      	ldr	r1, [r4, #4]
 800706a:	4638      	mov	r0, r7
 800706c:	3101      	adds	r1, #1
 800706e:	f7ff ff79 	bl	8006f64 <_Balloc>
 8007072:	4680      	mov	r8, r0
 8007074:	b928      	cbnz	r0, 8007082 <__multadd+0x5a>
 8007076:	4602      	mov	r2, r0
 8007078:	21ba      	movs	r1, #186	@ 0xba
 800707a:	4b0c      	ldr	r3, [pc, #48]	@ (80070ac <__multadd+0x84>)
 800707c:	480c      	ldr	r0, [pc, #48]	@ (80070b0 <__multadd+0x88>)
 800707e:	f000 fd7b 	bl	8007b78 <__assert_func>
 8007082:	6922      	ldr	r2, [r4, #16]
 8007084:	f104 010c 	add.w	r1, r4, #12
 8007088:	3202      	adds	r2, #2
 800708a:	0092      	lsls	r2, r2, #2
 800708c:	300c      	adds	r0, #12
 800708e:	f000 fd65 	bl	8007b5c <memcpy>
 8007092:	4621      	mov	r1, r4
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ffa5 	bl	8006fe4 <_Bfree>
 800709a:	4644      	mov	r4, r8
 800709c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070a0:	3501      	adds	r5, #1
 80070a2:	615e      	str	r6, [r3, #20]
 80070a4:	6125      	str	r5, [r4, #16]
 80070a6:	4620      	mov	r0, r4
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ac:	080080a8 	.word	0x080080a8
 80070b0:	080080b9 	.word	0x080080b9

080070b4 <__hi0bits>:
 80070b4:	4603      	mov	r3, r0
 80070b6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070ba:	bf3a      	itte	cc
 80070bc:	0403      	lslcc	r3, r0, #16
 80070be:	2010      	movcc	r0, #16
 80070c0:	2000      	movcs	r0, #0
 80070c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070c6:	bf3c      	itt	cc
 80070c8:	021b      	lslcc	r3, r3, #8
 80070ca:	3008      	addcc	r0, #8
 80070cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d0:	bf3c      	itt	cc
 80070d2:	011b      	lslcc	r3, r3, #4
 80070d4:	3004      	addcc	r0, #4
 80070d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070da:	bf3c      	itt	cc
 80070dc:	009b      	lslcc	r3, r3, #2
 80070de:	3002      	addcc	r0, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db05      	blt.n	80070f0 <__hi0bits+0x3c>
 80070e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070e8:	f100 0001 	add.w	r0, r0, #1
 80070ec:	bf08      	it	eq
 80070ee:	2020      	moveq	r0, #32
 80070f0:	4770      	bx	lr

080070f2 <__lo0bits>:
 80070f2:	6803      	ldr	r3, [r0, #0]
 80070f4:	4602      	mov	r2, r0
 80070f6:	f013 0007 	ands.w	r0, r3, #7
 80070fa:	d00b      	beq.n	8007114 <__lo0bits+0x22>
 80070fc:	07d9      	lsls	r1, r3, #31
 80070fe:	d421      	bmi.n	8007144 <__lo0bits+0x52>
 8007100:	0798      	lsls	r0, r3, #30
 8007102:	bf49      	itett	mi
 8007104:	085b      	lsrmi	r3, r3, #1
 8007106:	089b      	lsrpl	r3, r3, #2
 8007108:	2001      	movmi	r0, #1
 800710a:	6013      	strmi	r3, [r2, #0]
 800710c:	bf5c      	itt	pl
 800710e:	2002      	movpl	r0, #2
 8007110:	6013      	strpl	r3, [r2, #0]
 8007112:	4770      	bx	lr
 8007114:	b299      	uxth	r1, r3
 8007116:	b909      	cbnz	r1, 800711c <__lo0bits+0x2a>
 8007118:	2010      	movs	r0, #16
 800711a:	0c1b      	lsrs	r3, r3, #16
 800711c:	b2d9      	uxtb	r1, r3
 800711e:	b909      	cbnz	r1, 8007124 <__lo0bits+0x32>
 8007120:	3008      	adds	r0, #8
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	0719      	lsls	r1, r3, #28
 8007126:	bf04      	itt	eq
 8007128:	091b      	lsreq	r3, r3, #4
 800712a:	3004      	addeq	r0, #4
 800712c:	0799      	lsls	r1, r3, #30
 800712e:	bf04      	itt	eq
 8007130:	089b      	lsreq	r3, r3, #2
 8007132:	3002      	addeq	r0, #2
 8007134:	07d9      	lsls	r1, r3, #31
 8007136:	d403      	bmi.n	8007140 <__lo0bits+0x4e>
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	f100 0001 	add.w	r0, r0, #1
 800713e:	d003      	beq.n	8007148 <__lo0bits+0x56>
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	4770      	bx	lr
 8007144:	2000      	movs	r0, #0
 8007146:	4770      	bx	lr
 8007148:	2020      	movs	r0, #32
 800714a:	4770      	bx	lr

0800714c <__i2b>:
 800714c:	b510      	push	{r4, lr}
 800714e:	460c      	mov	r4, r1
 8007150:	2101      	movs	r1, #1
 8007152:	f7ff ff07 	bl	8006f64 <_Balloc>
 8007156:	4602      	mov	r2, r0
 8007158:	b928      	cbnz	r0, 8007166 <__i2b+0x1a>
 800715a:	f240 1145 	movw	r1, #325	@ 0x145
 800715e:	4b04      	ldr	r3, [pc, #16]	@ (8007170 <__i2b+0x24>)
 8007160:	4804      	ldr	r0, [pc, #16]	@ (8007174 <__i2b+0x28>)
 8007162:	f000 fd09 	bl	8007b78 <__assert_func>
 8007166:	2301      	movs	r3, #1
 8007168:	6144      	str	r4, [r0, #20]
 800716a:	6103      	str	r3, [r0, #16]
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop
 8007170:	080080a8 	.word	0x080080a8
 8007174:	080080b9 	.word	0x080080b9

08007178 <__multiply>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	4614      	mov	r4, r2
 800717e:	690a      	ldr	r2, [r1, #16]
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	460f      	mov	r7, r1
 8007184:	429a      	cmp	r2, r3
 8007186:	bfa2      	ittt	ge
 8007188:	4623      	movge	r3, r4
 800718a:	460c      	movge	r4, r1
 800718c:	461f      	movge	r7, r3
 800718e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007192:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007196:	68a3      	ldr	r3, [r4, #8]
 8007198:	6861      	ldr	r1, [r4, #4]
 800719a:	eb0a 0609 	add.w	r6, sl, r9
 800719e:	42b3      	cmp	r3, r6
 80071a0:	b085      	sub	sp, #20
 80071a2:	bfb8      	it	lt
 80071a4:	3101      	addlt	r1, #1
 80071a6:	f7ff fedd 	bl	8006f64 <_Balloc>
 80071aa:	b930      	cbnz	r0, 80071ba <__multiply+0x42>
 80071ac:	4602      	mov	r2, r0
 80071ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071b2:	4b43      	ldr	r3, [pc, #268]	@ (80072c0 <__multiply+0x148>)
 80071b4:	4843      	ldr	r0, [pc, #268]	@ (80072c4 <__multiply+0x14c>)
 80071b6:	f000 fcdf 	bl	8007b78 <__assert_func>
 80071ba:	f100 0514 	add.w	r5, r0, #20
 80071be:	462b      	mov	r3, r5
 80071c0:	2200      	movs	r2, #0
 80071c2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071c6:	4543      	cmp	r3, r8
 80071c8:	d321      	bcc.n	800720e <__multiply+0x96>
 80071ca:	f107 0114 	add.w	r1, r7, #20
 80071ce:	f104 0214 	add.w	r2, r4, #20
 80071d2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071d6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071da:	9302      	str	r3, [sp, #8]
 80071dc:	1b13      	subs	r3, r2, r4
 80071de:	3b15      	subs	r3, #21
 80071e0:	f023 0303 	bic.w	r3, r3, #3
 80071e4:	3304      	adds	r3, #4
 80071e6:	f104 0715 	add.w	r7, r4, #21
 80071ea:	42ba      	cmp	r2, r7
 80071ec:	bf38      	it	cc
 80071ee:	2304      	movcc	r3, #4
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	9103      	str	r1, [sp, #12]
 80071f6:	428b      	cmp	r3, r1
 80071f8:	d80c      	bhi.n	8007214 <__multiply+0x9c>
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	dd03      	ble.n	8007206 <__multiply+0x8e>
 80071fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007202:	2b00      	cmp	r3, #0
 8007204:	d05a      	beq.n	80072bc <__multiply+0x144>
 8007206:	6106      	str	r6, [r0, #16]
 8007208:	b005      	add	sp, #20
 800720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720e:	f843 2b04 	str.w	r2, [r3], #4
 8007212:	e7d8      	b.n	80071c6 <__multiply+0x4e>
 8007214:	f8b1 a000 	ldrh.w	sl, [r1]
 8007218:	f1ba 0f00 	cmp.w	sl, #0
 800721c:	d023      	beq.n	8007266 <__multiply+0xee>
 800721e:	46a9      	mov	r9, r5
 8007220:	f04f 0c00 	mov.w	ip, #0
 8007224:	f104 0e14 	add.w	lr, r4, #20
 8007228:	f85e 7b04 	ldr.w	r7, [lr], #4
 800722c:	f8d9 3000 	ldr.w	r3, [r9]
 8007230:	fa1f fb87 	uxth.w	fp, r7
 8007234:	b29b      	uxth	r3, r3
 8007236:	fb0a 330b 	mla	r3, sl, fp, r3
 800723a:	4463      	add	r3, ip
 800723c:	f8d9 c000 	ldr.w	ip, [r9]
 8007240:	0c3f      	lsrs	r7, r7, #16
 8007242:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007246:	fb0a c707 	mla	r7, sl, r7, ip
 800724a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800724e:	b29b      	uxth	r3, r3
 8007250:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007254:	4572      	cmp	r2, lr
 8007256:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800725a:	f849 3b04 	str.w	r3, [r9], #4
 800725e:	d8e3      	bhi.n	8007228 <__multiply+0xb0>
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	f845 c003 	str.w	ip, [r5, r3]
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	3104      	adds	r1, #4
 800726a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800726e:	f1b9 0f00 	cmp.w	r9, #0
 8007272:	d021      	beq.n	80072b8 <__multiply+0x140>
 8007274:	46ae      	mov	lr, r5
 8007276:	f04f 0a00 	mov.w	sl, #0
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	f104 0c14 	add.w	ip, r4, #20
 8007280:	f8bc b000 	ldrh.w	fp, [ip]
 8007284:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007288:	b29b      	uxth	r3, r3
 800728a:	fb09 770b 	mla	r7, r9, fp, r7
 800728e:	4457      	add	r7, sl
 8007290:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007294:	f84e 3b04 	str.w	r3, [lr], #4
 8007298:	f85c 3b04 	ldr.w	r3, [ip], #4
 800729c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072a0:	f8be 3000 	ldrh.w	r3, [lr]
 80072a4:	4562      	cmp	r2, ip
 80072a6:	fb09 330a 	mla	r3, r9, sl, r3
 80072aa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072b2:	d8e5      	bhi.n	8007280 <__multiply+0x108>
 80072b4:	9f01      	ldr	r7, [sp, #4]
 80072b6:	51eb      	str	r3, [r5, r7]
 80072b8:	3504      	adds	r5, #4
 80072ba:	e79a      	b.n	80071f2 <__multiply+0x7a>
 80072bc:	3e01      	subs	r6, #1
 80072be:	e79c      	b.n	80071fa <__multiply+0x82>
 80072c0:	080080a8 	.word	0x080080a8
 80072c4:	080080b9 	.word	0x080080b9

080072c8 <__pow5mult>:
 80072c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072cc:	4615      	mov	r5, r2
 80072ce:	f012 0203 	ands.w	r2, r2, #3
 80072d2:	4607      	mov	r7, r0
 80072d4:	460e      	mov	r6, r1
 80072d6:	d007      	beq.n	80072e8 <__pow5mult+0x20>
 80072d8:	4c25      	ldr	r4, [pc, #148]	@ (8007370 <__pow5mult+0xa8>)
 80072da:	3a01      	subs	r2, #1
 80072dc:	2300      	movs	r3, #0
 80072de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072e2:	f7ff fea1 	bl	8007028 <__multadd>
 80072e6:	4606      	mov	r6, r0
 80072e8:	10ad      	asrs	r5, r5, #2
 80072ea:	d03d      	beq.n	8007368 <__pow5mult+0xa0>
 80072ec:	69fc      	ldr	r4, [r7, #28]
 80072ee:	b97c      	cbnz	r4, 8007310 <__pow5mult+0x48>
 80072f0:	2010      	movs	r0, #16
 80072f2:	f7ff fd81 	bl	8006df8 <malloc>
 80072f6:	4602      	mov	r2, r0
 80072f8:	61f8      	str	r0, [r7, #28]
 80072fa:	b928      	cbnz	r0, 8007308 <__pow5mult+0x40>
 80072fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007300:	4b1c      	ldr	r3, [pc, #112]	@ (8007374 <__pow5mult+0xac>)
 8007302:	481d      	ldr	r0, [pc, #116]	@ (8007378 <__pow5mult+0xb0>)
 8007304:	f000 fc38 	bl	8007b78 <__assert_func>
 8007308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800730c:	6004      	str	r4, [r0, #0]
 800730e:	60c4      	str	r4, [r0, #12]
 8007310:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007318:	b94c      	cbnz	r4, 800732e <__pow5mult+0x66>
 800731a:	f240 2171 	movw	r1, #625	@ 0x271
 800731e:	4638      	mov	r0, r7
 8007320:	f7ff ff14 	bl	800714c <__i2b>
 8007324:	2300      	movs	r3, #0
 8007326:	4604      	mov	r4, r0
 8007328:	f8c8 0008 	str.w	r0, [r8, #8]
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	f04f 0900 	mov.w	r9, #0
 8007332:	07eb      	lsls	r3, r5, #31
 8007334:	d50a      	bpl.n	800734c <__pow5mult+0x84>
 8007336:	4631      	mov	r1, r6
 8007338:	4622      	mov	r2, r4
 800733a:	4638      	mov	r0, r7
 800733c:	f7ff ff1c 	bl	8007178 <__multiply>
 8007340:	4680      	mov	r8, r0
 8007342:	4631      	mov	r1, r6
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff fe4d 	bl	8006fe4 <_Bfree>
 800734a:	4646      	mov	r6, r8
 800734c:	106d      	asrs	r5, r5, #1
 800734e:	d00b      	beq.n	8007368 <__pow5mult+0xa0>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	b938      	cbnz	r0, 8007364 <__pow5mult+0x9c>
 8007354:	4622      	mov	r2, r4
 8007356:	4621      	mov	r1, r4
 8007358:	4638      	mov	r0, r7
 800735a:	f7ff ff0d 	bl	8007178 <__multiply>
 800735e:	6020      	str	r0, [r4, #0]
 8007360:	f8c0 9000 	str.w	r9, [r0]
 8007364:	4604      	mov	r4, r0
 8007366:	e7e4      	b.n	8007332 <__pow5mult+0x6a>
 8007368:	4630      	mov	r0, r6
 800736a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736e:	bf00      	nop
 8007370:	08008114 	.word	0x08008114
 8007374:	08008039 	.word	0x08008039
 8007378:	080080b9 	.word	0x080080b9

0800737c <__lshift>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	460c      	mov	r4, r1
 8007382:	4607      	mov	r7, r0
 8007384:	4691      	mov	r9, r2
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	6849      	ldr	r1, [r1, #4]
 800738a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800738e:	68a3      	ldr	r3, [r4, #8]
 8007390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007394:	f108 0601 	add.w	r6, r8, #1
 8007398:	42b3      	cmp	r3, r6
 800739a:	db0b      	blt.n	80073b4 <__lshift+0x38>
 800739c:	4638      	mov	r0, r7
 800739e:	f7ff fde1 	bl	8006f64 <_Balloc>
 80073a2:	4605      	mov	r5, r0
 80073a4:	b948      	cbnz	r0, 80073ba <__lshift+0x3e>
 80073a6:	4602      	mov	r2, r0
 80073a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073ac:	4b27      	ldr	r3, [pc, #156]	@ (800744c <__lshift+0xd0>)
 80073ae:	4828      	ldr	r0, [pc, #160]	@ (8007450 <__lshift+0xd4>)
 80073b0:	f000 fbe2 	bl	8007b78 <__assert_func>
 80073b4:	3101      	adds	r1, #1
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	e7ee      	b.n	8007398 <__lshift+0x1c>
 80073ba:	2300      	movs	r3, #0
 80073bc:	f100 0114 	add.w	r1, r0, #20
 80073c0:	f100 0210 	add.w	r2, r0, #16
 80073c4:	4618      	mov	r0, r3
 80073c6:	4553      	cmp	r3, sl
 80073c8:	db33      	blt.n	8007432 <__lshift+0xb6>
 80073ca:	6920      	ldr	r0, [r4, #16]
 80073cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073d0:	f104 0314 	add.w	r3, r4, #20
 80073d4:	f019 091f 	ands.w	r9, r9, #31
 80073d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073e0:	d02b      	beq.n	800743a <__lshift+0xbe>
 80073e2:	468a      	mov	sl, r1
 80073e4:	2200      	movs	r2, #0
 80073e6:	f1c9 0e20 	rsb	lr, r9, #32
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	fa00 f009 	lsl.w	r0, r0, r9
 80073f0:	4310      	orrs	r0, r2
 80073f2:	f84a 0b04 	str.w	r0, [sl], #4
 80073f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fa:	459c      	cmp	ip, r3
 80073fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007400:	d8f3      	bhi.n	80073ea <__lshift+0x6e>
 8007402:	ebac 0304 	sub.w	r3, ip, r4
 8007406:	3b15      	subs	r3, #21
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	3304      	adds	r3, #4
 800740e:	f104 0015 	add.w	r0, r4, #21
 8007412:	4584      	cmp	ip, r0
 8007414:	bf38      	it	cc
 8007416:	2304      	movcc	r3, #4
 8007418:	50ca      	str	r2, [r1, r3]
 800741a:	b10a      	cbz	r2, 8007420 <__lshift+0xa4>
 800741c:	f108 0602 	add.w	r6, r8, #2
 8007420:	3e01      	subs	r6, #1
 8007422:	4638      	mov	r0, r7
 8007424:	4621      	mov	r1, r4
 8007426:	612e      	str	r6, [r5, #16]
 8007428:	f7ff fddc 	bl	8006fe4 <_Bfree>
 800742c:	4628      	mov	r0, r5
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	f842 0f04 	str.w	r0, [r2, #4]!
 8007436:	3301      	adds	r3, #1
 8007438:	e7c5      	b.n	80073c6 <__lshift+0x4a>
 800743a:	3904      	subs	r1, #4
 800743c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007440:	459c      	cmp	ip, r3
 8007442:	f841 2f04 	str.w	r2, [r1, #4]!
 8007446:	d8f9      	bhi.n	800743c <__lshift+0xc0>
 8007448:	e7ea      	b.n	8007420 <__lshift+0xa4>
 800744a:	bf00      	nop
 800744c:	080080a8 	.word	0x080080a8
 8007450:	080080b9 	.word	0x080080b9

08007454 <__mcmp>:
 8007454:	4603      	mov	r3, r0
 8007456:	690a      	ldr	r2, [r1, #16]
 8007458:	6900      	ldr	r0, [r0, #16]
 800745a:	b530      	push	{r4, r5, lr}
 800745c:	1a80      	subs	r0, r0, r2
 800745e:	d10e      	bne.n	800747e <__mcmp+0x2a>
 8007460:	3314      	adds	r3, #20
 8007462:	3114      	adds	r1, #20
 8007464:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800746c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007470:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007474:	4295      	cmp	r5, r2
 8007476:	d003      	beq.n	8007480 <__mcmp+0x2c>
 8007478:	d205      	bcs.n	8007486 <__mcmp+0x32>
 800747a:	f04f 30ff 	mov.w	r0, #4294967295
 800747e:	bd30      	pop	{r4, r5, pc}
 8007480:	42a3      	cmp	r3, r4
 8007482:	d3f3      	bcc.n	800746c <__mcmp+0x18>
 8007484:	e7fb      	b.n	800747e <__mcmp+0x2a>
 8007486:	2001      	movs	r0, #1
 8007488:	e7f9      	b.n	800747e <__mcmp+0x2a>
	...

0800748c <__mdiff>:
 800748c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4689      	mov	r9, r1
 8007492:	4606      	mov	r6, r0
 8007494:	4611      	mov	r1, r2
 8007496:	4648      	mov	r0, r9
 8007498:	4614      	mov	r4, r2
 800749a:	f7ff ffdb 	bl	8007454 <__mcmp>
 800749e:	1e05      	subs	r5, r0, #0
 80074a0:	d112      	bne.n	80074c8 <__mdiff+0x3c>
 80074a2:	4629      	mov	r1, r5
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fd5d 	bl	8006f64 <_Balloc>
 80074aa:	4602      	mov	r2, r0
 80074ac:	b928      	cbnz	r0, 80074ba <__mdiff+0x2e>
 80074ae:	f240 2137 	movw	r1, #567	@ 0x237
 80074b2:	4b3e      	ldr	r3, [pc, #248]	@ (80075ac <__mdiff+0x120>)
 80074b4:	483e      	ldr	r0, [pc, #248]	@ (80075b0 <__mdiff+0x124>)
 80074b6:	f000 fb5f 	bl	8007b78 <__assert_func>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074c0:	4610      	mov	r0, r2
 80074c2:	b003      	add	sp, #12
 80074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c8:	bfbc      	itt	lt
 80074ca:	464b      	movlt	r3, r9
 80074cc:	46a1      	movlt	r9, r4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074d4:	bfba      	itte	lt
 80074d6:	461c      	movlt	r4, r3
 80074d8:	2501      	movlt	r5, #1
 80074da:	2500      	movge	r5, #0
 80074dc:	f7ff fd42 	bl	8006f64 <_Balloc>
 80074e0:	4602      	mov	r2, r0
 80074e2:	b918      	cbnz	r0, 80074ec <__mdiff+0x60>
 80074e4:	f240 2145 	movw	r1, #581	@ 0x245
 80074e8:	4b30      	ldr	r3, [pc, #192]	@ (80075ac <__mdiff+0x120>)
 80074ea:	e7e3      	b.n	80074b4 <__mdiff+0x28>
 80074ec:	f100 0b14 	add.w	fp, r0, #20
 80074f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074f4:	f109 0310 	add.w	r3, r9, #16
 80074f8:	60c5      	str	r5, [r0, #12]
 80074fa:	f04f 0c00 	mov.w	ip, #0
 80074fe:	f109 0514 	add.w	r5, r9, #20
 8007502:	46d9      	mov	r9, fp
 8007504:	6926      	ldr	r6, [r4, #16]
 8007506:	f104 0e14 	add.w	lr, r4, #20
 800750a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800750e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	9b01      	ldr	r3, [sp, #4]
 8007516:	f85e 0b04 	ldr.w	r0, [lr], #4
 800751a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800751e:	b281      	uxth	r1, r0
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	fa1f f38a 	uxth.w	r3, sl
 8007526:	1a5b      	subs	r3, r3, r1
 8007528:	0c00      	lsrs	r0, r0, #16
 800752a:	4463      	add	r3, ip
 800752c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007530:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007534:	b29b      	uxth	r3, r3
 8007536:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800753a:	4576      	cmp	r6, lr
 800753c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007540:	f849 3b04 	str.w	r3, [r9], #4
 8007544:	d8e6      	bhi.n	8007514 <__mdiff+0x88>
 8007546:	1b33      	subs	r3, r6, r4
 8007548:	3b15      	subs	r3, #21
 800754a:	f023 0303 	bic.w	r3, r3, #3
 800754e:	3415      	adds	r4, #21
 8007550:	3304      	adds	r3, #4
 8007552:	42a6      	cmp	r6, r4
 8007554:	bf38      	it	cc
 8007556:	2304      	movcc	r3, #4
 8007558:	441d      	add	r5, r3
 800755a:	445b      	add	r3, fp
 800755c:	461e      	mov	r6, r3
 800755e:	462c      	mov	r4, r5
 8007560:	4544      	cmp	r4, r8
 8007562:	d30e      	bcc.n	8007582 <__mdiff+0xf6>
 8007564:	f108 0103 	add.w	r1, r8, #3
 8007568:	1b49      	subs	r1, r1, r5
 800756a:	f021 0103 	bic.w	r1, r1, #3
 800756e:	3d03      	subs	r5, #3
 8007570:	45a8      	cmp	r8, r5
 8007572:	bf38      	it	cc
 8007574:	2100      	movcc	r1, #0
 8007576:	440b      	add	r3, r1
 8007578:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800757c:	b199      	cbz	r1, 80075a6 <__mdiff+0x11a>
 800757e:	6117      	str	r7, [r2, #16]
 8007580:	e79e      	b.n	80074c0 <__mdiff+0x34>
 8007582:	46e6      	mov	lr, ip
 8007584:	f854 1b04 	ldr.w	r1, [r4], #4
 8007588:	fa1f fc81 	uxth.w	ip, r1
 800758c:	44f4      	add	ip, lr
 800758e:	0c08      	lsrs	r0, r1, #16
 8007590:	4471      	add	r1, lr
 8007592:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007596:	b289      	uxth	r1, r1
 8007598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800759c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075a0:	f846 1b04 	str.w	r1, [r6], #4
 80075a4:	e7dc      	b.n	8007560 <__mdiff+0xd4>
 80075a6:	3f01      	subs	r7, #1
 80075a8:	e7e6      	b.n	8007578 <__mdiff+0xec>
 80075aa:	bf00      	nop
 80075ac:	080080a8 	.word	0x080080a8
 80075b0:	080080b9 	.word	0x080080b9

080075b4 <__d2b>:
 80075b4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80075b8:	2101      	movs	r1, #1
 80075ba:	4690      	mov	r8, r2
 80075bc:	4699      	mov	r9, r3
 80075be:	9e08      	ldr	r6, [sp, #32]
 80075c0:	f7ff fcd0 	bl	8006f64 <_Balloc>
 80075c4:	4604      	mov	r4, r0
 80075c6:	b930      	cbnz	r0, 80075d6 <__d2b+0x22>
 80075c8:	4602      	mov	r2, r0
 80075ca:	f240 310f 	movw	r1, #783	@ 0x30f
 80075ce:	4b23      	ldr	r3, [pc, #140]	@ (800765c <__d2b+0xa8>)
 80075d0:	4823      	ldr	r0, [pc, #140]	@ (8007660 <__d2b+0xac>)
 80075d2:	f000 fad1 	bl	8007b78 <__assert_func>
 80075d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075de:	b10d      	cbz	r5, 80075e4 <__d2b+0x30>
 80075e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	f1b8 0300 	subs.w	r3, r8, #0
 80075ea:	d024      	beq.n	8007636 <__d2b+0x82>
 80075ec:	4668      	mov	r0, sp
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	f7ff fd7f 	bl	80070f2 <__lo0bits>
 80075f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075f8:	b1d8      	cbz	r0, 8007632 <__d2b+0x7e>
 80075fa:	f1c0 0320 	rsb	r3, r0, #32
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	430b      	orrs	r3, r1
 8007604:	40c2      	lsrs	r2, r0
 8007606:	6163      	str	r3, [r4, #20]
 8007608:	9201      	str	r2, [sp, #4]
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf0c      	ite	eq
 8007610:	2201      	moveq	r2, #1
 8007612:	2202      	movne	r2, #2
 8007614:	61a3      	str	r3, [r4, #24]
 8007616:	6122      	str	r2, [r4, #16]
 8007618:	b1ad      	cbz	r5, 8007646 <__d2b+0x92>
 800761a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800761e:	4405      	add	r5, r0
 8007620:	6035      	str	r5, [r6, #0]
 8007622:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007628:	6018      	str	r0, [r3, #0]
 800762a:	4620      	mov	r0, r4
 800762c:	b002      	add	sp, #8
 800762e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007632:	6161      	str	r1, [r4, #20]
 8007634:	e7e9      	b.n	800760a <__d2b+0x56>
 8007636:	a801      	add	r0, sp, #4
 8007638:	f7ff fd5b 	bl	80070f2 <__lo0bits>
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	6163      	str	r3, [r4, #20]
 8007642:	3020      	adds	r0, #32
 8007644:	e7e7      	b.n	8007616 <__d2b+0x62>
 8007646:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800764a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800764e:	6030      	str	r0, [r6, #0]
 8007650:	6918      	ldr	r0, [r3, #16]
 8007652:	f7ff fd2f 	bl	80070b4 <__hi0bits>
 8007656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800765a:	e7e4      	b.n	8007626 <__d2b+0x72>
 800765c:	080080a8 	.word	0x080080a8
 8007660:	080080b9 	.word	0x080080b9

08007664 <__sfputc_r>:
 8007664:	6893      	ldr	r3, [r2, #8]
 8007666:	b410      	push	{r4}
 8007668:	3b01      	subs	r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	6093      	str	r3, [r2, #8]
 800766e:	da07      	bge.n	8007680 <__sfputc_r+0x1c>
 8007670:	6994      	ldr	r4, [r2, #24]
 8007672:	42a3      	cmp	r3, r4
 8007674:	db01      	blt.n	800767a <__sfputc_r+0x16>
 8007676:	290a      	cmp	r1, #10
 8007678:	d102      	bne.n	8007680 <__sfputc_r+0x1c>
 800767a:	bc10      	pop	{r4}
 800767c:	f7fe bbff 	b.w	8005e7e <__swbuf_r>
 8007680:	6813      	ldr	r3, [r2, #0]
 8007682:	1c58      	adds	r0, r3, #1
 8007684:	6010      	str	r0, [r2, #0]
 8007686:	7019      	strb	r1, [r3, #0]
 8007688:	4608      	mov	r0, r1
 800768a:	bc10      	pop	{r4}
 800768c:	4770      	bx	lr

0800768e <__sfputs_r>:
 800768e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007690:	4606      	mov	r6, r0
 8007692:	460f      	mov	r7, r1
 8007694:	4614      	mov	r4, r2
 8007696:	18d5      	adds	r5, r2, r3
 8007698:	42ac      	cmp	r4, r5
 800769a:	d101      	bne.n	80076a0 <__sfputs_r+0x12>
 800769c:	2000      	movs	r0, #0
 800769e:	e007      	b.n	80076b0 <__sfputs_r+0x22>
 80076a0:	463a      	mov	r2, r7
 80076a2:	4630      	mov	r0, r6
 80076a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a8:	f7ff ffdc 	bl	8007664 <__sfputc_r>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d1f3      	bne.n	8007698 <__sfputs_r+0xa>
 80076b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076b4 <_vfiprintf_r>:
 80076b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	460d      	mov	r5, r1
 80076ba:	4614      	mov	r4, r2
 80076bc:	4698      	mov	r8, r3
 80076be:	4606      	mov	r6, r0
 80076c0:	b09d      	sub	sp, #116	@ 0x74
 80076c2:	b118      	cbz	r0, 80076cc <_vfiprintf_r+0x18>
 80076c4:	6a03      	ldr	r3, [r0, #32]
 80076c6:	b90b      	cbnz	r3, 80076cc <_vfiprintf_r+0x18>
 80076c8:	f7fe faf0 	bl	8005cac <__sinit>
 80076cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ce:	07d9      	lsls	r1, r3, #31
 80076d0:	d405      	bmi.n	80076de <_vfiprintf_r+0x2a>
 80076d2:	89ab      	ldrh	r3, [r5, #12]
 80076d4:	059a      	lsls	r2, r3, #22
 80076d6:	d402      	bmi.n	80076de <_vfiprintf_r+0x2a>
 80076d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076da:	f7fe fce2 	bl	80060a2 <__retarget_lock_acquire_recursive>
 80076de:	89ab      	ldrh	r3, [r5, #12]
 80076e0:	071b      	lsls	r3, r3, #28
 80076e2:	d501      	bpl.n	80076e8 <_vfiprintf_r+0x34>
 80076e4:	692b      	ldr	r3, [r5, #16]
 80076e6:	b99b      	cbnz	r3, 8007710 <_vfiprintf_r+0x5c>
 80076e8:	4629      	mov	r1, r5
 80076ea:	4630      	mov	r0, r6
 80076ec:	f7fe fc06 	bl	8005efc <__swsetup_r>
 80076f0:	b170      	cbz	r0, 8007710 <_vfiprintf_r+0x5c>
 80076f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076f4:	07dc      	lsls	r4, r3, #31
 80076f6:	d504      	bpl.n	8007702 <_vfiprintf_r+0x4e>
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	b01d      	add	sp, #116	@ 0x74
 80076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	0598      	lsls	r0, r3, #22
 8007706:	d4f7      	bmi.n	80076f8 <_vfiprintf_r+0x44>
 8007708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800770a:	f7fe fccb 	bl	80060a4 <__retarget_lock_release_recursive>
 800770e:	e7f3      	b.n	80076f8 <_vfiprintf_r+0x44>
 8007710:	2300      	movs	r3, #0
 8007712:	9309      	str	r3, [sp, #36]	@ 0x24
 8007714:	2320      	movs	r3, #32
 8007716:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800771a:	2330      	movs	r3, #48	@ 0x30
 800771c:	f04f 0901 	mov.w	r9, #1
 8007720:	f8cd 800c 	str.w	r8, [sp, #12]
 8007724:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80078d0 <_vfiprintf_r+0x21c>
 8007728:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800772c:	4623      	mov	r3, r4
 800772e:	469a      	mov	sl, r3
 8007730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007734:	b10a      	cbz	r2, 800773a <_vfiprintf_r+0x86>
 8007736:	2a25      	cmp	r2, #37	@ 0x25
 8007738:	d1f9      	bne.n	800772e <_vfiprintf_r+0x7a>
 800773a:	ebba 0b04 	subs.w	fp, sl, r4
 800773e:	d00b      	beq.n	8007758 <_vfiprintf_r+0xa4>
 8007740:	465b      	mov	r3, fp
 8007742:	4622      	mov	r2, r4
 8007744:	4629      	mov	r1, r5
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ffa1 	bl	800768e <__sfputs_r>
 800774c:	3001      	adds	r0, #1
 800774e:	f000 80a7 	beq.w	80078a0 <_vfiprintf_r+0x1ec>
 8007752:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007754:	445a      	add	r2, fp
 8007756:	9209      	str	r2, [sp, #36]	@ 0x24
 8007758:	f89a 3000 	ldrb.w	r3, [sl]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 809f 	beq.w	80078a0 <_vfiprintf_r+0x1ec>
 8007762:	2300      	movs	r3, #0
 8007764:	f04f 32ff 	mov.w	r2, #4294967295
 8007768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800776c:	f10a 0a01 	add.w	sl, sl, #1
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	9307      	str	r3, [sp, #28]
 8007774:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007778:	931a      	str	r3, [sp, #104]	@ 0x68
 800777a:	4654      	mov	r4, sl
 800777c:	2205      	movs	r2, #5
 800777e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007782:	4853      	ldr	r0, [pc, #332]	@ (80078d0 <_vfiprintf_r+0x21c>)
 8007784:	f7fe fc8f 	bl	80060a6 <memchr>
 8007788:	9a04      	ldr	r2, [sp, #16]
 800778a:	b9d8      	cbnz	r0, 80077c4 <_vfiprintf_r+0x110>
 800778c:	06d1      	lsls	r1, r2, #27
 800778e:	bf44      	itt	mi
 8007790:	2320      	movmi	r3, #32
 8007792:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007796:	0713      	lsls	r3, r2, #28
 8007798:	bf44      	itt	mi
 800779a:	232b      	movmi	r3, #43	@ 0x2b
 800779c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a0:	f89a 3000 	ldrb.w	r3, [sl]
 80077a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077a6:	d015      	beq.n	80077d4 <_vfiprintf_r+0x120>
 80077a8:	4654      	mov	r4, sl
 80077aa:	2000      	movs	r0, #0
 80077ac:	f04f 0c0a 	mov.w	ip, #10
 80077b0:	9a07      	ldr	r2, [sp, #28]
 80077b2:	4621      	mov	r1, r4
 80077b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b8:	3b30      	subs	r3, #48	@ 0x30
 80077ba:	2b09      	cmp	r3, #9
 80077bc:	d94b      	bls.n	8007856 <_vfiprintf_r+0x1a2>
 80077be:	b1b0      	cbz	r0, 80077ee <_vfiprintf_r+0x13a>
 80077c0:	9207      	str	r2, [sp, #28]
 80077c2:	e014      	b.n	80077ee <_vfiprintf_r+0x13a>
 80077c4:	eba0 0308 	sub.w	r3, r0, r8
 80077c8:	fa09 f303 	lsl.w	r3, r9, r3
 80077cc:	4313      	orrs	r3, r2
 80077ce:	46a2      	mov	sl, r4
 80077d0:	9304      	str	r3, [sp, #16]
 80077d2:	e7d2      	b.n	800777a <_vfiprintf_r+0xc6>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	1d19      	adds	r1, r3, #4
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	9103      	str	r1, [sp, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	bfbb      	ittet	lt
 80077e0:	425b      	neglt	r3, r3
 80077e2:	f042 0202 	orrlt.w	r2, r2, #2
 80077e6:	9307      	strge	r3, [sp, #28]
 80077e8:	9307      	strlt	r3, [sp, #28]
 80077ea:	bfb8      	it	lt
 80077ec:	9204      	strlt	r2, [sp, #16]
 80077ee:	7823      	ldrb	r3, [r4, #0]
 80077f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80077f2:	d10a      	bne.n	800780a <_vfiprintf_r+0x156>
 80077f4:	7863      	ldrb	r3, [r4, #1]
 80077f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077f8:	d132      	bne.n	8007860 <_vfiprintf_r+0x1ac>
 80077fa:	9b03      	ldr	r3, [sp, #12]
 80077fc:	3402      	adds	r4, #2
 80077fe:	1d1a      	adds	r2, r3, #4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	9203      	str	r2, [sp, #12]
 8007804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80078d4 <_vfiprintf_r+0x220>
 800780e:	2203      	movs	r2, #3
 8007810:	4650      	mov	r0, sl
 8007812:	7821      	ldrb	r1, [r4, #0]
 8007814:	f7fe fc47 	bl	80060a6 <memchr>
 8007818:	b138      	cbz	r0, 800782a <_vfiprintf_r+0x176>
 800781a:	2240      	movs	r2, #64	@ 0x40
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	eba0 000a 	sub.w	r0, r0, sl
 8007822:	4082      	lsls	r2, r0
 8007824:	4313      	orrs	r3, r2
 8007826:	3401      	adds	r4, #1
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782e:	2206      	movs	r2, #6
 8007830:	4829      	ldr	r0, [pc, #164]	@ (80078d8 <_vfiprintf_r+0x224>)
 8007832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007836:	f7fe fc36 	bl	80060a6 <memchr>
 800783a:	2800      	cmp	r0, #0
 800783c:	d03f      	beq.n	80078be <_vfiprintf_r+0x20a>
 800783e:	4b27      	ldr	r3, [pc, #156]	@ (80078dc <_vfiprintf_r+0x228>)
 8007840:	bb1b      	cbnz	r3, 800788a <_vfiprintf_r+0x1d6>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	3307      	adds	r3, #7
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	3308      	adds	r3, #8
 800784c:	9303      	str	r3, [sp, #12]
 800784e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007850:	443b      	add	r3, r7
 8007852:	9309      	str	r3, [sp, #36]	@ 0x24
 8007854:	e76a      	b.n	800772c <_vfiprintf_r+0x78>
 8007856:	460c      	mov	r4, r1
 8007858:	2001      	movs	r0, #1
 800785a:	fb0c 3202 	mla	r2, ip, r2, r3
 800785e:	e7a8      	b.n	80077b2 <_vfiprintf_r+0xfe>
 8007860:	2300      	movs	r3, #0
 8007862:	f04f 0c0a 	mov.w	ip, #10
 8007866:	4619      	mov	r1, r3
 8007868:	3401      	adds	r4, #1
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	4620      	mov	r0, r4
 800786e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007872:	3a30      	subs	r2, #48	@ 0x30
 8007874:	2a09      	cmp	r2, #9
 8007876:	d903      	bls.n	8007880 <_vfiprintf_r+0x1cc>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0c6      	beq.n	800780a <_vfiprintf_r+0x156>
 800787c:	9105      	str	r1, [sp, #20]
 800787e:	e7c4      	b.n	800780a <_vfiprintf_r+0x156>
 8007880:	4604      	mov	r4, r0
 8007882:	2301      	movs	r3, #1
 8007884:	fb0c 2101 	mla	r1, ip, r1, r2
 8007888:	e7f0      	b.n	800786c <_vfiprintf_r+0x1b8>
 800788a:	ab03      	add	r3, sp, #12
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	462a      	mov	r2, r5
 8007890:	4630      	mov	r0, r6
 8007892:	4b13      	ldr	r3, [pc, #76]	@ (80078e0 <_vfiprintf_r+0x22c>)
 8007894:	a904      	add	r1, sp, #16
 8007896:	f7fd fdbf 	bl	8005418 <_printf_float>
 800789a:	4607      	mov	r7, r0
 800789c:	1c78      	adds	r0, r7, #1
 800789e:	d1d6      	bne.n	800784e <_vfiprintf_r+0x19a>
 80078a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	d405      	bmi.n	80078b2 <_vfiprintf_r+0x1fe>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_vfiprintf_r+0x1fe>
 80078ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ae:	f7fe fbf9 	bl	80060a4 <__retarget_lock_release_recursive>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	065b      	lsls	r3, r3, #25
 80078b6:	f53f af1f 	bmi.w	80076f8 <_vfiprintf_r+0x44>
 80078ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078bc:	e71e      	b.n	80076fc <_vfiprintf_r+0x48>
 80078be:	ab03      	add	r3, sp, #12
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	462a      	mov	r2, r5
 80078c4:	4630      	mov	r0, r6
 80078c6:	4b06      	ldr	r3, [pc, #24]	@ (80078e0 <_vfiprintf_r+0x22c>)
 80078c8:	a904      	add	r1, sp, #16
 80078ca:	f7fe f843 	bl	8005954 <_printf_i>
 80078ce:	e7e4      	b.n	800789a <_vfiprintf_r+0x1e6>
 80078d0:	08008210 	.word	0x08008210
 80078d4:	08008216 	.word	0x08008216
 80078d8:	0800821a 	.word	0x0800821a
 80078dc:	08005419 	.word	0x08005419
 80078e0:	0800768f 	.word	0x0800768f

080078e4 <__sflush_r>:
 80078e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	0716      	lsls	r6, r2, #28
 80078ec:	4605      	mov	r5, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	d454      	bmi.n	800799c <__sflush_r+0xb8>
 80078f2:	684b      	ldr	r3, [r1, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dc02      	bgt.n	80078fe <__sflush_r+0x1a>
 80078f8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	dd48      	ble.n	8007990 <__sflush_r+0xac>
 80078fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007900:	2e00      	cmp	r6, #0
 8007902:	d045      	beq.n	8007990 <__sflush_r+0xac>
 8007904:	2300      	movs	r3, #0
 8007906:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800790a:	682f      	ldr	r7, [r5, #0]
 800790c:	6a21      	ldr	r1, [r4, #32]
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	d030      	beq.n	8007974 <__sflush_r+0x90>
 8007912:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	0759      	lsls	r1, r3, #29
 8007918:	d505      	bpl.n	8007926 <__sflush_r+0x42>
 800791a:	6863      	ldr	r3, [r4, #4]
 800791c:	1ad2      	subs	r2, r2, r3
 800791e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007920:	b10b      	cbz	r3, 8007926 <__sflush_r+0x42>
 8007922:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007924:	1ad2      	subs	r2, r2, r3
 8007926:	2300      	movs	r3, #0
 8007928:	4628      	mov	r0, r5
 800792a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800792c:	6a21      	ldr	r1, [r4, #32]
 800792e:	47b0      	blx	r6
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	89a3      	ldrh	r3, [r4, #12]
 8007934:	d106      	bne.n	8007944 <__sflush_r+0x60>
 8007936:	6829      	ldr	r1, [r5, #0]
 8007938:	291d      	cmp	r1, #29
 800793a:	d82b      	bhi.n	8007994 <__sflush_r+0xb0>
 800793c:	4a28      	ldr	r2, [pc, #160]	@ (80079e0 <__sflush_r+0xfc>)
 800793e:	410a      	asrs	r2, r1
 8007940:	07d6      	lsls	r6, r2, #31
 8007942:	d427      	bmi.n	8007994 <__sflush_r+0xb0>
 8007944:	2200      	movs	r2, #0
 8007946:	6062      	str	r2, [r4, #4]
 8007948:	6922      	ldr	r2, [r4, #16]
 800794a:	04d9      	lsls	r1, r3, #19
 800794c:	6022      	str	r2, [r4, #0]
 800794e:	d504      	bpl.n	800795a <__sflush_r+0x76>
 8007950:	1c42      	adds	r2, r0, #1
 8007952:	d101      	bne.n	8007958 <__sflush_r+0x74>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b903      	cbnz	r3, 800795a <__sflush_r+0x76>
 8007958:	6560      	str	r0, [r4, #84]	@ 0x54
 800795a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800795c:	602f      	str	r7, [r5, #0]
 800795e:	b1b9      	cbz	r1, 8007990 <__sflush_r+0xac>
 8007960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007964:	4299      	cmp	r1, r3
 8007966:	d002      	beq.n	800796e <__sflush_r+0x8a>
 8007968:	4628      	mov	r0, r5
 800796a:	f7ff f9fd 	bl	8006d68 <_free_r>
 800796e:	2300      	movs	r3, #0
 8007970:	6363      	str	r3, [r4, #52]	@ 0x34
 8007972:	e00d      	b.n	8007990 <__sflush_r+0xac>
 8007974:	2301      	movs	r3, #1
 8007976:	4628      	mov	r0, r5
 8007978:	47b0      	blx	r6
 800797a:	4602      	mov	r2, r0
 800797c:	1c50      	adds	r0, r2, #1
 800797e:	d1c9      	bne.n	8007914 <__sflush_r+0x30>
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0c6      	beq.n	8007914 <__sflush_r+0x30>
 8007986:	2b1d      	cmp	r3, #29
 8007988:	d001      	beq.n	800798e <__sflush_r+0xaa>
 800798a:	2b16      	cmp	r3, #22
 800798c:	d11d      	bne.n	80079ca <__sflush_r+0xe6>
 800798e:	602f      	str	r7, [r5, #0]
 8007990:	2000      	movs	r0, #0
 8007992:	e021      	b.n	80079d8 <__sflush_r+0xf4>
 8007994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007998:	b21b      	sxth	r3, r3
 800799a:	e01a      	b.n	80079d2 <__sflush_r+0xee>
 800799c:	690f      	ldr	r7, [r1, #16]
 800799e:	2f00      	cmp	r7, #0
 80079a0:	d0f6      	beq.n	8007990 <__sflush_r+0xac>
 80079a2:	0793      	lsls	r3, r2, #30
 80079a4:	bf18      	it	ne
 80079a6:	2300      	movne	r3, #0
 80079a8:	680e      	ldr	r6, [r1, #0]
 80079aa:	bf08      	it	eq
 80079ac:	694b      	ldreq	r3, [r1, #20]
 80079ae:	1bf6      	subs	r6, r6, r7
 80079b0:	600f      	str	r7, [r1, #0]
 80079b2:	608b      	str	r3, [r1, #8]
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	ddeb      	ble.n	8007990 <__sflush_r+0xac>
 80079b8:	4633      	mov	r3, r6
 80079ba:	463a      	mov	r2, r7
 80079bc:	4628      	mov	r0, r5
 80079be:	6a21      	ldr	r1, [r4, #32]
 80079c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80079c4:	47e0      	blx	ip
 80079c6:	2800      	cmp	r0, #0
 80079c8:	dc07      	bgt.n	80079da <__sflush_r+0xf6>
 80079ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079d2:	f04f 30ff 	mov.w	r0, #4294967295
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079da:	4407      	add	r7, r0
 80079dc:	1a36      	subs	r6, r6, r0
 80079de:	e7e9      	b.n	80079b4 <__sflush_r+0xd0>
 80079e0:	dfbffffe 	.word	0xdfbffffe

080079e4 <_fflush_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	4605      	mov	r5, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	b913      	cbnz	r3, 80079f4 <_fflush_r+0x10>
 80079ee:	2500      	movs	r5, #0
 80079f0:	4628      	mov	r0, r5
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	b118      	cbz	r0, 80079fe <_fflush_r+0x1a>
 80079f6:	6a03      	ldr	r3, [r0, #32]
 80079f8:	b90b      	cbnz	r3, 80079fe <_fflush_r+0x1a>
 80079fa:	f7fe f957 	bl	8005cac <__sinit>
 80079fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f3      	beq.n	80079ee <_fflush_r+0xa>
 8007a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a08:	07d0      	lsls	r0, r2, #31
 8007a0a:	d404      	bmi.n	8007a16 <_fflush_r+0x32>
 8007a0c:	0599      	lsls	r1, r3, #22
 8007a0e:	d402      	bmi.n	8007a16 <_fflush_r+0x32>
 8007a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a12:	f7fe fb46 	bl	80060a2 <__retarget_lock_acquire_recursive>
 8007a16:	4628      	mov	r0, r5
 8007a18:	4621      	mov	r1, r4
 8007a1a:	f7ff ff63 	bl	80078e4 <__sflush_r>
 8007a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a20:	4605      	mov	r5, r0
 8007a22:	07da      	lsls	r2, r3, #31
 8007a24:	d4e4      	bmi.n	80079f0 <_fflush_r+0xc>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	059b      	lsls	r3, r3, #22
 8007a2a:	d4e1      	bmi.n	80079f0 <_fflush_r+0xc>
 8007a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a2e:	f7fe fb39 	bl	80060a4 <__retarget_lock_release_recursive>
 8007a32:	e7dd      	b.n	80079f0 <_fflush_r+0xc>

08007a34 <__swhatbuf_r>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	460c      	mov	r4, r1
 8007a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3c:	4615      	mov	r5, r2
 8007a3e:	2900      	cmp	r1, #0
 8007a40:	461e      	mov	r6, r3
 8007a42:	b096      	sub	sp, #88	@ 0x58
 8007a44:	da0c      	bge.n	8007a60 <__swhatbuf_r+0x2c>
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	2100      	movs	r1, #0
 8007a4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a4e:	bf14      	ite	ne
 8007a50:	2340      	movne	r3, #64	@ 0x40
 8007a52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a56:	2000      	movs	r0, #0
 8007a58:	6031      	str	r1, [r6, #0]
 8007a5a:	602b      	str	r3, [r5, #0]
 8007a5c:	b016      	add	sp, #88	@ 0x58
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	466a      	mov	r2, sp
 8007a62:	f000 f849 	bl	8007af8 <_fstat_r>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	dbed      	blt.n	8007a46 <__swhatbuf_r+0x12>
 8007a6a:	9901      	ldr	r1, [sp, #4]
 8007a6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a74:	4259      	negs	r1, r3
 8007a76:	4159      	adcs	r1, r3
 8007a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a7c:	e7eb      	b.n	8007a56 <__swhatbuf_r+0x22>

08007a7e <__smakebuf_r>:
 8007a7e:	898b      	ldrh	r3, [r1, #12]
 8007a80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a82:	079d      	lsls	r5, r3, #30
 8007a84:	4606      	mov	r6, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	d507      	bpl.n	8007a9a <__smakebuf_r+0x1c>
 8007a8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a8e:	6023      	str	r3, [r4, #0]
 8007a90:	6123      	str	r3, [r4, #16]
 8007a92:	2301      	movs	r3, #1
 8007a94:	6163      	str	r3, [r4, #20]
 8007a96:	b003      	add	sp, #12
 8007a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9a:	466a      	mov	r2, sp
 8007a9c:	ab01      	add	r3, sp, #4
 8007a9e:	f7ff ffc9 	bl	8007a34 <__swhatbuf_r>
 8007aa2:	9f00      	ldr	r7, [sp, #0]
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff f9cf 	bl	8006e4c <_malloc_r>
 8007aae:	b948      	cbnz	r0, 8007ac4 <__smakebuf_r+0x46>
 8007ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ab4:	059a      	lsls	r2, r3, #22
 8007ab6:	d4ee      	bmi.n	8007a96 <__smakebuf_r+0x18>
 8007ab8:	f023 0303 	bic.w	r3, r3, #3
 8007abc:	f043 0302 	orr.w	r3, r3, #2
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	e7e2      	b.n	8007a8a <__smakebuf_r+0xc>
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	9b01      	ldr	r3, [sp, #4]
 8007ad2:	6020      	str	r0, [r4, #0]
 8007ad4:	b15b      	cbz	r3, 8007aee <__smakebuf_r+0x70>
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007adc:	f000 f81e 	bl	8007b1c <_isatty_r>
 8007ae0:	b128      	cbz	r0, 8007aee <__smakebuf_r+0x70>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f023 0303 	bic.w	r3, r3, #3
 8007ae8:	f043 0301 	orr.w	r3, r3, #1
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	431d      	orrs	r5, r3
 8007af2:	81a5      	strh	r5, [r4, #12]
 8007af4:	e7cf      	b.n	8007a96 <__smakebuf_r+0x18>
	...

08007af8 <_fstat_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	2300      	movs	r3, #0
 8007afc:	4d06      	ldr	r5, [pc, #24]	@ (8007b18 <_fstat_r+0x20>)
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	4611      	mov	r1, r2
 8007b04:	602b      	str	r3, [r5, #0]
 8007b06:	f7fa fce1 	bl	80024cc <_fstat>
 8007b0a:	1c43      	adds	r3, r0, #1
 8007b0c:	d102      	bne.n	8007b14 <_fstat_r+0x1c>
 8007b0e:	682b      	ldr	r3, [r5, #0]
 8007b10:	b103      	cbz	r3, 8007b14 <_fstat_r+0x1c>
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	bd38      	pop	{r3, r4, r5, pc}
 8007b16:	bf00      	nop
 8007b18:	200005d0 	.word	0x200005d0

08007b1c <_isatty_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	2300      	movs	r3, #0
 8007b20:	4d05      	ldr	r5, [pc, #20]	@ (8007b38 <_isatty_r+0x1c>)
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	602b      	str	r3, [r5, #0]
 8007b28:	f7fa fcdf 	bl	80024ea <_isatty>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_isatty_r+0x1a>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_isatty_r+0x1a>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	200005d0 	.word	0x200005d0

08007b3c <_sbrk_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	2300      	movs	r3, #0
 8007b40:	4d05      	ldr	r5, [pc, #20]	@ (8007b58 <_sbrk_r+0x1c>)
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	f7fa fce6 	bl	8002518 <_sbrk>
 8007b4c:	1c43      	adds	r3, r0, #1
 8007b4e:	d102      	bne.n	8007b56 <_sbrk_r+0x1a>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	b103      	cbz	r3, 8007b56 <_sbrk_r+0x1a>
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	bd38      	pop	{r3, r4, r5, pc}
 8007b58:	200005d0 	.word	0x200005d0

08007b5c <memcpy>:
 8007b5c:	440a      	add	r2, r1
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b64:	d100      	bne.n	8007b68 <memcpy+0xc>
 8007b66:	4770      	bx	lr
 8007b68:	b510      	push	{r4, lr}
 8007b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b74:	d1f9      	bne.n	8007b6a <memcpy+0xe>
 8007b76:	bd10      	pop	{r4, pc}

08007b78 <__assert_func>:
 8007b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b7a:	4614      	mov	r4, r2
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	4b09      	ldr	r3, [pc, #36]	@ (8007ba4 <__assert_func+0x2c>)
 8007b80:	4605      	mov	r5, r0
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68d8      	ldr	r0, [r3, #12]
 8007b86:	b954      	cbnz	r4, 8007b9e <__assert_func+0x26>
 8007b88:	4b07      	ldr	r3, [pc, #28]	@ (8007ba8 <__assert_func+0x30>)
 8007b8a:	461c      	mov	r4, r3
 8007b8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b90:	9100      	str	r1, [sp, #0]
 8007b92:	462b      	mov	r3, r5
 8007b94:	4905      	ldr	r1, [pc, #20]	@ (8007bac <__assert_func+0x34>)
 8007b96:	f000 f841 	bl	8007c1c <fiprintf>
 8007b9a:	f000 f851 	bl	8007c40 <abort>
 8007b9e:	4b04      	ldr	r3, [pc, #16]	@ (8007bb0 <__assert_func+0x38>)
 8007ba0:	e7f4      	b.n	8007b8c <__assert_func+0x14>
 8007ba2:	bf00      	nop
 8007ba4:	20000018 	.word	0x20000018
 8007ba8:	08008266 	.word	0x08008266
 8007bac:	08008238 	.word	0x08008238
 8007bb0:	0800822b 	.word	0x0800822b

08007bb4 <_calloc_r>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	fba1 5402 	umull	r5, r4, r1, r2
 8007bba:	b93c      	cbnz	r4, 8007bcc <_calloc_r+0x18>
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	f7ff f945 	bl	8006e4c <_malloc_r>
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	b928      	cbnz	r0, 8007bd2 <_calloc_r+0x1e>
 8007bc6:	2600      	movs	r6, #0
 8007bc8:	4630      	mov	r0, r6
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	220c      	movs	r2, #12
 8007bce:	6002      	str	r2, [r0, #0]
 8007bd0:	e7f9      	b.n	8007bc6 <_calloc_r+0x12>
 8007bd2:	462a      	mov	r2, r5
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	f7fe f9e7 	bl	8005fa8 <memset>
 8007bda:	e7f5      	b.n	8007bc8 <_calloc_r+0x14>

08007bdc <__ascii_mbtowc>:
 8007bdc:	b082      	sub	sp, #8
 8007bde:	b901      	cbnz	r1, 8007be2 <__ascii_mbtowc+0x6>
 8007be0:	a901      	add	r1, sp, #4
 8007be2:	b142      	cbz	r2, 8007bf6 <__ascii_mbtowc+0x1a>
 8007be4:	b14b      	cbz	r3, 8007bfa <__ascii_mbtowc+0x1e>
 8007be6:	7813      	ldrb	r3, [r2, #0]
 8007be8:	600b      	str	r3, [r1, #0]
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	1e10      	subs	r0, r2, #0
 8007bee:	bf18      	it	ne
 8007bf0:	2001      	movne	r0, #1
 8007bf2:	b002      	add	sp, #8
 8007bf4:	4770      	bx	lr
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	e7fb      	b.n	8007bf2 <__ascii_mbtowc+0x16>
 8007bfa:	f06f 0001 	mvn.w	r0, #1
 8007bfe:	e7f8      	b.n	8007bf2 <__ascii_mbtowc+0x16>

08007c00 <__ascii_wctomb>:
 8007c00:	4603      	mov	r3, r0
 8007c02:	4608      	mov	r0, r1
 8007c04:	b141      	cbz	r1, 8007c18 <__ascii_wctomb+0x18>
 8007c06:	2aff      	cmp	r2, #255	@ 0xff
 8007c08:	d904      	bls.n	8007c14 <__ascii_wctomb+0x14>
 8007c0a:	228a      	movs	r2, #138	@ 0x8a
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	4770      	bx	lr
 8007c14:	2001      	movs	r0, #1
 8007c16:	700a      	strb	r2, [r1, #0]
 8007c18:	4770      	bx	lr
	...

08007c1c <fiprintf>:
 8007c1c:	b40e      	push	{r1, r2, r3}
 8007c1e:	b503      	push	{r0, r1, lr}
 8007c20:	4601      	mov	r1, r0
 8007c22:	ab03      	add	r3, sp, #12
 8007c24:	4805      	ldr	r0, [pc, #20]	@ (8007c3c <fiprintf+0x20>)
 8007c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	f7ff fd41 	bl	80076b4 <_vfiprintf_r>
 8007c32:	b002      	add	sp, #8
 8007c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c38:	b003      	add	sp, #12
 8007c3a:	4770      	bx	lr
 8007c3c:	20000018 	.word	0x20000018

08007c40 <abort>:
 8007c40:	2006      	movs	r0, #6
 8007c42:	b508      	push	{r3, lr}
 8007c44:	f000 f82c 	bl	8007ca0 <raise>
 8007c48:	2001      	movs	r0, #1
 8007c4a:	f7fa fc0c 	bl	8002466 <_exit>

08007c4e <_raise_r>:
 8007c4e:	291f      	cmp	r1, #31
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4605      	mov	r5, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	d904      	bls.n	8007c62 <_raise_r+0x14>
 8007c58:	2316      	movs	r3, #22
 8007c5a:	6003      	str	r3, [r0, #0]
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c64:	b112      	cbz	r2, 8007c6c <_raise_r+0x1e>
 8007c66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c6a:	b94b      	cbnz	r3, 8007c80 <_raise_r+0x32>
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f831 	bl	8007cd4 <_getpid_r>
 8007c72:	4622      	mov	r2, r4
 8007c74:	4601      	mov	r1, r0
 8007c76:	4628      	mov	r0, r5
 8007c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c7c:	f000 b818 	b.w	8007cb0 <_kill_r>
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d00a      	beq.n	8007c9a <_raise_r+0x4c>
 8007c84:	1c59      	adds	r1, r3, #1
 8007c86:	d103      	bne.n	8007c90 <_raise_r+0x42>
 8007c88:	2316      	movs	r3, #22
 8007c8a:	6003      	str	r3, [r0, #0]
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	e7e7      	b.n	8007c60 <_raise_r+0x12>
 8007c90:	2100      	movs	r1, #0
 8007c92:	4620      	mov	r0, r4
 8007c94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c98:	4798      	blx	r3
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	e7e0      	b.n	8007c60 <_raise_r+0x12>
	...

08007ca0 <raise>:
 8007ca0:	4b02      	ldr	r3, [pc, #8]	@ (8007cac <raise+0xc>)
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	f7ff bfd2 	b.w	8007c4e <_raise_r>
 8007caa:	bf00      	nop
 8007cac:	20000018 	.word	0x20000018

08007cb0 <_kill_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4d06      	ldr	r5, [pc, #24]	@ (8007cd0 <_kill_r+0x20>)
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	602b      	str	r3, [r5, #0]
 8007cbe:	f7fa fbc2 	bl	8002446 <_kill>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d102      	bne.n	8007ccc <_kill_r+0x1c>
 8007cc6:	682b      	ldr	r3, [r5, #0]
 8007cc8:	b103      	cbz	r3, 8007ccc <_kill_r+0x1c>
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	bd38      	pop	{r3, r4, r5, pc}
 8007cce:	bf00      	nop
 8007cd0:	200005d0 	.word	0x200005d0

08007cd4 <_getpid_r>:
 8007cd4:	f7fa bbb0 	b.w	8002438 <_getpid>

08007cd8 <_init>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr

08007ce4 <_fini>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr
