
Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08007c40  08007c40  00008c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a8  080083a8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080083a8  080083a8  000093a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b0  080083b0  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b0  080083b0  000093b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083b4  080083b4  000093b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080083b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  200001d4  0800858c  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800858c  0000a5a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123cf  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e5  00000000  00000000  0001c5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7c  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f6e  00000000  00000000  00020d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b7c  00000000  00000000  00041cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7991  00000000  00000000  0005586e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d1ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a44  00000000  00000000  0011d244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00122c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d4 	.word	0x200001d4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c28 	.word	0x08007c28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001d8 	.word	0x200001d8
 80001c4:	08007c28 	.word	0x08007c28

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b968 	b.w	8000de8 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	460c      	mov	r4, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14e      	bne.n	8000bda <__udivmoddi4+0xaa>
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	458c      	cmp	ip, r1
 8000b40:	4686      	mov	lr, r0
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	d962      	bls.n	8000c0e <__udivmoddi4+0xde>
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0320 	rsb	r3, r2, #32
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b58:	4319      	orrs	r1, r3
 8000b5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6a:	fa1f f68c 	uxth.w	r6, ip
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b76:	fb04 f106 	mul.w	r1, r4, r6
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x64>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b86:	f080 8110 	bcs.w	8000daa <__udivmoddi4+0x27a>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 810d 	bls.w	8000daa <__udivmoddi4+0x27a>
 8000b90:	3c02      	subs	r4, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1a59      	subs	r1, r3, r1
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	429e      	cmp	r6, r3
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x94>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb6:	f080 80fa 	bcs.w	8000dae <__udivmoddi4+0x27e>
 8000bba:	429e      	cmp	r6, r3
 8000bbc:	f240 80f7 	bls.w	8000dae <__udivmoddi4+0x27e>
 8000bc0:	4463      	add	r3, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	1b9b      	subs	r3, r3, r6
 8000bc8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa6>
 8000bce:	40d3      	lsrs	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xba>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb4>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x150>
 8000bf2:	42a3      	cmp	r3, r4
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xcc>
 8000bf6:	4290      	cmp	r0, r2
 8000bf8:	f0c0 80ee 	bcc.w	8000dd8 <__udivmoddi4+0x2a8>
 8000bfc:	1a86      	subs	r6, r0, r2
 8000bfe:	eb64 0303 	sbc.w	r3, r4, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d0e6      	beq.n	8000bd6 <__udivmoddi4+0xa6>
 8000c08:	e9c5 6300 	strd	r6, r3, [r5]
 8000c0c:	e7e3      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	f040 808f 	bne.w	8000d32 <__udivmoddi4+0x202>
 8000c14:	eba1 040c 	sub.w	r4, r1, ip
 8000c18:	2101      	movs	r1, #1
 8000c1a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	fb07 f006 	mul.w	r0, r7, r6
 8000c2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	4298      	cmp	r0, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x11c>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x11a>
 8000c44:	4298      	cmp	r0, r3
 8000c46:	f200 80cb 	bhi.w	8000de0 <__udivmoddi4+0x2b0>
 8000c4a:	4626      	mov	r6, r4
 8000c4c:	1a1c      	subs	r4, r3, r0
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	fb00 f707 	mul.w	r7, r0, r7
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	429f      	cmp	r7, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x148>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x146>
 8000c70:	429f      	cmp	r7, r3
 8000c72:	f200 80ae 	bhi.w	8000dd2 <__udivmoddi4+0x2a2>
 8000c76:	4620      	mov	r0, r4
 8000c78:	1bdb      	subs	r3, r3, r7
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x9c>
 8000c80:	f1c1 0720 	rsb	r7, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8e:	fa24 f607 	lsr.w	r6, r4, r7
 8000c92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c96:	fbb6 f8f9 	udiv	r8, r6, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 6618 	mls	r6, r9, r8, r6
 8000ca2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ca6:	408c      	lsls	r4, r1
 8000ca8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cac:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb0:	431c      	orrs	r4, r3
 8000cb2:	0c23      	lsrs	r3, r4, #16
 8000cb4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d90a      	bls.n	8000cd6 <__udivmoddi4+0x1a6>
 8000cc0:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc4:	f108 36ff 	add.w	r6, r8, #4294967295
 8000cc8:	f080 8081 	bcs.w	8000dce <__udivmoddi4+0x29e>
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d97e      	bls.n	8000dce <__udivmoddi4+0x29e>
 8000cd0:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd4:	4463      	add	r3, ip
 8000cd6:	1a1e      	subs	r6, r3, r0
 8000cd8:	fbb6 f3f9 	udiv	r3, r6, r9
 8000cdc:	fb09 6613 	mls	r6, r9, r3, r6
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	b2a4      	uxth	r4, r4
 8000ce6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x1d0>
 8000cee:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf2:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cf6:	d266      	bcs.n	8000dc6 <__udivmoddi4+0x296>
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d964      	bls.n	8000dc6 <__udivmoddi4+0x296>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4464      	add	r4, ip
 8000d00:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d04:	fba0 8302 	umull	r8, r3, r0, r2
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	46c6      	mov	lr, r8
 8000d10:	461e      	mov	r6, r3
 8000d12:	d350      	bcc.n	8000db6 <__udivmoddi4+0x286>
 8000d14:	d04d      	beq.n	8000db2 <__udivmoddi4+0x282>
 8000d16:	b155      	cbz	r5, 8000d2e <__udivmoddi4+0x1fe>
 8000d18:	ebba 030e 	subs.w	r3, sl, lr
 8000d1c:	eb64 0406 	sbc.w	r4, r4, r6
 8000d20:	fa04 f707 	lsl.w	r7, r4, r7
 8000d24:	40cb      	lsrs	r3, r1
 8000d26:	431f      	orrs	r7, r3
 8000d28:	40cc      	lsrs	r4, r1
 8000d2a:	e9c5 7400 	strd	r7, r4, [r5]
 8000d2e:	2100      	movs	r1, #0
 8000d30:	e751      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000d32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d9      	lsrs	r1, r3
 8000d3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d40:	fa20 f303 	lsr.w	r3, r0, r3
 8000d44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d48:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d4c:	fb08 1110 	mls	r1, r8, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	431c      	orrs	r4, r3
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x248>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29a>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29a>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d7e:	fb08 3311 	mls	r3, r8, r1, r3
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x272>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x292>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x292>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e73b      	b.n	8000c22 <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f2      	b.n	8000b94 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e708      	b.n	8000bc4 <__udivmoddi4+0x94>
 8000db2:	45c2      	cmp	sl, r8
 8000db4:	d2af      	bcs.n	8000d16 <__udivmoddi4+0x1e6>
 8000db6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dba:	eb63 060c 	sbc.w	r6, r3, ip
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a9      	b.n	8000d16 <__udivmoddi4+0x1e6>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x272>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e79a      	b.n	8000d00 <__udivmoddi4+0x1d0>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x248>
 8000dce:	46b0      	mov	r8, r6
 8000dd0:	e781      	b.n	8000cd6 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74f      	b.n	8000c78 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e711      	b.n	8000c04 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e732      	b.n	8000c4c <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <getBatterySOC>:
    {2800, 5},   // Approaching cutoff
    {2500, 0}    // Discharge cutoff voltage
};

// Function to get estimated SOC from battery voltage (in millivolts)
uint8_t getBatterySOC(uint32_t voltage_mv) {
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
    // Handle edge cases
    if (voltage_mv >= batterySOCTable[0].voltage) {
 8000df4:	f241 0268 	movw	r2, #4200	@ 0x1068
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d301      	bcc.n	8000e02 <getBatterySOC+0x16>
        return batterySOCTable[0].soc;
 8000dfe:	2364      	movs	r3, #100	@ 0x64
 8000e00:	e055      	b.n	8000eae <getBatterySOC+0xc2>
    }
    if (voltage_mv <= batterySOCTable[SOC_TABLE_SIZE-1].voltage) {
 8000e02:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d801      	bhi.n	8000e10 <getBatterySOC+0x24>
        return batterySOCTable[SOC_TABLE_SIZE-1].soc;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e04e      	b.n	8000eae <getBatterySOC+0xc2>
    }

    // Find the appropriate voltage range and interpolate
    for (uint8_t i = 0; i < SOC_TABLE_SIZE-1; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	75fb      	strb	r3, [r7, #23]
 8000e14:	e047      	b.n	8000ea6 <getBatterySOC+0xba>
        if (voltage_mv <= batterySOCTable[i].voltage &&
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
 8000e18:	4a27      	ldr	r2, [pc, #156]	@ (8000eb8 <getBatterySOC+0xcc>)
 8000e1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d83d      	bhi.n	8000ea0 <getBatterySOC+0xb4>
            voltage_mv > batterySOCTable[i+1].voltage) {
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a23      	ldr	r2, [pc, #140]	@ (8000eb8 <getBatterySOC+0xcc>)
 8000e2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
        if (voltage_mv <= batterySOCTable[i].voltage &&
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d935      	bls.n	8000ea0 <getBatterySOC+0xb4>
            // Linear interpolation using integer math
            uint32_t voltageDiff = batterySOCTable[i].voltage - batterySOCTable[i+1].voltage;
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	4a20      	ldr	r2, [pc, #128]	@ (8000eb8 <getBatterySOC+0xcc>)
 8000e38:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	491d      	ldr	r1, [pc, #116]	@ (8000eb8 <getBatterySOC+0xcc>)
 8000e42:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	613b      	str	r3, [r7, #16]
            uint8_t socDiff = batterySOCTable[i].soc - batterySOCTable[i+1].soc;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb8 <getBatterySOC+0xcc>)
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4413      	add	r3, r2
 8000e52:	791a      	ldrb	r2, [r3, #4]
 8000e54:	7dfb      	ldrb	r3, [r7, #23]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4917      	ldr	r1, [pc, #92]	@ (8000eb8 <getBatterySOC+0xcc>)
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	440b      	add	r3, r1
 8000e5e:	791b      	ldrb	r3, [r3, #4]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	73fb      	strb	r3, [r7, #15]

            // Scale up for better precision in integer division
            uint32_t ratio = ((batterySOCTable[i].voltage - voltage_mv) * 100) / voltageDiff;
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <getBatterySOC+0xcc>)
 8000e68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2264      	movs	r2, #100	@ 0x64
 8000e72:	fb03 f202 	mul.w	r2, r3, r2
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	60bb      	str	r3, [r7, #8]

            return batterySOCTable[i].soc - ((ratio * socDiff) / 100);
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <getBatterySOC+0xcc>)
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4413      	add	r3, r2
 8000e86:	791a      	ldrb	r2, [r3, #4]
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	fb01 f303 	mul.w	r3, r1, r3
 8000e90:	490a      	ldr	r1, [pc, #40]	@ (8000ebc <getBatterySOC+0xd0>)
 8000e92:	fba1 1303 	umull	r1, r3, r1, r3
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	e006      	b.n	8000eae <getBatterySOC+0xc2>
    for (uint8_t i = 0; i < SOC_TABLE_SIZE-1; i++) {
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	75fb      	strb	r3, [r7, #23]
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	d9b4      	bls.n	8000e16 <getBatterySOC+0x2a>
        }
    }

    // Fallback (should not reach here)
    return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	08007db0 	.word	0x08007db0
 8000ebc:	51eb851f 	.word	0x51eb851f

08000ec0 <SpiCRC16>:
 * @param  data: Buffer containing the data
 * @param  length: Length of data
 * @retval uint16_t: Calculated CRC value
 */
uint16_t SpiCRC16(uint8_t* pBuf, int sendLen)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0xFFFF;
 8000eca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ece:	81fb      	strh	r3, [r7, #14]
    int i;

    for (i = 0; i < sendLen; i++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	e014      	b.n	8000f00 <SpiCRC16+0x40>
    {
        wCRC ^= (uint16_t)(pBuf[i] & 0x00FF);
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	89fb      	ldrh	r3, [r7, #14]
 8000ee2:	4053      	eors	r3, r2
 8000ee4:	81fb      	strh	r3, [r7, #14]
        wCRC = crc16_table[wCRC & 0x00FF] ^ (wCRC >> 8);
 8000ee6:	89fb      	ldrh	r3, [r7, #14]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <SpiCRC16+0x54>)
 8000eec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4053      	eors	r3, r2
 8000ef8:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < sendLen; i++)
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	3301      	adds	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbe6      	blt.n	8000ed6 <SpiCRC16+0x16>
    }

    //printf("CRC16 calculated: 0x%04X\n", wCRC);

    return wCRC;
 8000f08:	89fb      	ldrh	r3, [r7, #14]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	08007e20 	.word	0x08007e20

08000f18 <SPI1_DisableForGPIO>:
/**
 * @brief  Temporarily disable SPI1 to control MOSI pin as GPIO
 * @retval None
 */
void SPI1_DisableForGPIO(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
  // Disable SPI1
  __HAL_SPI_DISABLE(&hspi1);
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <SPI1_DisableForGPIO+0x48>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <SPI1_DisableForGPIO+0x48>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f2c:	601a      	str	r2, [r3, #0]

  // Configure MOSI pin (PA7) as GPIO output
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_7;        // PA7 is SPI1_MOSI on most STM32F4 boards
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <SPI1_DisableForGPIO+0x4c>)
 8000f52:	f002 fa65 	bl	8003420 <HAL_GPIO_Init>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000318 	.word	0x20000318
 8000f64:	40020000 	.word	0x40020000

08000f68 <SPI1_RestoreFromGPIO>:
/**
 * @brief  Restore SPI1 configuration for normal operation
 * @retval None
 */
void SPI1_RestoreFromGPIO(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
  // Re-initialize SPI1 pins to their original function
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]

  // SCK pin (PA5)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	4619      	mov	r1, r3
 8000f94:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <SPI1_RestoreFromGPIO+0x68>)
 8000f96:	f002 fa43 	bl	8003420 <HAL_GPIO_Init>

  // MISO pin (PA6)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9a:	2340      	movs	r3, #64	@ 0x40
 8000f9c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <SPI1_RestoreFromGPIO+0x68>)
 8000fa4:	f002 fa3c 	bl	8003420 <HAL_GPIO_Init>

  // MOSI pin (PA7)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4807      	ldr	r0, [pc, #28]	@ (8000fd0 <SPI1_RestoreFromGPIO+0x68>)
 8000fb2:	f002 fa35 	bl	8003420 <HAL_GPIO_Init>

  // Re-enable SPI1
  __HAL_SPI_ENABLE(&hspi1);
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <SPI1_RestoreFromGPIO+0x6c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <SPI1_RestoreFromGPIO+0x6c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fc4:	601a      	str	r2, [r3, #0]
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	20000318 	.word	0x20000318

08000fd8 <BQ79600_WakeUp>:
 * @param  num_stacked_devices: Number of stacked BQ79616-Q1 devices
 * @param  need_double_wake: Set to true if device was previously shut down using SHUTDOWN ping
 * @retval HAL status
*/
HAL_StatusTypeDef BQ79600_WakeUp(uint8_t num_stacked_devices, bool need_double_wake)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]

  // 1. Send WAKE ping - begin by disabling SPI to control MOSI directly
  SPI1_DisableForGPIO();
 8000fe8:	f7ff ff96 	bl	8000f18 <SPI1_DisableForGPIO>

  // Configure NSS pin (PA4) as GPIO output
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_4;  // NSS pin
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001008:	2302      	movs	r3, #2
 800100a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	4831      	ldr	r0, [pc, #196]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 8001014:	f002 fa04 	bl	8003420 <HAL_GPIO_Init>

  // If device was shut down with SHUTDOWN ping, we need two WAKE pings
  if (need_double_wake) {
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d021      	beq.n	8001062 <BQ79600_WakeUp+0x8a>
    // First WAKE ping
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 800101e:	2200      	movs	r2, #0
 8001020:	2110      	movs	r1, #16
 8001022:	482d      	ldr	r0, [pc, #180]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 8001024:	f002 fbb1 	bl	800378a <HAL_GPIO_WritePin>
    Delay_us(2);  // Wait 2us
 8001028:	2002      	movs	r0, #2
 800102a:	f000 ff4f 	bl	8001ecc <Delay_us>

    // Pull MOSI low for 2.75ms (tHLD_WAKE)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	@ 0x80
 8001032:	4829      	ldr	r0, [pc, #164]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 8001034:	f002 fba9 	bl	800378a <HAL_GPIO_WritePin>
    Delay_us(BQ79600_WAKE_PING_TIME_US);  // 2.75ms
 8001038:	f640 20be 	movw	r0, #2750	@ 0xabe
 800103c:	f000 ff46 	bl	8001ecc <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	4824      	ldr	r0, [pc, #144]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 8001046:	f002 fba0 	bl	800378a <HAL_GPIO_WritePin>

    Delay_us(2);  // Wait 2us
 800104a:	2002      	movs	r0, #2
 800104c:	f000 ff3e 	bl	8001ecc <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Bring nCS back high
 8001050:	2201      	movs	r2, #1
 8001052:	2110      	movs	r1, #16
 8001054:	4820      	ldr	r0, [pc, #128]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 8001056:	f002 fb98 	bl	800378a <HAL_GPIO_WritePin>

    // Wait for first wake ping to process (3.5ms)
    Delay_us(BQ79600_WAKE_SETUP_TIME_US);  // 3.5ms
 800105a:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800105e:	f000 ff35 	bl	8001ecc <Delay_us>
  }

  // Send (second) WAKE ping
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 8001062:	2200      	movs	r2, #0
 8001064:	2110      	movs	r1, #16
 8001066:	481c      	ldr	r0, [pc, #112]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 8001068:	f002 fb8f 	bl	800378a <HAL_GPIO_WritePin>
  Delay_us(2);  // Wait 2us
 800106c:	2002      	movs	r0, #2
 800106e:	f000 ff2d 	bl	8001ecc <Delay_us>

  // Pull MOSI low for 2.75ms (tHLD_WAKE)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2180      	movs	r1, #128	@ 0x80
 8001076:	4818      	ldr	r0, [pc, #96]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 8001078:	f002 fb87 	bl	800378a <HAL_GPIO_WritePin>
  Delay_us(BQ79600_WAKE_PING_TIME_US);  // 2.75ms
 800107c:	f640 20be 	movw	r0, #2750	@ 0xabe
 8001080:	f000 ff24 	bl	8001ecc <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2180      	movs	r1, #128	@ 0x80
 8001088:	4813      	ldr	r0, [pc, #76]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 800108a:	f002 fb7e 	bl	800378a <HAL_GPIO_WritePin>

  Delay_us(2);  // Wait 2us
 800108e:	2002      	movs	r0, #2
 8001090:	f000 ff1c 	bl	8001ecc <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Bring nCS back high
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	480f      	ldr	r0, [pc, #60]	@ (80010d8 <BQ79600_WakeUp+0x100>)
 800109a:	f002 fb76 	bl	800378a <HAL_GPIO_WritePin>

  // Restore SPI configuration
  SPI1_RestoreFromGPIO();
 800109e:	f7ff ff63 	bl	8000f68 <SPI1_RestoreFromGPIO>

  // 2. Wait for tSU(WAKE_SHUT) to allow BQ79600-Q1 to enter ACTIVE mode (3.5ms)
  HAL_Delay(4);
 80010a2:	2004      	movs	r0, #4
 80010a4:	f001 fab4 	bl	8002610 <HAL_Delay>

  // 4. Send a single device write to set CONTROL1[SEND_WAKE]=1, which wakes up all stacked devices
  tx_data[0] = 0x90;  // Single device 1 byte write
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <BQ79600_WakeUp+0x104>)
 80010aa:	2290      	movs	r2, #144	@ 0x90
 80010ac:	701a      	strb	r2, [r3, #0]
  tx_data[1] = 0x00;  // Device address
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <BQ79600_WakeUp+0x104>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	705a      	strb	r2, [r3, #1]
  tx_data[2] = 0x03;  // MSB register address
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <BQ79600_WakeUp+0x104>)
 80010b6:	2203      	movs	r2, #3
 80010b8:	709a      	strb	r2, [r3, #2]
  tx_data[3] = 0x09;  // LSB register address
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <BQ79600_WakeUp+0x104>)
 80010bc:	2209      	movs	r2, #9
 80010be:	70da      	strb	r2, [r3, #3]
  tx_data[4] = 0x20;  // 00100000 (enable SEND_WAKE)
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <BQ79600_WakeUp+0x104>)
 80010c2:	2220      	movs	r2, #32
 80010c4:	711a      	strb	r2, [r3, #4]

  SpiWrite(5);
 80010c6:	2005      	movs	r0, #5
 80010c8:	f000 f9bc 	bl	8001444 <SpiWrite>

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3720      	adds	r7, #32
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40020000 	.word	0x40020000
 80010dc:	200001f8 	.word	0x200001f8

080010e0 <SpiAutoAddress>:
 * @brief  Auto address the bq79600s. Set all devices to stack mode, set the highest device as top of stack, synchronize the DLL.
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef SpiAutoAddress(uint8_t numStackedDevices)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	//SYNC DLL
	tx_data[0] = 0xB0;
 80010ea:	4b46      	ldr	r3, [pc, #280]	@ (8001204 <SpiAutoAddress+0x124>)
 80010ec:	22b0      	movs	r2, #176	@ 0xb0
 80010ee:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80010f0:	4b44      	ldr	r3, [pc, #272]	@ (8001204 <SpiAutoAddress+0x124>)
 80010f2:	2203      	movs	r2, #3
 80010f4:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x43;
 80010f6:	4b43      	ldr	r3, [pc, #268]	@ (8001204 <SpiAutoAddress+0x124>)
 80010f8:	2243      	movs	r2, #67	@ 0x43
 80010fa:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80010fc:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <SpiAutoAddress+0x124>)
 80010fe:	2200      	movs	r2, #0
 8001100:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001102:	2004      	movs	r0, #4
 8001104:	f000 f99e 	bl	8001444 <SpiWrite>

	tx_data[0] = 0xB0;
 8001108:	4b3e      	ldr	r3, [pc, #248]	@ (8001204 <SpiAutoAddress+0x124>)
 800110a:	22b0      	movs	r2, #176	@ 0xb0
 800110c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800110e:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <SpiAutoAddress+0x124>)
 8001110:	2203      	movs	r2, #3
 8001112:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x44;
 8001114:	4b3b      	ldr	r3, [pc, #236]	@ (8001204 <SpiAutoAddress+0x124>)
 8001116:	2244      	movs	r2, #68	@ 0x44
 8001118:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800111a:	4b3a      	ldr	r3, [pc, #232]	@ (8001204 <SpiAutoAddress+0x124>)
 800111c:	2200      	movs	r2, #0
 800111e:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001120:	2004      	movs	r0, #4
 8001122:	f000 f98f 	bl	8001444 <SpiWrite>

	tx_data[0] = 0xB0;
 8001126:	4b37      	ldr	r3, [pc, #220]	@ (8001204 <SpiAutoAddress+0x124>)
 8001128:	22b0      	movs	r2, #176	@ 0xb0
 800112a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800112c:	4b35      	ldr	r3, [pc, #212]	@ (8001204 <SpiAutoAddress+0x124>)
 800112e:	2203      	movs	r2, #3
 8001130:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x45;
 8001132:	4b34      	ldr	r3, [pc, #208]	@ (8001204 <SpiAutoAddress+0x124>)
 8001134:	2245      	movs	r2, #69	@ 0x45
 8001136:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001138:	4b32      	ldr	r3, [pc, #200]	@ (8001204 <SpiAutoAddress+0x124>)
 800113a:	2200      	movs	r2, #0
 800113c:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800113e:	2004      	movs	r0, #4
 8001140:	f000 f980 	bl	8001444 <SpiWrite>

	tx_data[0] = 0xB0;
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <SpiAutoAddress+0x124>)
 8001146:	22b0      	movs	r2, #176	@ 0xb0
 8001148:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <SpiAutoAddress+0x124>)
 800114c:	2203      	movs	r2, #3
 800114e:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x46;
 8001150:	4b2c      	ldr	r3, [pc, #176]	@ (8001204 <SpiAutoAddress+0x124>)
 8001152:	2246      	movs	r2, #70	@ 0x46
 8001154:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001156:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <SpiAutoAddress+0x124>)
 8001158:	2200      	movs	r2, #0
 800115a:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800115c:	2004      	movs	r0, #4
 800115e:	f000 f971 	bl	8001444 <SpiWrite>

	tx_data[0] = 0xB0;
 8001162:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <SpiAutoAddress+0x124>)
 8001164:	22b0      	movs	r2, #176	@ 0xb0
 8001166:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001168:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <SpiAutoAddress+0x124>)
 800116a:	2203      	movs	r2, #3
 800116c:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x47;
 800116e:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <SpiAutoAddress+0x124>)
 8001170:	2247      	movs	r2, #71	@ 0x47
 8001172:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001174:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <SpiAutoAddress+0x124>)
 8001176:	2200      	movs	r2, #0
 8001178:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800117a:	2004      	movs	r0, #4
 800117c:	f000 f962 	bl	8001444 <SpiWrite>

	tx_data[0] = 0xB0;
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <SpiAutoAddress+0x124>)
 8001182:	22b0      	movs	r2, #176	@ 0xb0
 8001184:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <SpiAutoAddress+0x124>)
 8001188:	2203      	movs	r2, #3
 800118a:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x48;
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <SpiAutoAddress+0x124>)
 800118e:	2248      	movs	r2, #72	@ 0x48
 8001190:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <SpiAutoAddress+0x124>)
 8001194:	2200      	movs	r2, #0
 8001196:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001198:	2004      	movs	r0, #4
 800119a:	f000 f953 	bl	8001444 <SpiWrite>

	tx_data[0] = 0xB0;
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <SpiAutoAddress+0x124>)
 80011a0:	22b0      	movs	r2, #176	@ 0xb0
 80011a2:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80011a4:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <SpiAutoAddress+0x124>)
 80011a6:	2203      	movs	r2, #3
 80011a8:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x49;
 80011aa:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <SpiAutoAddress+0x124>)
 80011ac:	2249      	movs	r2, #73	@ 0x49
 80011ae:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <SpiAutoAddress+0x124>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80011b6:	2004      	movs	r0, #4
 80011b8:	f000 f944 	bl	8001444 <SpiWrite>

	tx_data[0] = 0xB0;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <SpiAutoAddress+0x124>)
 80011be:	22b0      	movs	r2, #176	@ 0xb0
 80011c0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80011c2:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <SpiAutoAddress+0x124>)
 80011c4:	2203      	movs	r2, #3
 80011c6:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x4A;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <SpiAutoAddress+0x124>)
 80011ca:	224a      	movs	r2, #74	@ 0x4a
 80011cc:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80011ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001204 <SpiAutoAddress+0x124>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80011d4:	2004      	movs	r0, #4
 80011d6:	f000 f935 	bl	8001444 <SpiWrite>

	//Enable auto-addressing mode
	tx_data[0] = 0xD0;
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <SpiAutoAddress+0x124>)
 80011dc:	22d0      	movs	r2, #208	@ 0xd0
 80011de:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <SpiAutoAddress+0x124>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x09;
 80011e6:	4b07      	ldr	r3, [pc, #28]	@ (8001204 <SpiAutoAddress+0x124>)
 80011e8:	2209      	movs	r2, #9
 80011ea:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x01;
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SpiAutoAddress+0x124>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80011f2:	2004      	movs	r0, #4
 80011f4:	f000 f926 	bl	8001444 <SpiWrite>

	uint8_t devAddr = 0x00;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]
	//give each stack device and address
	for(int i = 0; i <= numStackedDevices - 1; i++){
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	e017      	b.n	8001232 <SpiAutoAddress+0x152>
 8001202:	bf00      	nop
 8001204:	200001f8 	.word	0x200001f8
		tx_data[0] = 0xD0;
 8001208:	4b88      	ldr	r3, [pc, #544]	@ (800142c <SpiAutoAddress+0x34c>)
 800120a:	22d0      	movs	r2, #208	@ 0xd0
 800120c:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x03;
 800120e:	4b87      	ldr	r3, [pc, #540]	@ (800142c <SpiAutoAddress+0x34c>)
 8001210:	2203      	movs	r2, #3
 8001212:	705a      	strb	r2, [r3, #1]
		tx_data[2] = 0x06;
 8001214:	4b85      	ldr	r3, [pc, #532]	@ (800142c <SpiAutoAddress+0x34c>)
 8001216:	2206      	movs	r2, #6
 8001218:	709a      	strb	r2, [r3, #2]
		tx_data[3] = devAddr;
 800121a:	4a84      	ldr	r2, [pc, #528]	@ (800142c <SpiAutoAddress+0x34c>)
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	70d3      	strb	r3, [r2, #3]
		SpiWrite(4);
 8001220:	2004      	movs	r0, #4
 8001222:	f000 f90f 	bl	8001444 <SpiWrite>
		devAddr += 1;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i <= numStackedDevices - 1; i++){
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	429a      	cmp	r2, r3
 8001238:	dbe6      	blt.n	8001208 <SpiAutoAddress+0x128>
	}

	//set all stacked devices as stack
	tx_data[0] = 0xD0;
 800123a:	4b7c      	ldr	r3, [pc, #496]	@ (800142c <SpiAutoAddress+0x34c>)
 800123c:	22d0      	movs	r2, #208	@ 0xd0
 800123e:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001240:	4b7a      	ldr	r3, [pc, #488]	@ (800142c <SpiAutoAddress+0x34c>)
 8001242:	2203      	movs	r2, #3
 8001244:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x08;
 8001246:	4b79      	ldr	r3, [pc, #484]	@ (800142c <SpiAutoAddress+0x34c>)
 8001248:	2208      	movs	r2, #8
 800124a:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x02;
 800124c:	4b77      	ldr	r3, [pc, #476]	@ (800142c <SpiAutoAddress+0x34c>)
 800124e:	2202      	movs	r2, #2
 8001250:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8001252:	2004      	movs	r0, #4
 8001254:	f000 f8f6 	bl	8001444 <SpiWrite>

	//set top device to be top of stack
	tx_data[0] = 0x90;
 8001258:	4b74      	ldr	r3, [pc, #464]	@ (800142c <SpiAutoAddress+0x34c>)
 800125a:	2290      	movs	r2, #144	@ 0x90
 800125c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = devAddr;
 800125e:	4a73      	ldr	r2, [pc, #460]	@ (800142c <SpiAutoAddress+0x34c>)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	7053      	strb	r3, [r2, #1]
	tx_data[2] = 0x03;
 8001264:	4b71      	ldr	r3, [pc, #452]	@ (800142c <SpiAutoAddress+0x34c>)
 8001266:	2203      	movs	r2, #3
 8001268:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x08;
 800126a:	4b70      	ldr	r3, [pc, #448]	@ (800142c <SpiAutoAddress+0x34c>)
 800126c:	2208      	movs	r2, #8
 800126e:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x03;
 8001270:	4b6e      	ldr	r3, [pc, #440]	@ (800142c <SpiAutoAddress+0x34c>)
 8001272:	2203      	movs	r2, #3
 8001274:	711a      	strb	r2, [r3, #4]
	SpiWrite(5);
 8001276:	2005      	movs	r0, #5
 8001278:	f000 f8e4 	bl	8001444 <SpiWrite>

	//SYNC DLL
	tx_data[0] = 0xA0;
 800127c:	4b6b      	ldr	r3, [pc, #428]	@ (800142c <SpiAutoAddress+0x34c>)
 800127e:	22a0      	movs	r2, #160	@ 0xa0
 8001280:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001282:	4b6a      	ldr	r3, [pc, #424]	@ (800142c <SpiAutoAddress+0x34c>)
 8001284:	2203      	movs	r2, #3
 8001286:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x43;
 8001288:	4b68      	ldr	r3, [pc, #416]	@ (800142c <SpiAutoAddress+0x34c>)
 800128a:	2243      	movs	r2, #67	@ 0x43
 800128c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800128e:	4b67      	ldr	r3, [pc, #412]	@ (800142c <SpiAutoAddress+0x34c>)
 8001290:	2200      	movs	r2, #0
 8001292:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001294:	2102      	movs	r1, #2
 8001296:	2004      	movs	r0, #4
 8001298:	f000 f946 	bl	8001528 <SpiRead>

	tx_data[0] = 0xA0;
 800129c:	4b63      	ldr	r3, [pc, #396]	@ (800142c <SpiAutoAddress+0x34c>)
 800129e:	22a0      	movs	r2, #160	@ 0xa0
 80012a0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80012a2:	4b62      	ldr	r3, [pc, #392]	@ (800142c <SpiAutoAddress+0x34c>)
 80012a4:	2203      	movs	r2, #3
 80012a6:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x44;
 80012a8:	4b60      	ldr	r3, [pc, #384]	@ (800142c <SpiAutoAddress+0x34c>)
 80012aa:	2244      	movs	r2, #68	@ 0x44
 80012ac:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80012ae:	4b5f      	ldr	r3, [pc, #380]	@ (800142c <SpiAutoAddress+0x34c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80012b4:	2102      	movs	r1, #2
 80012b6:	2004      	movs	r0, #4
 80012b8:	f000 f936 	bl	8001528 <SpiRead>

	tx_data[0] = 0xA0;
 80012bc:	4b5b      	ldr	r3, [pc, #364]	@ (800142c <SpiAutoAddress+0x34c>)
 80012be:	22a0      	movs	r2, #160	@ 0xa0
 80012c0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80012c2:	4b5a      	ldr	r3, [pc, #360]	@ (800142c <SpiAutoAddress+0x34c>)
 80012c4:	2203      	movs	r2, #3
 80012c6:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x45;
 80012c8:	4b58      	ldr	r3, [pc, #352]	@ (800142c <SpiAutoAddress+0x34c>)
 80012ca:	2245      	movs	r2, #69	@ 0x45
 80012cc:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80012ce:	4b57      	ldr	r3, [pc, #348]	@ (800142c <SpiAutoAddress+0x34c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80012d4:	2102      	movs	r1, #2
 80012d6:	2004      	movs	r0, #4
 80012d8:	f000 f926 	bl	8001528 <SpiRead>

	tx_data[0] = 0xA0;
 80012dc:	4b53      	ldr	r3, [pc, #332]	@ (800142c <SpiAutoAddress+0x34c>)
 80012de:	22a0      	movs	r2, #160	@ 0xa0
 80012e0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80012e2:	4b52      	ldr	r3, [pc, #328]	@ (800142c <SpiAutoAddress+0x34c>)
 80012e4:	2203      	movs	r2, #3
 80012e6:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x46;
 80012e8:	4b50      	ldr	r3, [pc, #320]	@ (800142c <SpiAutoAddress+0x34c>)
 80012ea:	2246      	movs	r2, #70	@ 0x46
 80012ec:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80012ee:	4b4f      	ldr	r3, [pc, #316]	@ (800142c <SpiAutoAddress+0x34c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80012f4:	2102      	movs	r1, #2
 80012f6:	2004      	movs	r0, #4
 80012f8:	f000 f916 	bl	8001528 <SpiRead>

	tx_data[0] = 0xA0;
 80012fc:	4b4b      	ldr	r3, [pc, #300]	@ (800142c <SpiAutoAddress+0x34c>)
 80012fe:	22a0      	movs	r2, #160	@ 0xa0
 8001300:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001302:	4b4a      	ldr	r3, [pc, #296]	@ (800142c <SpiAutoAddress+0x34c>)
 8001304:	2203      	movs	r2, #3
 8001306:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x47;
 8001308:	4b48      	ldr	r3, [pc, #288]	@ (800142c <SpiAutoAddress+0x34c>)
 800130a:	2247      	movs	r2, #71	@ 0x47
 800130c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800130e:	4b47      	ldr	r3, [pc, #284]	@ (800142c <SpiAutoAddress+0x34c>)
 8001310:	2200      	movs	r2, #0
 8001312:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001314:	2102      	movs	r1, #2
 8001316:	2004      	movs	r0, #4
 8001318:	f000 f906 	bl	8001528 <SpiRead>

	tx_data[0] = 0xA0;
 800131c:	4b43      	ldr	r3, [pc, #268]	@ (800142c <SpiAutoAddress+0x34c>)
 800131e:	22a0      	movs	r2, #160	@ 0xa0
 8001320:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001322:	4b42      	ldr	r3, [pc, #264]	@ (800142c <SpiAutoAddress+0x34c>)
 8001324:	2203      	movs	r2, #3
 8001326:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x48;
 8001328:	4b40      	ldr	r3, [pc, #256]	@ (800142c <SpiAutoAddress+0x34c>)
 800132a:	2248      	movs	r2, #72	@ 0x48
 800132c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800132e:	4b3f      	ldr	r3, [pc, #252]	@ (800142c <SpiAutoAddress+0x34c>)
 8001330:	2200      	movs	r2, #0
 8001332:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001334:	2102      	movs	r1, #2
 8001336:	2004      	movs	r0, #4
 8001338:	f000 f8f6 	bl	8001528 <SpiRead>

	tx_data[0] = 0xA0;
 800133c:	4b3b      	ldr	r3, [pc, #236]	@ (800142c <SpiAutoAddress+0x34c>)
 800133e:	22a0      	movs	r2, #160	@ 0xa0
 8001340:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001342:	4b3a      	ldr	r3, [pc, #232]	@ (800142c <SpiAutoAddress+0x34c>)
 8001344:	2203      	movs	r2, #3
 8001346:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x49;
 8001348:	4b38      	ldr	r3, [pc, #224]	@ (800142c <SpiAutoAddress+0x34c>)
 800134a:	2249      	movs	r2, #73	@ 0x49
 800134c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800134e:	4b37      	ldr	r3, [pc, #220]	@ (800142c <SpiAutoAddress+0x34c>)
 8001350:	2200      	movs	r2, #0
 8001352:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001354:	2102      	movs	r1, #2
 8001356:	2004      	movs	r0, #4
 8001358:	f000 f8e6 	bl	8001528 <SpiRead>

	tx_data[0] = 0xA0;
 800135c:	4b33      	ldr	r3, [pc, #204]	@ (800142c <SpiAutoAddress+0x34c>)
 800135e:	22a0      	movs	r2, #160	@ 0xa0
 8001360:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8001362:	4b32      	ldr	r3, [pc, #200]	@ (800142c <SpiAutoAddress+0x34c>)
 8001364:	2203      	movs	r2, #3
 8001366:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x4A;
 8001368:	4b30      	ldr	r3, [pc, #192]	@ (800142c <SpiAutoAddress+0x34c>)
 800136a:	224a      	movs	r2, #74	@ 0x4a
 800136c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800136e:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <SpiAutoAddress+0x34c>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 8001374:	2102      	movs	r1, #2
 8001376:	2004      	movs	r0, #4
 8001378:	f000 f8d6 	bl	8001528 <SpiRead>


	//Read from 0x0306
	tx_data[0] = 0x80;
 800137c:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <SpiAutoAddress+0x34c>)
 800137e:	2280      	movs	r2, #128	@ 0x80
 8001380:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 8001382:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <SpiAutoAddress+0x34c>)
 8001384:	2200      	movs	r2, #0
 8001386:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x03;
 8001388:	4b28      	ldr	r3, [pc, #160]	@ (800142c <SpiAutoAddress+0x34c>)
 800138a:	2203      	movs	r2, #3
 800138c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x06;
 800138e:	4b27      	ldr	r3, [pc, #156]	@ (800142c <SpiAutoAddress+0x34c>)
 8001390:	2206      	movs	r2, #6
 8001392:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x00;
 8001394:	4b25      	ldr	r3, [pc, #148]	@ (800142c <SpiAutoAddress+0x34c>)
 8001396:	2200      	movs	r2, #0
 8001398:	711a      	strb	r2, [r3, #4]
	SpiRead(5,7);
 800139a:	2107      	movs	r1, #7
 800139c:	2005      	movs	r0, #5
 800139e:	f000 f8c3 	bl	8001528 <SpiRead>
	printf("ADDR_0: 0x%02X\n", rx_data[4]);
 80013a2:	4b23      	ldr	r3, [pc, #140]	@ (8001430 <SpiAutoAddress+0x350>)
 80013a4:	791b      	ldrb	r3, [r3, #4]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4822      	ldr	r0, [pc, #136]	@ (8001434 <SpiAutoAddress+0x354>)
 80013aa:	f004 fc5d 	bl	8005c68 <iprintf>

	tx_data[0] = 0x80;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	@ (800142c <SpiAutoAddress+0x34c>)
 80013b0:	2280      	movs	r2, #128	@ 0x80
 80013b2:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x01;
 80013b4:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <SpiAutoAddress+0x34c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x03;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <SpiAutoAddress+0x34c>)
 80013bc:	2203      	movs	r2, #3
 80013be:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x06;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <SpiAutoAddress+0x34c>)
 80013c2:	2206      	movs	r2, #6
 80013c4:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x00;
 80013c6:	4b19      	ldr	r3, [pc, #100]	@ (800142c <SpiAutoAddress+0x34c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	711a      	strb	r2, [r3, #4]
	SpiRead(5,7);
 80013cc:	2107      	movs	r1, #7
 80013ce:	2005      	movs	r0, #5
 80013d0:	f000 f8aa 	bl	8001528 <SpiRead>
	printf("ADDR_1: 0x%02X\n", rx_data[4]);
 80013d4:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <SpiAutoAddress+0x350>)
 80013d6:	791b      	ldrb	r3, [r3, #4]
 80013d8:	4619      	mov	r1, r3
 80013da:	4817      	ldr	r0, [pc, #92]	@ (8001438 <SpiAutoAddress+0x358>)
 80013dc:	f004 fc44 	bl	8005c68 <iprintf>

	tx_data[0] = 0x80;
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <SpiAutoAddress+0x34c>)
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <SpiAutoAddress+0x34c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x20;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	@ (800142c <SpiAutoAddress+0x34c>)
 80013ee:	2220      	movs	r2, #32
 80013f0:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x01;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <SpiAutoAddress+0x34c>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x00;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <SpiAutoAddress+0x34c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	711a      	strb	r2, [r3, #4]
	SpiRead(5,7);
 80013fe:	2107      	movs	r1, #7
 8001400:	2005      	movs	r0, #5
 8001402:	f000 f891 	bl	8001528 <SpiRead>
	printf("DEV_CONF: 0x%02X\n", rx_data[4]);
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <SpiAutoAddress+0x350>)
 8001408:	791b      	ldrb	r3, [r3, #4]
 800140a:	4619      	mov	r1, r3
 800140c:	480b      	ldr	r0, [pc, #44]	@ (800143c <SpiAutoAddress+0x35c>)
 800140e:	f004 fc2b 	bl	8005c68 <iprintf>


	if(status != HAL_OK) {
 8001412:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <SpiAutoAddress+0x360>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <SpiAutoAddress+0x340>
		return status;
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <SpiAutoAddress+0x360>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	e000      	b.n	8001422 <SpiAutoAddress+0x342>
	}

    return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200001f8 	.word	0x200001f8
 8001430:	20000200 	.word	0x20000200
 8001434:	08007c40 	.word	0x08007c40
 8001438:	08007c50 	.word	0x08007c50
 800143c:	08007c60 	.word	0x08007c60
 8001440:	200001f2 	.word	0x200001f2

08001444 <SpiWrite>:

HAL_StatusTypeDef SpiWrite(int sendLen)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	  crc = SpiCRC16(tx_data, sendLen);
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	482f      	ldr	r0, [pc, #188]	@ (800150c <SpiWrite+0xc8>)
 8001450:	f7ff fd36 	bl	8000ec0 <SpiCRC16>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <SpiWrite+0xcc>)
 800145a:	801a      	strh	r2, [r3, #0]
	  tx_data[sendLen] = crc & 0xFF;
 800145c:	4b2c      	ldr	r3, [pc, #176]	@ (8001510 <SpiWrite+0xcc>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	b2d9      	uxtb	r1, r3
 8001462:	4a2a      	ldr	r2, [pc, #168]	@ (800150c <SpiWrite+0xc8>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	460a      	mov	r2, r1
 800146a:	701a      	strb	r2, [r3, #0]
	  tx_data[sendLen + 1] = (crc >> 8) & 0xFF;
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <SpiWrite+0xcc>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29a      	uxth	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3301      	adds	r3, #1
 8001478:	b2d1      	uxtb	r1, r2
 800147a:	4a24      	ldr	r2, [pc, #144]	@ (800150c <SpiWrite+0xc8>)
 800147c:	54d1      	strb	r1, [r2, r3]

	  //Check if SPI_READY is high, with timeout
	  timeout = HAL_GetTick() + 100;  // 100ms timeout
 800147e:	f001 f8bd 	bl	80025fc <HAL_GetTick>
 8001482:	4603      	mov	r3, r0
 8001484:	3364      	adds	r3, #100	@ 0x64
 8001486:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <SpiWrite+0xd0>)
 8001488:	6013      	str	r3, [r2, #0]
	  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 800148a:	e00b      	b.n	80014a4 <SpiWrite+0x60>
	    if (HAL_GetTick() >= timeout) {
 800148c:	f001 f8b6 	bl	80025fc <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <SpiWrite+0xd0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d301      	bcc.n	800149e <SpiWrite+0x5a>
	      return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e032      	b.n	8001504 <SpiWrite+0xc0>
	    }
	    Delay_us(100);
 800149e:	2064      	movs	r0, #100	@ 0x64
 80014a0:	f000 fd14 	bl	8001ecc <Delay_us>
	  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 80014a4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014a8:	481b      	ldr	r0, [pc, #108]	@ (8001518 <SpiWrite+0xd4>)
 80014aa:	f002 f957 	bl	800375c <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d1eb      	bne.n	800148c <SpiWrite+0x48>
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2110      	movs	r1, #16
 80014b8:	4818      	ldr	r0, [pc, #96]	@ (800151c <SpiWrite+0xd8>)
 80014ba:	f002 f966 	bl	800378a <HAL_GPIO_WritePin>

	  Delay_us(0.5); //t9
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 fd04 	bl	8001ecc <Delay_us>

	  // Send the command
	  status = HAL_SPI_Transmit(&hspi1, tx_data, sendLen + 2, 100);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	3302      	adds	r3, #2
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	2364      	movs	r3, #100	@ 0x64
 80014ce:	490f      	ldr	r1, [pc, #60]	@ (800150c <SpiWrite+0xc8>)
 80014d0:	4813      	ldr	r0, [pc, #76]	@ (8001520 <SpiWrite+0xdc>)
 80014d2:	f002 fe94 	bl	80041fe <HAL_SPI_Transmit>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <SpiWrite+0xe0>)
 80014dc:	701a      	strb	r2, [r3, #0]

	  // Pull nCS high
	  Delay_us(0.5); //t10
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 fcf4 	bl	8001ecc <Delay_us>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2110      	movs	r1, #16
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <SpiWrite+0xd8>)
 80014ea:	f002 f94e 	bl	800378a <HAL_GPIO_WritePin>

	  Delay_us(1);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 fcec 	bl	8001ecc <Delay_us>

	  if (status != HAL_OK) {
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <SpiWrite+0xe0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <SpiWrite+0xbe>
	    return status;
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <SpiWrite+0xe0>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	e000      	b.n	8001504 <SpiWrite+0xc0>
	  }

	  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200001f8 	.word	0x200001f8
 8001510:	200001f0 	.word	0x200001f0
 8001514:	200001f4 	.word	0x200001f4
 8001518:	40020400 	.word	0x40020400
 800151c:	40020000 	.word	0x40020000
 8001520:	20000318 	.word	0x20000318
 8001524:	200001f2 	.word	0x200001f2

08001528 <SpiRead>:

HAL_StatusTypeDef SpiRead(int sendLen, int returnLen){
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]

	SpiWrite(sendLen);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f7ff ff86 	bl	8001444 <SpiWrite>

	for(int i = 0; i <= 7; i++) {
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e007      	b.n	800154e <SpiRead+0x26>
		tx_data[i] = 0xFF;
 800153e:	4a29      	ldr	r2, [pc, #164]	@ (80015e4 <SpiRead+0xbc>)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4413      	add	r3, r2
 8001544:	22ff      	movs	r2, #255	@ 0xff
 8001546:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= 7; i++) {
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3301      	adds	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2b07      	cmp	r3, #7
 8001552:	ddf4      	ble.n	800153e <SpiRead+0x16>
	}

	timeout = HAL_GetTick() + 1;  // 1ms timeout
 8001554:	f001 f852 	bl	80025fc <HAL_GetTick>
 8001558:	4603      	mov	r3, r0
 800155a:	3301      	adds	r3, #1
 800155c:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <SpiRead+0xc0>)
 800155e:	6013      	str	r3, [r2, #0]
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 8001560:	e00e      	b.n	8001580 <SpiRead+0x58>
		if (HAL_GetTick() >= timeout) {
 8001562:	f001 f84b 	bl	80025fc <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <SpiRead+0xc0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d303      	bcc.n	8001578 <SpiRead+0x50>
			SpiClear();
 8001570:	f000 f846 	bl	8001600 <SpiClear>
			return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e030      	b.n	80015da <SpiRead+0xb2>
		}
		Delay_us(500);
 8001578:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800157c:	f000 fca6 	bl	8001ecc <Delay_us>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 8001580:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001584:	4819      	ldr	r0, [pc, #100]	@ (80015ec <SpiRead+0xc4>)
 8001586:	f002 f8e9 	bl	800375c <HAL_GPIO_ReadPin>
 800158a:	4603      	mov	r3, r0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d1e8      	bne.n	8001562 <SpiRead+0x3a>
	}

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	2110      	movs	r1, #16
 8001594:	4816      	ldr	r0, [pc, #88]	@ (80015f0 <SpiRead+0xc8>)
 8001596:	f002 f8f8 	bl	800378a <HAL_GPIO_WritePin>

    Delay_us(0.5); //t9
 800159a:	2000      	movs	r0, #0
 800159c:	f000 fc96 	bl	8001ecc <Delay_us>

    HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, returnLen, HAL_MAX_DELAY);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	9200      	str	r2, [sp, #0]
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <SpiRead+0xcc>)
 80015ac:	490d      	ldr	r1, [pc, #52]	@ (80015e4 <SpiRead+0xbc>)
 80015ae:	4812      	ldr	r0, [pc, #72]	@ (80015f8 <SpiRead+0xd0>)
 80015b0:	f002 ff69 	bl	8004486 <HAL_SPI_TransmitReceive>

    Delay_us(0.5); //t10
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 fc89 	bl	8001ecc <Delay_us>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2110      	movs	r1, #16
 80015be:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <SpiRead+0xc8>)
 80015c0:	f002 f8e3 	bl	800378a <HAL_GPIO_WritePin>

    Delay_us(1);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f000 fc81 	bl	8001ecc <Delay_us>

    if (status != HAL_OK) {
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <SpiRead+0xd4>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <SpiRead+0xb0>
    	return status;
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <SpiRead+0xd4>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	e000      	b.n	80015da <SpiRead+0xb2>
    }

    return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200001f8 	.word	0x200001f8
 80015e8:	200001f4 	.word	0x200001f4
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020000 	.word	0x40020000
 80015f4:	20000200 	.word	0x20000200
 80015f8:	20000318 	.word	0x20000318
 80015fc:	200001f2 	.word	0x200001f2

08001600 <SpiClear>:


HAL_StatusTypeDef SpiClear(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

	tx_data[0] = 0x00;
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <SpiClear+0x54>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 800160a:	2200      	movs	r2, #0
 800160c:	2110      	movs	r1, #16
 800160e:	4812      	ldr	r0, [pc, #72]	@ (8001658 <SpiClear+0x58>)
 8001610:	f002 f8bb 	bl	800378a <HAL_GPIO_WritePin>
	Delay_us(0.5);
 8001614:	2000      	movs	r0, #0
 8001616:	f000 fc59 	bl	8001ecc <Delay_us>
	status = HAL_SPI_Transmit(&hspi1, tx_data, 1, 100);
 800161a:	2364      	movs	r3, #100	@ 0x64
 800161c:	2201      	movs	r2, #1
 800161e:	490d      	ldr	r1, [pc, #52]	@ (8001654 <SpiClear+0x54>)
 8001620:	480e      	ldr	r0, [pc, #56]	@ (800165c <SpiClear+0x5c>)
 8001622:	f002 fdec 	bl	80041fe <HAL_SPI_Transmit>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <SpiClear+0x60>)
 800162c:	701a      	strb	r2, [r3, #0]
	Delay_us(0.5);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 fc4c 	bl	8001ecc <Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull nCS high
 8001634:	2201      	movs	r2, #1
 8001636:	2110      	movs	r1, #16
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <SpiClear+0x58>)
 800163a:	f002 f8a6 	bl	800378a <HAL_GPIO_WritePin>

	if (status != HAL_OK) {
 800163e:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <SpiClear+0x60>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <SpiClear+0x4c>
		    return status;
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SpiClear+0x60>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	e000      	b.n	800164e <SpiClear+0x4e>
		  }

	return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200001f8 	.word	0x200001f8
 8001658:	40020000 	.word	0x40020000
 800165c:	20000318 	.word	0x20000318
 8001660:	200001f2 	.word	0x200001f2

08001664 <stackVoltageRead>:

HAL_StatusTypeDef stackVoltageRead(int returnLen){
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	@ 0x30
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	B0 00 03 0A A6 13 //Step 1 (16 active cells)
	B0 03 0D 06 52 76 //Step 2 (set continuous run and start ADC)
	delay [192us + (5us x TOTALBOARDS)] //Step 3 (delay)
	A0 05 68 1F 5C 2D //Step 4 (read ADC measurements)
	*/
	uint8_t activeCells = returnLen - 6;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3b06      	subs	r3, #6
 8001672:	76fb      	strb	r3, [r7, #27]
	uint32_t max = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t min = 0xFFFFFFFF;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t voltageDelta = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]

	tx_data[0] = 0x90;
 8001682:	4b61      	ldr	r3, [pc, #388]	@ (8001808 <stackVoltageRead+0x1a4>)
 8001684:	2290      	movs	r2, #144	@ 0x90
 8001686:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x01;
 8001688:	4b5f      	ldr	r3, [pc, #380]	@ (8001808 <stackVoltageRead+0x1a4>)
 800168a:	2201      	movs	r2, #1
 800168c:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x00;
 800168e:	4b5e      	ldr	r3, [pc, #376]	@ (8001808 <stackVoltageRead+0x1a4>)
 8001690:	2200      	movs	r2, #0
 8001692:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x03;
 8001694:	4b5c      	ldr	r3, [pc, #368]	@ (8001808 <stackVoltageRead+0x1a4>)
 8001696:	2203      	movs	r2, #3
 8001698:	70da      	strb	r2, [r3, #3]
	tx_data[4] = activeCells & 0xFF;;
 800169a:	4a5b      	ldr	r2, [pc, #364]	@ (8001808 <stackVoltageRead+0x1a4>)
 800169c:	7efb      	ldrb	r3, [r7, #27]
 800169e:	7113      	strb	r3, [r2, #4]
	status = SpiWrite(5);
 80016a0:	2005      	movs	r0, #5
 80016a2:	f7ff fecf 	bl	8001444 <SpiWrite>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b58      	ldr	r3, [pc, #352]	@ (800180c <stackVoltageRead+0x1a8>)
 80016ac:	701a      	strb	r2, [r3, #0]

	tx_data[0] = 0x90;
 80016ae:	4b56      	ldr	r3, [pc, #344]	@ (8001808 <stackVoltageRead+0x1a4>)
 80016b0:	2290      	movs	r2, #144	@ 0x90
 80016b2:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x01;
 80016b4:	4b54      	ldr	r3, [pc, #336]	@ (8001808 <stackVoltageRead+0x1a4>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x03;
 80016ba:	4b53      	ldr	r3, [pc, #332]	@ (8001808 <stackVoltageRead+0x1a4>)
 80016bc:	2203      	movs	r2, #3
 80016be:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x0D;
 80016c0:	4b51      	ldr	r3, [pc, #324]	@ (8001808 <stackVoltageRead+0x1a4>)
 80016c2:	220d      	movs	r2, #13
 80016c4:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x06;
 80016c6:	4b50      	ldr	r3, [pc, #320]	@ (8001808 <stackVoltageRead+0x1a4>)
 80016c8:	2206      	movs	r2, #6
 80016ca:	711a      	strb	r2, [r3, #4]
	status = SpiWrite(5);
 80016cc:	2005      	movs	r0, #5
 80016ce:	f7ff feb9 	bl	8001444 <SpiWrite>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b4d      	ldr	r3, [pc, #308]	@ (800180c <stackVoltageRead+0x1a8>)
 80016d8:	701a      	strb	r2, [r3, #0]


	if (status != HAL_OK) {
 80016da:	4b4c      	ldr	r3, [pc, #304]	@ (800180c <stackVoltageRead+0x1a8>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <stackVoltageRead+0x8a>
		printf("VREAD WRITE BAD");
 80016e2:	484b      	ldr	r0, [pc, #300]	@ (8001810 <stackVoltageRead+0x1ac>)
 80016e4:	f004 fac0 	bl	8005c68 <iprintf>
		return status;
 80016e8:	4b48      	ldr	r3, [pc, #288]	@ (800180c <stackVoltageRead+0x1a8>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	e087      	b.n	80017fe <stackVoltageRead+0x19a>
	}

	uint16_t VCELLHI = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	84fb      	strh	r3, [r7, #38]	@ 0x26

	if(returnLen == 16){
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b10      	cmp	r3, #16
 80016f6:	d103      	bne.n	8001700 <stackVoltageRead+0x9c>
		VCELLHI = 0x0568;
 80016f8:	f44f 63ad 	mov.w	r3, #1384	@ 0x568
 80016fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80016fe:	e002      	b.n	8001706 <stackVoltageRead+0xa2>
	}
	else
		VCELLHI = 0x056C;
 8001700:	f240 536c 	movw	r3, #1388	@ 0x56c
 8001704:	84fb      	strh	r3, [r7, #38]	@ 0x26

	//starting address
	printf("---------\r\n");
 8001706:	4843      	ldr	r0, [pc, #268]	@ (8001814 <stackVoltageRead+0x1b0>)
 8001708:	f004 fb16 	bl	8005d38 <puts>

	uint32_t singleCell = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
	uint32_t stackTotal = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]

	for(int i = 0; i <= returnLen - 1; i++){
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	e045      	b.n	80017a6 <stackVoltageRead+0x142>

		Delay_us((192 + 5) * 2);
 800171a:	f44f 70c5 	mov.w	r0, #394	@ 0x18a
 800171e:	f000 fbd5 	bl	8001ecc <Delay_us>

		tx_data[0] = 0x80;
 8001722:	4b39      	ldr	r3, [pc, #228]	@ (8001808 <stackVoltageRead+0x1a4>)
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	701a      	strb	r2, [r3, #0]
		tx_data[1] = 0x01;
 8001728:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <stackVoltageRead+0x1a4>)
 800172a:	2201      	movs	r2, #1
 800172c:	705a      	strb	r2, [r3, #1]
		tx_data[2] = ((VCELLHI >> 8) & 0xFF);
 800172e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	b29b      	uxth	r3, r3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <stackVoltageRead+0x1a4>)
 8001738:	709a      	strb	r2, [r3, #2]
		tx_data[3] = VCELLHI & 0xFF;
 800173a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <stackVoltageRead+0x1a4>)
 8001740:	70da      	strb	r2, [r3, #3]
		tx_data[4] = 0x01;
 8001742:	4b31      	ldr	r3, [pc, #196]	@ (8001808 <stackVoltageRead+0x1a4>)
 8001744:	2201      	movs	r2, #1
 8001746:	711a      	strb	r2, [r3, #4]

		status = SpiRead(5,6 + 2);
 8001748:	2108      	movs	r1, #8
 800174a:	2005      	movs	r0, #5
 800174c:	f7ff feec 	bl	8001528 <SpiRead>
 8001750:	4603      	mov	r3, r0
 8001752:	461a      	mov	r2, r3
 8001754:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <stackVoltageRead+0x1a8>)
 8001756:	701a      	strb	r2, [r3, #0]

		singleCell = convert_adc_to_voltage(rx_data[4], rx_data[5]);
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <stackVoltageRead+0x1b4>)
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	4a2e      	ldr	r2, [pc, #184]	@ (8001818 <stackVoltageRead+0x1b4>)
 800175e:	7952      	ldrb	r2, [r2, #5]
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f864 	bl	8001830 <convert_adc_to_voltage>
 8001768:	6138      	str	r0, [r7, #16]

		if(singleCell > max){
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176e:	429a      	cmp	r2, r3
 8001770:	d902      	bls.n	8001778 <stackVoltageRead+0x114>
			max = singleCell;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001776:	e005      	b.n	8001784 <stackVoltageRead+0x120>
		}
		else if(singleCell < min){
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177c:	429a      	cmp	r2, r3
 800177e:	d201      	bcs.n	8001784 <stackVoltageRead+0x120>
			min = singleCell;
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
		}

		// Using fixed-point arithmetic (scaling by 1000 for millivolts)
		printf("Cell %d: %ld \r\n", i + 1, singleCell);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	3301      	adds	r3, #1
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4619      	mov	r1, r3
 800178c:	4823      	ldr	r0, [pc, #140]	@ (800181c <stackVoltageRead+0x1b8>)
 800178e:	f004 fa6b 	bl	8005c68 <iprintf>
		stackTotal += singleCell;
 8001792:	6a3a      	ldr	r2, [r7, #32]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4413      	add	r3, r2
 8001798:	623b      	str	r3, [r7, #32]
		VCELLHI += 2;
 800179a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800179c:	3302      	adds	r3, #2
 800179e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	for(int i = 0; i <= returnLen - 1; i++){
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	3301      	adds	r3, #1
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	dcb5      	bgt.n	800171a <stackVoltageRead+0xb6>
	}

	voltageDelta = max - min;
 80017ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	617b      	str	r3, [r7, #20]

	printf("Stack Voltage: %ld \r\n", stackTotal);
 80017b6:	6a39      	ldr	r1, [r7, #32]
 80017b8:	4819      	ldr	r0, [pc, #100]	@ (8001820 <stackVoltageRead+0x1bc>)
 80017ba:	f004 fa55 	bl	8005c68 <iprintf>
	printf("V-Delta: %ld \r\n", voltageDelta);
 80017be:	6979      	ldr	r1, [r7, #20]
 80017c0:	4818      	ldr	r0, [pc, #96]	@ (8001824 <stackVoltageRead+0x1c0>)
 80017c2:	f004 fa51 	bl	8005c68 <iprintf>
	printf("---------\r\n");
 80017c6:	4813      	ldr	r0, [pc, #76]	@ (8001814 <stackVoltageRead+0x1b0>)
 80017c8:	f004 fab6 	bl	8005d38 <puts>

	if (status != HAL_OK) {
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <stackVoltageRead+0x1a8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <stackVoltageRead+0x176>
	    	return status;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <stackVoltageRead+0x1a8>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	e011      	b.n	80017fe <stackVoltageRead+0x19a>
	    }

	uint32_t avgCellVoltage = stackTotal / ACTIVECHANNELS;
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	085b      	lsrs	r3, r3, #1
 80017de:	4a12      	ldr	r2, [pc, #72]	@ (8001828 <stackVoltageRead+0x1c4>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	60fb      	str	r3, [r7, #12]
	uint8_t stackSOC = getBatterySOC(avgCellVoltage);
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f7ff faff 	bl	8000dec <getBatterySOC>
 80017ee:	4603      	mov	r3, r0
 80017f0:	72fb      	strb	r3, [r7, #11]
	printf("Average Stack SOC: %d%%\r\n", stackSOC);
 80017f2:	7afb      	ldrb	r3, [r7, #11]
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	@ (800182c <stackVoltageRead+0x1c8>)
 80017f8:	f004 fa36 	bl	8005c68 <iprintf>

	return HAL_OK;
 80017fc:	2300      	movs	r3, #0

}
 80017fe:	4618      	mov	r0, r3
 8001800:	3730      	adds	r7, #48	@ 0x30
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200001f8 	.word	0x200001f8
 800180c:	200001f2 	.word	0x200001f2
 8001810:	08007c74 	.word	0x08007c74
 8001814:	08007c84 	.word	0x08007c84
 8001818:	20000200 	.word	0x20000200
 800181c:	08007c90 	.word	0x08007c90
 8001820:	08007ca0 	.word	0x08007ca0
 8001824:	08007cb8 	.word	0x08007cb8
 8001828:	92492493 	.word	0x92492493
 800182c:	08007cc8 	.word	0x08007cc8

08001830 <convert_adc_to_voltage>:

uint32_t convert_adc_to_voltage(uint8_t high_byte, uint8_t low_byte)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	460a      	mov	r2, r1
 800183a:	71fb      	strb	r3, [r7, #7]
 800183c:	4613      	mov	r3, r2
 800183e:	71bb      	strb	r3, [r7, #6]
    // 1. Combine high and low bytes into a 16-bit signed value
    uint16_t raw_value = (uint16_t)((high_byte << 8) | low_byte);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b21a      	sxth	r2, r3
 8001846:	79bb      	ldrb	r3, [r7, #6]
 8001848:	b21b      	sxth	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	b21b      	sxth	r3, r3
 800184e:	82fb      	strh	r3, [r7, #22]

    // 2. Convert to microvolts (190.73 μV/LSB = 19073/100)
    uint32_t microvolts = (uint32_t)raw_value * 19073 / 100;
 8001850:	8afb      	ldrh	r3, [r7, #22]
 8001852:	f644 2281 	movw	r2, #19073	@ 0x4a81
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	4a08      	ldr	r2, [pc, #32]	@ (800187c <convert_adc_to_voltage+0x4c>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	613b      	str	r3, [r7, #16]

    // 3. Convert to millivolts for better readability
    uint32_t millivolts = microvolts / 1000;
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4a06      	ldr	r2, [pc, #24]	@ (8001880 <convert_adc_to_voltage+0x50>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	60fb      	str	r3, [r7, #12]

    return millivolts;
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	4618      	mov	r0, r3
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	51eb851f 	.word	0x51eb851f
 8001880:	10624dd3 	.word	0x10624dd3

08001884 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800188c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001890:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800189c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80018a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80018a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00b      	beq.n	80018c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80018ac:	e000      	b.n	80018b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80018ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80018b0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f9      	beq.n	80018ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80018ba:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80018c4:	687b      	ldr	r3, [r7, #4]
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <_write>:
void Delay_us(uint32_t us);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  int i = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  for(i = 0; i<len; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e009      	b.n	80018fa <_write+0x2a>
    ITM_SendChar((*ptr++));
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	60ba      	str	r2, [r7, #8]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ffc8 	bl	8001884 <ITM_SendChar>
  for(i = 0; i<len; i++)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	dbf1      	blt.n	80018e6 <_write+0x16>
  return len;
 8001902:	687b      	ldr	r3, [r7, #4]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001912:	f000 fe0f 	bl	8002534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001916:	f000 f85f 	bl	80019d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191a:	f000 fa37 	bl	8001d8c <MX_GPIO_Init>
  MX_CAN1_Init();
 800191e:	f000 f8f3 	bl	8001b08 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001922:	f000 f927 	bl	8001b74 <MX_CAN2_Init>
  // MX_SDIO_SD_Init();
  MX_SPI1_Init();
 8001926:	f000 f959 	bl	8001bdc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800192a:	f000 fa05 	bl	8001d38 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800192e:	f000 f9d9 	bl	8001ce4 <MX_UART4_Init>
  MX_ADC1_Init();
 8001932:	f000 f897 	bl	8001a64 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001936:	f000 f987 	bl	8001c48 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800193a:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <main+0xa8>)
 800193c:	f001 f9f1 	bl	8002d22 <HAL_CAN_Start>
  HAL_TIM_Base_Start(&htim4);
 8001940:	481d      	ldr	r0, [pc, #116]	@ (80019b8 <main+0xac>)
 8001942:	f003 f851 	bl	80049e8 <HAL_TIM_Base_Start>

  printf("BQ79600 Battery Monitor System Starting...\r\n");
 8001946:	481d      	ldr	r0, [pc, #116]	@ (80019bc <main+0xb0>)
 8001948:	f004 f9f6 	bl	8005d38 <puts>

  // Step 2: Wake up and initialize the BQ79600 and BQ79616

  printf("Waking up BQ79600...\r\n");
 800194c:	481c      	ldr	r0, [pc, #112]	@ (80019c0 <main+0xb4>)
 800194e:	f004 f9f3 	bl	8005d38 <puts>
  // wake is true if device went into shutdown mode
  bool wake = false;
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]
  status = BQ79600_WakeUp(TOTALBOARDS,wake);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4619      	mov	r1, r3
 800195a:	2002      	movs	r0, #2
 800195c:	f7ff fb3c 	bl	8000fd8 <BQ79600_WakeUp>
 8001960:	4603      	mov	r3, r0
 8001962:	71bb      	strb	r3, [r7, #6]
  if(status == HAL_OK){
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <main+0x64>
	  printf("Wake GOOD\r\n");
 800196a:	4816      	ldr	r0, [pc, #88]	@ (80019c4 <main+0xb8>)
 800196c:	f004 f9e4 	bl	8005d38 <puts>
  }

  //auto-address the stack
  printf("Auto-addressing...\r\n");
 8001970:	4815      	ldr	r0, [pc, #84]	@ (80019c8 <main+0xbc>)
 8001972:	f004 f9e1 	bl	8005d38 <puts>
  status = SpiAutoAddress(TOTALBOARDS);
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff fbb2 	bl	80010e0 <SpiAutoAddress>
 800197c:	4603      	mov	r3, r0
 800197e:	71bb      	strb	r3, [r7, #6]
  if(status == HAL_OK){
 8001980:	79bb      	ldrb	r3, [r7, #6]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <main+0x82>
  	  printf("Auto-addressing GOOD\r\n");
 8001986:	4811      	ldr	r0, [pc, #68]	@ (80019cc <main+0xc0>)
 8001988:	f004 f9d6 	bl	8005d38 <puts>
 800198c:	e004      	b.n	8001998 <main+0x8c>
   }
  else
	  printf("HAL ERROR %d\r\n", status);
 800198e:	79bb      	ldrb	r3, [r7, #6]
 8001990:	4619      	mov	r1, r3
 8001992:	480f      	ldr	r0, [pc, #60]	@ (80019d0 <main+0xc4>)
 8001994:	f004 f968 	bl	8005c68 <iprintf>


  printf("Initialization complete, starting main loop...\r\n");
 8001998:	480e      	ldr	r0, [pc, #56]	@ (80019d4 <main+0xc8>)
 800199a:	f004 f9cd 	bl	8005d38 <puts>
	    	printf("ADC ERROR %d\r\n", status);
	    	*/
	}


	status = stackVoltageRead(ACTIVECHANNELS);
 800199e:	200e      	movs	r0, #14
 80019a0:	f7ff fe60 	bl	8001664 <stackVoltageRead>
 80019a4:	4603      	mov	r3, r0
 80019a6:	71bb      	strb	r3, [r7, #6]
		printf("VOLTAGE READ GOOD\r\n");
	   }
	else
		printf("VOLTAGE READ ERROR %d\r\n", status);
	*/
	HAL_Delay(1000);
 80019a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019ac:	f000 fe30 	bl	8002610 <HAL_Delay>
	if (status == HAL_OK)
 80019b0:	e7f5      	b.n	800199e <main+0x92>
 80019b2:	bf00      	nop
 80019b4:	200002c8 	.word	0x200002c8
 80019b8:	20000370 	.word	0x20000370
 80019bc:	08007cf4 	.word	0x08007cf4
 80019c0:	08007d20 	.word	0x08007d20
 80019c4:	08007d38 	.word	0x08007d38
 80019c8:	08007d44 	.word	0x08007d44
 80019cc:	08007d58 	.word	0x08007d58
 80019d0:	08007d70 	.word	0x08007d70
 80019d4:	08007d80 	.word	0x08007d80

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b092      	sub	sp, #72	@ 0x48
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	2230      	movs	r2, #48	@ 0x30
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 fa86 	bl	8005ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a02:	2302      	movs	r3, #2
 8001a04:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a06:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001a0c:	230d      	movs	r3, #13
 8001a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001a10:	23c3      	movs	r3, #195	@ 0xc3
 8001a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a14:	2302      	movs	r3, #2
 8001a16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001a18:	2305      	movs	r3, #5
 8001a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fecb 	bl	80037bc <HAL_RCC_OscConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a2c:	f000 fa66 	bl	8001efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a30:	230f      	movs	r3, #15
 8001a32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a34:	2302      	movs	r3, #2
 8001a36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 f909 	bl	8003c64 <HAL_RCC_ClockConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a58:	f000 fa50 	bl	8001efc <Error_Handler>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	3748      	adds	r7, #72	@ 0x48
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a76:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001a78:	4a21      	ldr	r2, [pc, #132]	@ (8001b00 <MX_ADC1_Init+0x9c>)
 8001a7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a88:	4b1c      	ldr	r3, [pc, #112]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a94:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001aa4:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <MX_ADC1_Init+0xa0>)
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac2:	480e      	ldr	r0, [pc, #56]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001ac4:	f000 fdc8 	bl	8002658 <HAL_ADC_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ace:	f000 fa15 	bl	8001efc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001ad2:	230b      	movs	r3, #11
 8001ad4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	@ (8001afc <MX_ADC1_Init+0x98>)
 8001ae4:	f000 fdfc 	bl	80026e0 <HAL_ADC_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001aee:	f000 fa05 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000280 	.word	0x20000280
 8001b00:	40012000 	.word	0x40012000
 8001b04:	0f000001 	.word	0x0f000001

08001b08 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b0e:	4a18      	ldr	r2, [pc, #96]	@ (8001b70 <MX_CAN1_Init+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b14:	220f      	movs	r2, #15
 8001b16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b18:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b2a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b56:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <MX_CAN1_Init+0x64>)
 8001b58:	f000 ffe8 	bl	8002b2c <HAL_CAN_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001b62:	f000 f9cb 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200002c8 	.word	0x200002c8
 8001b70:	40006400 	.word	0x40006400

08001b74 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001b7a:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <MX_CAN2_Init+0x64>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001b80:	220a      	movs	r2, #10
 8001b82:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b8a:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001bae:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	@ (8001bd4 <MX_CAN2_Init+0x60>)
 8001bc2:	f000 ffb3 	bl	8002b2c <HAL_CAN_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001bcc:	f000 f996 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200002f0 	.word	0x200002f0
 8001bd8:	40006800 	.word	0x40006800

08001bdc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8001be0:	4b17      	ldr	r3, [pc, #92]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001be2:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <MX_SPI1_Init+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001be6:	4b16      	ldr	r3, [pc, #88]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001be8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bee:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; // 60MHz/16 = 3.75MHz
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001c10:	2218      	movs	r2, #24
 8001c12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001c28:	220a      	movs	r2, #10
 8001c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c2c:	4804      	ldr	r0, [pc, #16]	@ (8001c40 <MX_SPI1_Init+0x64>)
 8001c2e:	f002 fa5d 	bl	80040ec <HAL_SPI_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c38:	f000 f960 	bl	8001efc <Error_Handler>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000318 	.word	0x20000318
 8001c44:	40013000 	.word	0x40013000

08001c48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c4e:	f107 0308 	add.w	r3, r7, #8
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001c66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce0 <MX_TIM4_Init+0x98>)
 8001c68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001c6c:	223c      	movs	r2, #60	@ 0x3c
 8001c6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001c78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c8a:	4814      	ldr	r0, [pc, #80]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001c8c:	f002 fe5d 	bl	800494a <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c96:	f000 f931 	bl	8001efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001ca8:	f002 ff04 	bl	8004ab4 <HAL_TIM_ConfigClockSource>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 f923 	bl	8001efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4806      	ldr	r0, [pc, #24]	@ (8001cdc <MX_TIM4_Init+0x94>)
 8001cc4:	f003 f8fe 	bl	8004ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001cce:	f000 f915 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000370 	.word	0x20000370
 8001ce0:	40000800 	.word	0x40000800

08001ce4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001cea:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <MX_UART4_Init+0x50>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b09      	ldr	r3, [pc, #36]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d1a:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <MX_UART4_Init+0x4c>)
 8001d1c:	f003 f94c 	bl	8004fb8 <HAL_UART_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d26:	f000 f8e9 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200003b8 	.word	0x200003b8
 8001d34:	40004c00 	.word	0x40004c00

08001d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <MX_USART2_UART_Init+0x50>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d42:	4b10      	ldr	r3, [pc, #64]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <MX_USART2_UART_Init+0x4c>)
 8001d70:	f003 f922 	bl	8004fb8 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d7a:	f000 f8bf 	bl	8001efc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000400 	.word	0x20000400
 8001d88:	40004400 	.word	0x40004400

08001d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b45      	ldr	r3, [pc, #276]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a44      	ldr	r2, [pc, #272]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b42      	ldr	r3, [pc, #264]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	4a3d      	ldr	r2, [pc, #244]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dce:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a36      	ldr	r2, [pc, #216]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b34      	ldr	r3, [pc, #208]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b30      	ldr	r3, [pc, #192]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b29      	ldr	r3, [pc, #164]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a28      	ldr	r2, [pc, #160]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e1c:	f043 0308 	orr.w	r3, r3, #8
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b26      	ldr	r3, [pc, #152]	@ (8001ebc <MX_GPIO_Init+0x130>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2134      	movs	r1, #52	@ 0x34
 8001e32:	4823      	ldr	r0, [pc, #140]	@ (8001ec0 <MX_GPIO_Init+0x134>)
 8001e34:	f001 fca9 	bl	800378a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f240 4101 	movw	r1, #1025	@ 0x401
 8001e3e:	4821      	ldr	r0, [pc, #132]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001e40:	f001 fca3 	bl	800378a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 CHARGE_EN_LV_Pin DISCHARGE_EN_LV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin;
 8001e44:	2334      	movs	r3, #52	@ 0x34
 8001e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4819      	ldr	r0, [pc, #100]	@ (8001ec0 <MX_GPIO_Init+0x134>)
 8001e5c:	f001 fae0 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_SAFE_LV_Pin FAN_EN_LV_Pin */
  GPIO_InitStruct.Pin = CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin;
 8001e60:	f240 4301 	movw	r3, #1025	@ 0x401
 8001e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4812      	ldr	r0, [pc, #72]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001e7a:	f001 fad1 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_PWR_LV_ISO_Pin READY_PWR_LV_ISO_Pin BQ_NFAULT_Pin BQ_SPI_RDY_Pin */
  GPIO_InitStruct.Pin = CHARGE_PWR_LV_ISO_Pin|READY_PWR_LV_ISO_Pin|BQ_NFAULT_Pin|BQ_SPI_RDY_Pin;
 8001e7e:	f644 0306 	movw	r3, #18438	@ 0x4806
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <MX_GPIO_Init+0x138>)
 8001e94:	f001 fac4 	bl	8003420 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DET_Pin */
  GPIO_InitStruct.Pin = SDIO_DET_Pin;
 8001e98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4806      	ldr	r0, [pc, #24]	@ (8001ec8 <MX_GPIO_Init+0x13c>)
 8001eae:	f001 fab7 	bl	8003420 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020800 	.word	0x40020800
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020000 	.word	0x40020000

08001ecc <Delay_us>:
 * @param  us: Number of microseconds to delay
 * @retval None
 * @note   This is a placeholder - implement using a timer peripheral
 */
void Delay_us(uint32_t us)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <Delay_us+0x2c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8001edc:	bf00      	nop
 8001ede:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <Delay_us+0x2c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d8f9      	bhi.n	8001ede <Delay_us+0x12>
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000370 	.word	0x20000370

08001efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f00:	b672      	cpsid	i
}
 8001f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <Error_Handler+0x8>

08001f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <HAL_MspInit+0x48>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	4a0e      	ldr	r2, [pc, #56]	@ (8001f50 <HAL_MspInit+0x48>)
 8001f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <HAL_MspInit+0x48>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <HAL_MspInit+0x48>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <HAL_MspInit+0x48>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <HAL_MspInit+0x48>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a17      	ldr	r2, [pc, #92]	@ (8001fd0 <HAL_ADC_MspInit+0x7c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d127      	bne.n	8001fc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b16      	ldr	r3, [pc, #88]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <HAL_ADC_MspInit+0x80>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <HAL_ADC_MspInit+0x84>)
 8001fc2:	f001 fa2d 	bl	8003420 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3728      	adds	r7, #40	@ 0x28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40012000 	.word	0x40012000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40020800 	.word	0x40020800

08001fdc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08c      	sub	sp, #48	@ 0x30
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8002128 <HAL_CAN_MspInit+0x14c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d13e      	bne.n	800207c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001ffe:	4b4b      	ldr	r3, [pc, #300]	@ (800212c <HAL_CAN_MspInit+0x150>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a49      	ldr	r2, [pc, #292]	@ (800212c <HAL_CAN_MspInit+0x150>)
 8002006:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002008:	4b48      	ldr	r3, [pc, #288]	@ (800212c <HAL_CAN_MspInit+0x150>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10d      	bne.n	800202c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	4b46      	ldr	r3, [pc, #280]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	4a45      	ldr	r2, [pc, #276]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 800201a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800201e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002020:	4b43      	ldr	r3, [pc, #268]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	4b3f      	ldr	r3, [pc, #252]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4a3e      	ldr	r2, [pc, #248]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6313      	str	r3, [r2, #48]	@ 0x30
 800203c:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002048:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800204c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800205a:	2309      	movs	r3, #9
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205e:	f107 031c 	add.w	r3, r7, #28
 8002062:	4619      	mov	r1, r3
 8002064:	4833      	ldr	r0, [pc, #204]	@ (8002134 <HAL_CAN_MspInit+0x158>)
 8002066:	f001 f9db 	bl	8003420 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	2014      	movs	r0, #20
 8002070:	f001 f99f 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002074:	2014      	movs	r0, #20
 8002076:	f001 f9b8 	bl	80033ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800207a:	e050      	b.n	800211e <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2d      	ldr	r2, [pc, #180]	@ (8002138 <HAL_CAN_MspInit+0x15c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d14b      	bne.n	800211e <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b29      	ldr	r3, [pc, #164]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a28      	ldr	r2, [pc, #160]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 8002090:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b26      	ldr	r3, [pc, #152]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020a2:	4b22      	ldr	r3, [pc, #136]	@ (800212c <HAL_CAN_MspInit+0x150>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a20      	ldr	r2, [pc, #128]	@ (800212c <HAL_CAN_MspInit+0x150>)
 80020aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020ac:	4b1f      	ldr	r3, [pc, #124]	@ (800212c <HAL_CAN_MspInit+0x150>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10d      	bne.n	80020d0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 80020be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	4a15      	ldr	r2, [pc, #84]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <HAL_CAN_MspInit+0x154>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80020ec:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80020f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80020fe:	2309      	movs	r3, #9
 8002100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	4619      	mov	r1, r3
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <HAL_CAN_MspInit+0x160>)
 800210a:	f001 f989 	bl	8003420 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2040      	movs	r0, #64	@ 0x40
 8002114:	f001 f94d 	bl	80033b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002118:	2040      	movs	r0, #64	@ 0x40
 800211a:	f001 f966 	bl	80033ea <HAL_NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3730      	adds	r7, #48	@ 0x30
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40006400 	.word	0x40006400
 800212c:	20000448 	.word	0x20000448
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000
 8002138:	40006800 	.word	0x40006800
 800213c:	40020400 	.word	0x40020400

08002140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	@ 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a19      	ldr	r2, [pc, #100]	@ (80021c4 <HAL_SPI_MspInit+0x84>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d12b      	bne.n	80021ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	4b18      	ldr	r3, [pc, #96]	@ (80021c8 <HAL_SPI_MspInit+0x88>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216a:	4a17      	ldr	r2, [pc, #92]	@ (80021c8 <HAL_SPI_MspInit+0x88>)
 800216c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002170:	6453      	str	r3, [r2, #68]	@ 0x44
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <HAL_SPI_MspInit+0x88>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <HAL_SPI_MspInit+0x88>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a10      	ldr	r2, [pc, #64]	@ (80021c8 <HAL_SPI_MspInit+0x88>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <HAL_SPI_MspInit+0x88>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800219a:	23f0      	movs	r3, #240	@ 0xf0
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021aa:	2305      	movs	r3, #5
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	@ (80021cc <HAL_SPI_MspInit+0x8c>)
 80021b6:	f001 f933 	bl	8003420 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	@ 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40013000 	.word	0x40013000
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40020000 	.word	0x40020000

080021d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <HAL_TIM_Base_MspInit+0x38>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10d      	bne.n	80021fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b09      	ldr	r3, [pc, #36]	@ (800220c <HAL_TIM_Base_MspInit+0x3c>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <HAL_TIM_Base_MspInit+0x3c>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f2:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_TIM_Base_MspInit+0x3c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40000800 	.word	0x40000800
 800220c:	40023800 	.word	0x40023800

08002210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08c      	sub	sp, #48	@ 0x30
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a32      	ldr	r2, [pc, #200]	@ (80022f8 <HAL_UART_MspInit+0xe8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d12c      	bne.n	800228c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
 8002236:	4b31      	ldr	r3, [pc, #196]	@ (80022fc <HAL_UART_MspInit+0xec>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	4a30      	ldr	r2, [pc, #192]	@ (80022fc <HAL_UART_MspInit+0xec>)
 800223c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002240:	6413      	str	r3, [r2, #64]	@ 0x40
 8002242:	4b2e      	ldr	r3, [pc, #184]	@ (80022fc <HAL_UART_MspInit+0xec>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <HAL_UART_MspInit+0xec>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a29      	ldr	r2, [pc, #164]	@ (80022fc <HAL_UART_MspInit+0xec>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b27      	ldr	r3, [pc, #156]	@ (80022fc <HAL_UART_MspInit+0xec>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800226a:	2303      	movs	r3, #3
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226e:	2302      	movs	r3, #2
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002272:	2301      	movs	r3, #1
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800227a:	2308      	movs	r3, #8
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f107 031c 	add.w	r3, r7, #28
 8002282:	4619      	mov	r1, r3
 8002284:	481e      	ldr	r0, [pc, #120]	@ (8002300 <HAL_UART_MspInit+0xf0>)
 8002286:	f001 f8cb 	bl	8003420 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800228a:	e030      	b.n	80022ee <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1c      	ldr	r2, [pc, #112]	@ (8002304 <HAL_UART_MspInit+0xf4>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d12b      	bne.n	80022ee <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b18      	ldr	r3, [pc, #96]	@ (80022fc <HAL_UART_MspInit+0xec>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	4a17      	ldr	r2, [pc, #92]	@ (80022fc <HAL_UART_MspInit+0xec>)
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a6:	4b15      	ldr	r3, [pc, #84]	@ (80022fc <HAL_UART_MspInit+0xec>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HAL_UART_MspInit+0xec>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	4a10      	ldr	r2, [pc, #64]	@ (80022fc <HAL_UART_MspInit+0xec>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c2:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_UART_MspInit+0xec>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022ce:	230c      	movs	r3, #12
 80022d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022de:	2307      	movs	r3, #7
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	4805      	ldr	r0, [pc, #20]	@ (8002300 <HAL_UART_MspInit+0xf0>)
 80022ea:	f001 f899 	bl	8003420 <HAL_GPIO_Init>
}
 80022ee:	bf00      	nop
 80022f0:	3730      	adds	r7, #48	@ 0x30
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40004c00 	.word	0x40004c00
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000
 8002304:	40004400 	.word	0x40004400

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800230c:	bf00      	nop
 800230e:	e7fd      	b.n	800230c <NMI_Handler+0x4>

08002310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002314:	bf00      	nop
 8002316:	e7fd      	b.n	8002314 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <MemManage_Handler+0x4>

08002320 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <UsageFault_Handler+0x4>

08002330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002358:	f000 f93e 	bl	80025d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <CAN1_RX0_IRQHandler+0x10>)
 8002366:	f000 fd20 	bl	8002daa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200002c8 	.word	0x200002c8

08002374 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <CAN2_RX0_IRQHandler+0x10>)
 800237a:	f000 fd16 	bl	8002daa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200002f0 	.word	0x200002f0

08002388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return 1;
 800238c:	2301      	movs	r3, #1
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <_kill>:

int _kill(int pid, int sig)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023a0:	f003 fdfc 	bl	8005f9c <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2216      	movs	r2, #22
 80023a8:	601a      	str	r2, [r3, #0]
  return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_exit>:

void _exit (int status)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023be:	f04f 31ff 	mov.w	r1, #4294967295
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffe7 	bl	8002396 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <_exit+0x12>

080023cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	e00a      	b.n	80023f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023de:	f3af 8000 	nop.w
 80023e2:	4601      	mov	r1, r0
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	60ba      	str	r2, [r7, #8]
 80023ea:	b2ca      	uxtb	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbf0      	blt.n	80023de <_read+0x12>
  }

  return len;
 80023fc:	687b      	ldr	r3, [r7, #4]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800242c:	605a      	str	r2, [r3, #4]
  return 0;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <_isatty>:

int _isatty(int file)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
	...

08002468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002470:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <_sbrk+0x5c>)
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <_sbrk+0x60>)
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800247c:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <_sbrk+0x64>)
 8002486:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <_sbrk+0x68>)
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	429a      	cmp	r2, r3
 8002496:	d207      	bcs.n	80024a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002498:	f003 fd80 	bl	8005f9c <__errno>
 800249c:	4603      	mov	r3, r0
 800249e:	220c      	movs	r2, #12
 80024a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	e009      	b.n	80024bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a8:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ae:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <_sbrk+0x64>)
 80024b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000c000 	.word	0x2000c000
 80024c8:	00000400 	.word	0x00000400
 80024cc:	2000044c 	.word	0x2000044c
 80024d0:	200005a0 	.word	0x200005a0

080024d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002518 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80024e4:	f7ff fff6 	bl	80024d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e8:	480c      	ldr	r0, [pc, #48]	@ (800251c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ea:	490d      	ldr	r1, [pc, #52]	@ (8002520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f0:	e002      	b.n	80024f8 <LoopCopyDataInit>

080024f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f6:	3304      	adds	r3, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024fc:	d3f9      	bcc.n	80024f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002500:	4c0a      	ldr	r4, [pc, #40]	@ (800252c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002504:	e001      	b.n	800250a <LoopFillZerobss>

08002506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002508:	3204      	adds	r2, #4

0800250a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800250c:	d3fb      	bcc.n	8002506 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800250e:	f003 fd4b 	bl	8005fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002512:	f7ff f9fb 	bl	800190c <main>
  bx  lr    
 8002516:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002518:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002524:	080083b8 	.word	0x080083b8
  ldr r2, =_sbss
 8002528:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800252c:	200005a0 	.word	0x200005a0

08002530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <ADC_IRQHandler>
	...

08002534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002538:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <HAL_Init+0x40>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <HAL_Init+0x40>)
 800253e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002544:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <HAL_Init+0x40>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <HAL_Init+0x40>)
 800254a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800254e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002550:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a07      	ldr	r2, [pc, #28]	@ (8002574 <HAL_Init+0x40>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255c:	2003      	movs	r0, #3
 800255e:	f000 ff1d 	bl	800339c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002562:	200f      	movs	r0, #15
 8002564:	f000 f808 	bl	8002578 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002568:	f7ff fcce 	bl	8001f08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023c00 	.word	0x40023c00

08002578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_InitTick+0x54>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_InitTick+0x58>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f000 ff35 	bl	8003406 <HAL_SYSTICK_Config>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00e      	b.n	80025c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b0f      	cmp	r3, #15
 80025aa:	d80a      	bhi.n	80025c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025ac:	2200      	movs	r2, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f000 fefd 	bl	80033b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b8:	4a06      	ldr	r2, [pc, #24]	@ (80025d4 <HAL_InitTick+0x5c>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000008 	.word	0x20000008
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <HAL_IncTick+0x1c>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_IncTick+0x20>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	4a03      	ldr	r2, [pc, #12]	@ (80025f8 <HAL_IncTick+0x20>)
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	20000008 	.word	0x20000008
 80025f8:	20000450 	.word	0x20000450

080025fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b02      	ldr	r3, [pc, #8]	@ (800260c <HAL_GetTick+0x10>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	20000450 	.word	0x20000450

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff fff0 	bl	80025fc <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <HAL_Delay+0x44>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffe0 	bl	80025fc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000008 	.word	0x20000008

08002658 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002660:	2300      	movs	r3, #0
 8002662:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e033      	b.n	80026d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fc6c 	bl	8001f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800269e:	f023 0302 	bic.w	r3, r3, #2
 80026a2:	f043 0202 	orr.w	r2, r3, #2
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f938 	bl	8002920 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f023 0303 	bic.w	r3, r3, #3
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c6:	e001      	b.n	80026cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e103      	b.n	8002904 <HAL_ADC_ConfigChannel+0x224>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b09      	cmp	r3, #9
 800270a:	d925      	bls.n	8002758 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68d9      	ldr	r1, [r3, #12]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	3b1e      	subs	r3, #30
 8002722:	2207      	movs	r2, #7
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43da      	mvns	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	400a      	ands	r2, r1
 8002730:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68d9      	ldr	r1, [r3, #12]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	b29b      	uxth	r3, r3
 8002742:	4618      	mov	r0, r3
 8002744:	4603      	mov	r3, r0
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4403      	add	r3, r0
 800274a:	3b1e      	subs	r3, #30
 800274c:	409a      	lsls	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	e022      	b.n	800279e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	2207      	movs	r2, #7
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	400a      	ands	r2, r1
 800277a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	4603      	mov	r3, r0
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4403      	add	r3, r0
 8002794:	409a      	lsls	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d824      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	3b05      	subs	r3, #5
 80027b8:	221f      	movs	r2, #31
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43da      	mvns	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	400a      	ands	r2, r1
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4618      	mov	r0, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ee:	e04c      	b.n	800288a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d824      	bhi.n	8002842 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b23      	subs	r3, #35	@ 0x23
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43da      	mvns	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	400a      	ands	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b23      	subs	r3, #35	@ 0x23
 8002834:	fa00 f203 	lsl.w	r2, r0, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002840:	e023      	b.n	800288a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	3b41      	subs	r3, #65	@ 0x41
 8002854:	221f      	movs	r2, #31
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	400a      	ands	r2, r1
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b41      	subs	r3, #65	@ 0x41
 800287e:	fa00 f203 	lsl.w	r2, r0, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a20      	ldr	r2, [pc, #128]	@ (8002910 <HAL_ADC_ConfigChannel+0x230>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d109      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1c8>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b12      	cmp	r3, #18
 800289a:	d105      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800289c:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <HAL_ADC_ConfigChannel+0x234>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <HAL_ADC_ConfigChannel+0x234>)
 80028a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028a6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a18      	ldr	r2, [pc, #96]	@ (8002910 <HAL_ADC_ConfigChannel+0x230>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d123      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x21a>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d003      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x1e2>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b11      	cmp	r3, #17
 80028c0:	d11b      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80028c2:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <HAL_ADC_ConfigChannel+0x234>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4a13      	ldr	r2, [pc, #76]	@ (8002914 <HAL_ADC_ConfigChannel+0x234>)
 80028c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028cc:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d111      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028d6:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <HAL_ADC_ConfigChannel+0x238>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a10      	ldr	r2, [pc, #64]	@ (800291c <HAL_ADC_ConfigChannel+0x23c>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	0c9a      	lsrs	r2, r3, #18
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80028ec:	e002      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f9      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	40012000 	.word	0x40012000
 8002914:	40012300 	.word	0x40012300
 8002918:	20000000 	.word	0x20000000
 800291c:	431bde83 	.word	0x431bde83

08002920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002928:	4b7e      	ldr	r3, [pc, #504]	@ (8002b24 <ADC_Init+0x204>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a7d      	ldr	r2, [pc, #500]	@ (8002b24 <ADC_Init+0x204>)
 800292e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002932:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002934:	4b7b      	ldr	r3, [pc, #492]	@ (8002b24 <ADC_Init+0x204>)
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4979      	ldr	r1, [pc, #484]	@ (8002b24 <ADC_Init+0x204>)
 800293e:	4313      	orrs	r3, r2
 8002940:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002974:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6859      	ldr	r1, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002996:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ae:	4a5e      	ldr	r2, [pc, #376]	@ (8002b28 <ADC_Init+0x208>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d022      	beq.n	80029fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6899      	ldr	r1, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6899      	ldr	r1, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	e00f      	b.n	8002a1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0202 	bic.w	r2, r2, #2
 8002a28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6899      	ldr	r1, [r3, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7e1b      	ldrb	r3, [r3, #24]
 8002a34:	005a      	lsls	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d027      	beq.n	8002a98 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002a72:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	fa92 f2a2 	rbit	r2, r2
 8002a7a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	fab2 f282 	clz	r2, r2
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	fa03 f102 	lsl.w	r1, r3, r2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	e007      	b.n	8002aa8 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	051a      	lsls	r2, r3, #20
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002adc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6899      	ldr	r1, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002aea:	025a      	lsls	r2, r3, #9
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	029a      	lsls	r2, r3, #10
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	609a      	str	r2, [r3, #8]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40012300 	.word	0x40012300
 8002b28:	0f000001 	.word	0x0f000001

08002b2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0ed      	b.n	8002d1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d102      	bne.n	8002b50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff fa46 	bl	8001fdc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b60:	f7ff fd4c 	bl	80025fc <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b66:	e012      	b.n	8002b8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b68:	f7ff fd48 	bl	80025fc <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b0a      	cmp	r3, #10
 8002b74:	d90b      	bls.n	8002b8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2205      	movs	r2, #5
 8002b86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e0c5      	b.n	8002d1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0e5      	beq.n	8002b68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0202 	bic.w	r2, r2, #2
 8002baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bac:	f7ff fd26 	bl	80025fc <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bb2:	e012      	b.n	8002bda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bb4:	f7ff fd22 	bl	80025fc <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b0a      	cmp	r3, #10
 8002bc0:	d90b      	bls.n	8002bda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2205      	movs	r2, #5
 8002bd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e09f      	b.n	8002d1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e5      	bne.n	8002bb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7e1b      	ldrb	r3, [r3, #24]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d108      	bne.n	8002c02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	e007      	b.n	8002c12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	7e5b      	ldrb	r3, [r3, #25]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e007      	b.n	8002c3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7e9b      	ldrb	r3, [r3, #26]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d108      	bne.n	8002c56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0220 	orr.w	r2, r2, #32
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e007      	b.n	8002c66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0220 	bic.w	r2, r2, #32
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7edb      	ldrb	r3, [r3, #27]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d108      	bne.n	8002c80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0210 	bic.w	r2, r2, #16
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e007      	b.n	8002c90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0210 	orr.w	r2, r2, #16
 8002c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7f1b      	ldrb	r3, [r3, #28]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0208 	orr.w	r2, r2, #8
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e007      	b.n	8002cba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0208 	bic.w	r2, r2, #8
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7f5b      	ldrb	r3, [r3, #29]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d108      	bne.n	8002cd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f042 0204 	orr.w	r2, r2, #4
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	e007      	b.n	8002ce4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0204 	bic.w	r2, r2, #4
 8002ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	ea42 0103 	orr.w	r1, r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d12e      	bne.n	8002d94 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d4e:	f7ff fc55 	bl	80025fc <HAL_GetTick>
 8002d52:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d54:	e012      	b.n	8002d7c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d56:	f7ff fc51 	bl	80025fc <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b0a      	cmp	r3, #10
 8002d62:	d90b      	bls.n	8002d7c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2205      	movs	r2, #5
 8002d74:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e012      	b.n	8002da2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e5      	bne.n	8002d56 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e006      	b.n	8002da2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b08a      	sub	sp, #40	@ 0x28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d07c      	beq.n	8002eea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d023      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f983 	bl	8003118 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e12:	e016      	b.n	8002e42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d004      	beq.n	8002e28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e26:	e00c      	b.n	8002e42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	e002      	b.n	8002e42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f986 	bl	800314e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d024      	beq.n	8002e96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f962 	bl	800312a <HAL_CAN_TxMailbox1CompleteCallback>
 8002e66:	e016      	b.n	8002e96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d004      	beq.n	8002e7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7a:	e00c      	b.n	8002e96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8e:	e002      	b.n	8002e96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f965 	bl	8003160 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d024      	beq.n	8002eea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ea8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f941 	bl	800313c <HAL_CAN_TxMailbox2CompleteCallback>
 8002eba:	e016      	b.n	8002eea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ece:	e00c      	b.n	8002eea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee2:	e002      	b.n	8002eea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f944 	bl	8003172 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2208      	movs	r2, #8
 8002f28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f933 	bl	8003196 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0303 	and.w	r3, r3, #3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f91b 	bl	8003184 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00c      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2210      	movs	r2, #16
 8002f70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f913 	bl	80031ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8fb 	bl	80031a8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00b      	beq.n	8002fd4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2210      	movs	r2, #16
 8002fcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8fc 	bl	80031cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00b      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d006      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f8f4 	bl	80031de <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d07b      	beq.n	80030f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d072      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003064:	2b00      	cmp	r3, #0
 8003066:	d043      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03e      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003078:	2b60      	cmp	r3, #96	@ 0x60
 800307a:	d02b      	beq.n	80030d4 <HAL_CAN_IRQHandler+0x32a>
 800307c:	2b60      	cmp	r3, #96	@ 0x60
 800307e:	d82e      	bhi.n	80030de <HAL_CAN_IRQHandler+0x334>
 8003080:	2b50      	cmp	r3, #80	@ 0x50
 8003082:	d022      	beq.n	80030ca <HAL_CAN_IRQHandler+0x320>
 8003084:	2b50      	cmp	r3, #80	@ 0x50
 8003086:	d82a      	bhi.n	80030de <HAL_CAN_IRQHandler+0x334>
 8003088:	2b40      	cmp	r3, #64	@ 0x40
 800308a:	d019      	beq.n	80030c0 <HAL_CAN_IRQHandler+0x316>
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d826      	bhi.n	80030de <HAL_CAN_IRQHandler+0x334>
 8003090:	2b30      	cmp	r3, #48	@ 0x30
 8003092:	d010      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x30c>
 8003094:	2b30      	cmp	r3, #48	@ 0x30
 8003096:	d822      	bhi.n	80030de <HAL_CAN_IRQHandler+0x334>
 8003098:	2b10      	cmp	r3, #16
 800309a:	d002      	beq.n	80030a2 <HAL_CAN_IRQHandler+0x2f8>
 800309c:	2b20      	cmp	r3, #32
 800309e:	d005      	beq.n	80030ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030a0:	e01d      	b.n	80030de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030aa:	e019      	b.n	80030e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	f043 0310 	orr.w	r3, r3, #16
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030b4:	e014      	b.n	80030e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	f043 0320 	orr.w	r3, r3, #32
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030be:	e00f      	b.n	80030e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030c8:	e00a      	b.n	80030e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030d2:	e005      	b.n	80030e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80030dc:	e000      	b.n	80030e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80030de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80030ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2204      	movs	r2, #4
 80030f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	431a      	orrs	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f870 	bl	80031f0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003110:	bf00      	nop
 8003112:	3728      	adds	r7, #40	@ 0x28
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr

0800312a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr

08003196 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr

080031ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <__NVIC_SetPriorityGrouping>:
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	bc80      	pop	{r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4906      	ldr	r1, [pc, #24]	@ (800329c <__NVIC_EnableIRQ+0x34>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100

080032a0 <__NVIC_SetPriority>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	db0a      	blt.n	80032ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	490c      	ldr	r1, [pc, #48]	@ (80032ec <__NVIC_SetPriority+0x4c>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	0112      	lsls	r2, r2, #4
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	440b      	add	r3, r1
 80032c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80032c8:	e00a      	b.n	80032e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4908      	ldr	r1, [pc, #32]	@ (80032f0 <__NVIC_SetPriority+0x50>)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	3b04      	subs	r3, #4
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	440b      	add	r3, r1
 80032de:	761a      	strb	r2, [r3, #24]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <NVIC_EncodePriority>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	@ 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f1c3 0307 	rsb	r3, r3, #7
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf28      	it	cs
 8003312:	2304      	movcs	r3, #4
 8003314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3304      	adds	r3, #4
 800331a:	2b06      	cmp	r3, #6
 800331c:	d902      	bls.n	8003324 <NVIC_EncodePriority+0x30>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3b03      	subs	r3, #3
 8003322:	e000      	b.n	8003326 <NVIC_EncodePriority+0x32>
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	401a      	ands	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800333c:	f04f 31ff 	mov.w	r1, #4294967295
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	43d9      	mvns	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	4313      	orrs	r3, r2
}
 800334e:	4618      	mov	r0, r3
 8003350:	3724      	adds	r7, #36	@ 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr

08003358 <SysTick_Config>:
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003368:	d301      	bcc.n	800336e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800336a:	2301      	movs	r3, #1
 800336c:	e00f      	b.n	800338e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800336e:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <SysTick_Config+0x40>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003376:	210f      	movs	r1, #15
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	f7ff ff90 	bl	80032a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <SysTick_Config+0x40>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003386:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <SysTick_Config+0x40>)
 8003388:	2207      	movs	r2, #7
 800338a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	e000e010 	.word	0xe000e010

0800339c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff2d 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	4603      	mov	r3, r0
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033c4:	f7ff ff42 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	68b9      	ldr	r1, [r7, #8]
 80033ce:	6978      	ldr	r0, [r7, #20]
 80033d0:	f7ff ff90 	bl	80032f4 <NVIC_EncodePriority>
 80033d4:	4602      	mov	r2, r0
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff5f 	bl	80032a0 <__NVIC_SetPriority>
}
 80033e2:	bf00      	nop
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	4603      	mov	r3, r0
 80033f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff35 	bl	8003268 <__NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff ffa2 	bl	8003358 <SysTick_Config>
 8003414:	4603      	mov	r3, r0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342e:	e16f      	b.n	8003710 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2101      	movs	r1, #1
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	4013      	ands	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8161 	beq.w	800370a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b01      	cmp	r3, #1
 8003452:	d005      	beq.n	8003460 <HAL_GPIO_Init+0x40>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d130      	bne.n	80034c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2203      	movs	r2, #3
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4013      	ands	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003496:	2201      	movs	r2, #1
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4013      	ands	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 0201 	and.w	r2, r3, #1
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d017      	beq.n	80034fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d123      	bne.n	8003552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	08da      	lsrs	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3208      	adds	r2, #8
 8003512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	220f      	movs	r2, #15
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4013      	ands	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4313      	orrs	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	08da      	lsrs	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3208      	adds	r2, #8
 800354c:	6939      	ldr	r1, [r7, #16]
 800354e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	2203      	movs	r2, #3
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4013      	ands	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f003 0203 	and.w	r2, r3, #3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80bb 	beq.w	800370a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	4b64      	ldr	r3, [pc, #400]	@ (800372c <HAL_GPIO_Init+0x30c>)
 800359a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359c:	4a63      	ldr	r2, [pc, #396]	@ (800372c <HAL_GPIO_Init+0x30c>)
 800359e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80035a4:	4b61      	ldr	r3, [pc, #388]	@ (800372c <HAL_GPIO_Init+0x30c>)
 80035a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003730 <HAL_GPIO_Init+0x310>)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	3302      	adds	r3, #2
 80035b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	220f      	movs	r2, #15
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a57      	ldr	r2, [pc, #348]	@ (8003734 <HAL_GPIO_Init+0x314>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d031      	beq.n	8003640 <HAL_GPIO_Init+0x220>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a56      	ldr	r2, [pc, #344]	@ (8003738 <HAL_GPIO_Init+0x318>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02b      	beq.n	800363c <HAL_GPIO_Init+0x21c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a55      	ldr	r2, [pc, #340]	@ (800373c <HAL_GPIO_Init+0x31c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d025      	beq.n	8003638 <HAL_GPIO_Init+0x218>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a54      	ldr	r2, [pc, #336]	@ (8003740 <HAL_GPIO_Init+0x320>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d01f      	beq.n	8003634 <HAL_GPIO_Init+0x214>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a53      	ldr	r2, [pc, #332]	@ (8003744 <HAL_GPIO_Init+0x324>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d019      	beq.n	8003630 <HAL_GPIO_Init+0x210>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a52      	ldr	r2, [pc, #328]	@ (8003748 <HAL_GPIO_Init+0x328>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <HAL_GPIO_Init+0x20c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a51      	ldr	r2, [pc, #324]	@ (800374c <HAL_GPIO_Init+0x32c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00d      	beq.n	8003628 <HAL_GPIO_Init+0x208>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a50      	ldr	r2, [pc, #320]	@ (8003750 <HAL_GPIO_Init+0x330>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d007      	beq.n	8003624 <HAL_GPIO_Init+0x204>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a4f      	ldr	r2, [pc, #316]	@ (8003754 <HAL_GPIO_Init+0x334>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_GPIO_Init+0x200>
 800361c:	2308      	movs	r3, #8
 800361e:	e010      	b.n	8003642 <HAL_GPIO_Init+0x222>
 8003620:	2309      	movs	r3, #9
 8003622:	e00e      	b.n	8003642 <HAL_GPIO_Init+0x222>
 8003624:	2307      	movs	r3, #7
 8003626:	e00c      	b.n	8003642 <HAL_GPIO_Init+0x222>
 8003628:	2306      	movs	r3, #6
 800362a:	e00a      	b.n	8003642 <HAL_GPIO_Init+0x222>
 800362c:	2305      	movs	r3, #5
 800362e:	e008      	b.n	8003642 <HAL_GPIO_Init+0x222>
 8003630:	2304      	movs	r3, #4
 8003632:	e006      	b.n	8003642 <HAL_GPIO_Init+0x222>
 8003634:	2303      	movs	r3, #3
 8003636:	e004      	b.n	8003642 <HAL_GPIO_Init+0x222>
 8003638:	2302      	movs	r3, #2
 800363a:	e002      	b.n	8003642 <HAL_GPIO_Init+0x222>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_GPIO_Init+0x222>
 8003640:	2300      	movs	r3, #0
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	f002 0203 	and.w	r2, r2, #3
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	4093      	lsls	r3, r2
 800364c:	461a      	mov	r2, r3
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003654:	4936      	ldr	r1, [pc, #216]	@ (8003730 <HAL_GPIO_Init+0x310>)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	3302      	adds	r3, #2
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003662:	4b3d      	ldr	r3, [pc, #244]	@ (8003758 <HAL_GPIO_Init+0x338>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003686:	4a34      	ldr	r2, [pc, #208]	@ (8003758 <HAL_GPIO_Init+0x338>)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800368c:	4b32      	ldr	r3, [pc, #200]	@ (8003758 <HAL_GPIO_Init+0x338>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	43db      	mvns	r3, r3
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036b0:	4a29      	ldr	r2, [pc, #164]	@ (8003758 <HAL_GPIO_Init+0x338>)
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036b6:	4b28      	ldr	r3, [pc, #160]	@ (8003758 <HAL_GPIO_Init+0x338>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036da:	4a1f      	ldr	r2, [pc, #124]	@ (8003758 <HAL_GPIO_Init+0x338>)
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <HAL_GPIO_Init+0x338>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003704:	4a14      	ldr	r2, [pc, #80]	@ (8003758 <HAL_GPIO_Init+0x338>)
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3301      	adds	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa22 f303 	lsr.w	r3, r2, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	f47f ae88 	bne.w	8003430 <HAL_GPIO_Init+0x10>
  }
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	371c      	adds	r7, #28
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40023800 	.word	0x40023800
 8003730:	40013800 	.word	0x40013800
 8003734:	40020000 	.word	0x40020000
 8003738:	40020400 	.word	0x40020400
 800373c:	40020800 	.word	0x40020800
 8003740:	40020c00 	.word	0x40020c00
 8003744:	40021000 	.word	0x40021000
 8003748:	40021400 	.word	0x40021400
 800374c:	40021800 	.word	0x40021800
 8003750:	40021c00 	.word	0x40021c00
 8003754:	40022000 	.word	0x40022000
 8003758:	40013c00 	.word	0x40013c00

0800375c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003774:	2301      	movs	r3, #1
 8003776:	73fb      	strb	r3, [r7, #15]
 8003778:	e001      	b.n	800377e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800377e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	460b      	mov	r3, r1
 8003794:	807b      	strh	r3, [r7, #2]
 8003796:	4613      	mov	r3, r2
 8003798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800379a:	787b      	ldrb	r3, [r7, #1]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a0:	887a      	ldrh	r2, [r7, #2]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037a6:	e003      	b.n	80037b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	041a      	lsls	r2, r3, #16
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	619a      	str	r2, [r3, #24]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
	...

080037bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	@ 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e23b      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d050      	beq.n	800387c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	4b9e      	ldr	r3, [pc, #632]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d00c      	beq.n	8003800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b9b      	ldr	r3, [pc, #620]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d112      	bne.n	8003818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b98      	ldr	r3, [pc, #608]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037fe:	d10b      	bne.n	8003818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	4b94      	ldr	r3, [pc, #592]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d036      	beq.n	800387a <HAL_RCC_OscConfig+0xbe>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d132      	bne.n	800387a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e216      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a58 <HAL_RCC_OscConfig+0x29c>)
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe fee7 	bl	80025fc <HAL_GetTick>
 800382e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003832:	f7fe fee3 	bl	80025fc <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b64      	cmp	r3, #100	@ 0x64
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e200      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003844:	4b83      	ldr	r3, [pc, #524]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f0      	beq.n	8003832 <HAL_RCC_OscConfig+0x76>
 8003850:	e014      	b.n	800387c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fed3 	bl	80025fc <HAL_GetTick>
 8003856:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800385a:	f7fe fecf 	bl	80025fc <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b64      	cmp	r3, #100	@ 0x64
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1ec      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386c:	4b79      	ldr	r3, [pc, #484]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f0      	bne.n	800385a <HAL_RCC_OscConfig+0x9e>
 8003878:	e000      	b.n	800387c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d077      	beq.n	8003978 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003888:	4b72      	ldr	r3, [pc, #456]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003894:	4b6f      	ldr	r3, [pc, #444]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800389c:	2b08      	cmp	r3, #8
 800389e:	d126      	bne.n	80038ee <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d120      	bne.n	80038ee <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ac:	4b69      	ldr	r3, [pc, #420]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_OscConfig+0x108>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e1c0      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c4:	4b63      	ldr	r3, [pc, #396]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	21f8      	movs	r1, #248	@ 0xf8
 80038d2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d4:	69b9      	ldr	r1, [r7, #24]
 80038d6:	fa91 f1a1 	rbit	r1, r1
 80038da:	6179      	str	r1, [r7, #20]
  return result;
 80038dc:	6979      	ldr	r1, [r7, #20]
 80038de:	fab1 f181 	clz	r1, r1
 80038e2:	b2c9      	uxtb	r1, r1
 80038e4:	408b      	lsls	r3, r1
 80038e6:	495b      	ldr	r1, [pc, #364]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ec:	e044      	b.n	8003978 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d02a      	beq.n	800394c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f6:	4b59      	ldr	r3, [pc, #356]	@ (8003a5c <HAL_RCC_OscConfig+0x2a0>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fe7e 	bl	80025fc <HAL_GetTick>
 8003900:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003904:	f7fe fe7a 	bl	80025fc <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e197      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	4b4f      	ldr	r3, [pc, #316]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003922:	4b4c      	ldr	r3, [pc, #304]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	21f8      	movs	r1, #248	@ 0xf8
 8003930:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	6939      	ldr	r1, [r7, #16]
 8003934:	fa91 f1a1 	rbit	r1, r1
 8003938:	60f9      	str	r1, [r7, #12]
  return result;
 800393a:	68f9      	ldr	r1, [r7, #12]
 800393c:	fab1 f181 	clz	r1, r1
 8003940:	b2c9      	uxtb	r1, r1
 8003942:	408b      	lsls	r3, r1
 8003944:	4943      	ldr	r1, [pc, #268]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003946:	4313      	orrs	r3, r2
 8003948:	600b      	str	r3, [r1, #0]
 800394a:	e015      	b.n	8003978 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394c:	4b43      	ldr	r3, [pc, #268]	@ (8003a5c <HAL_RCC_OscConfig+0x2a0>)
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fe fe53 	bl	80025fc <HAL_GetTick>
 8003956:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800395a:	f7fe fe4f 	bl	80025fc <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e16c      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396c:	4b39      	ldr	r3, [pc, #228]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f0      	bne.n	800395a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d030      	beq.n	80039e6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d016      	beq.n	80039ba <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398c:	4b34      	ldr	r3, [pc, #208]	@ (8003a60 <HAL_RCC_OscConfig+0x2a4>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fe33 	bl	80025fc <HAL_GetTick>
 8003996:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe fe2f 	bl	80025fc <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e14c      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ac:	4b29      	ldr	r3, [pc, #164]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80039ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x1de>
 80039b8:	e015      	b.n	80039e6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	4b29      	ldr	r3, [pc, #164]	@ (8003a60 <HAL_RCC_OscConfig+0x2a4>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fe fe1c 	bl	80025fc <HAL_GetTick>
 80039c4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe fe18 	bl	80025fc <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e135      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039da:	4b1e      	ldr	r3, [pc, #120]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80039dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8087 	beq.w	8003b02 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b16      	ldr	r3, [pc, #88]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d110      	bne.n	8003a28 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	4a11      	ldr	r2, [pc, #68]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a16:	4b0f      	ldr	r3, [pc, #60]	@ (8003a54 <HAL_RCC_OscConfig+0x298>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a28:	4b0e      	ldr	r3, [pc, #56]	@ (8003a64 <HAL_RCC_OscConfig+0x2a8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a64 <HAL_RCC_OscConfig+0x2a8>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a32:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <HAL_RCC_OscConfig+0x2a8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d122      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a40:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <HAL_RCC_OscConfig+0x2a8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a07      	ldr	r2, [pc, #28]	@ (8003a64 <HAL_RCC_OscConfig+0x2a8>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4c:	f7fe fdd6 	bl	80025fc <HAL_GetTick>
 8003a50:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	e012      	b.n	8003a7a <HAL_RCC_OscConfig+0x2be>
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40023802 	.word	0x40023802
 8003a5c:	42470000 	.word	0x42470000
 8003a60:	42470e80 	.word	0x42470e80
 8003a64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a68:	f7fe fdc8 	bl	80025fc <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0e5      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7a:	4b75      	ldr	r3, [pc, #468]	@ (8003c50 <HAL_RCC_OscConfig+0x494>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	4b72      	ldr	r3, [pc, #456]	@ (8003c54 <HAL_RCC_OscConfig+0x498>)
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d015      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a98:	f7fe fdb0 	bl	80025fc <HAL_GetTick>
 8003a9c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fdac 	bl	80025fc <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e0c7      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	4b68      	ldr	r3, [pc, #416]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ee      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x2e4>
 8003ac2:	e014      	b.n	8003aee <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ac4:	f7fe fd9a 	bl	80025fc <HAL_GetTick>
 8003ac8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fe fd96 	bl	80025fc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e0b1      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ee      	bne.n	8003acc <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d105      	bne.n	8003b02 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af6:	4b58      	ldr	r3, [pc, #352]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	4a57      	ldr	r2, [pc, #348]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003afc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 809c 	beq.w	8003c44 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b0c:	4b52      	ldr	r3, [pc, #328]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d061      	beq.n	8003bdc <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d146      	bne.n	8003bae <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b20:	4b4e      	ldr	r3, [pc, #312]	@ (8003c5c <HAL_RCC_OscConfig+0x4a0>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fd69 	bl	80025fc <HAL_GetTick>
 8003b2a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2e:	f7fe fd65 	bl	80025fc <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	@ 0x64
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e082      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b40:	4b45      	ldr	r3, [pc, #276]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b4c:	4b42      	ldr	r3, [pc, #264]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4b43      	ldr	r3, [pc, #268]	@ (8003c60 <HAL_RCC_OscConfig+0x4a4>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	69d1      	ldr	r1, [r2, #28]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6a12      	ldr	r2, [r2, #32]
 8003b5c:	4311      	orrs	r1, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b62:	0192      	lsls	r2, r2, #6
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b6a:	0612      	lsls	r2, r2, #24
 8003b6c:	4311      	orrs	r1, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b72:	0852      	lsrs	r2, r2, #1
 8003b74:	3a01      	subs	r2, #1
 8003b76:	0412      	lsls	r2, r2, #16
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	4937      	ldr	r1, [pc, #220]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b36      	ldr	r3, [pc, #216]	@ (8003c5c <HAL_RCC_OscConfig+0x4a0>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fe fd39 	bl	80025fc <HAL_GetTick>
 8003b8a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fe fd35 	bl	80025fc <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	@ 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e052      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x3d2>
 8003bac:	e04a      	b.n	8003c44 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b2b      	ldr	r3, [pc, #172]	@ (8003c5c <HAL_RCC_OscConfig+0x4a0>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fd22 	bl	80025fc <HAL_GetTick>
 8003bb8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe fd1e 	bl	80025fc <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	@ 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e03b      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	4b22      	ldr	r3, [pc, #136]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x400>
 8003bda:	e033      	b.n	8003c44 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e02e      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <HAL_RCC_OscConfig+0x49c>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d121      	bne.n	8003c40 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c16:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3a:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3728      	adds	r7, #40	@ 0x28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40007000 	.word	0x40007000
 8003c54:	40023870 	.word	0x40023870
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	42470060 	.word	0x42470060
 8003c60:	f0bc8000 	.word	0xf0bc8000

08003c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0d2      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b6b      	ldr	r3, [pc, #428]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d90c      	bls.n	8003ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b68      	ldr	r3, [pc, #416]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b66      	ldr	r3, [pc, #408]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0be      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a5b      	ldr	r2, [pc, #364]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003cd0:	4b56      	ldr	r3, [pc, #344]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a55      	ldr	r2, [pc, #340]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003cda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b53      	ldr	r3, [pc, #332]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4950      	ldr	r1, [pc, #320]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d040      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b4a      	ldr	r3, [pc, #296]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d115      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e085      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1a:	4b44      	ldr	r3, [pc, #272]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e079      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2a:	4b40      	ldr	r3, [pc, #256]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e071      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d3a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0203 	bic.w	r2, r3, #3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4939      	ldr	r1, [pc, #228]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d4c:	f7fe fc56 	bl	80025fc <HAL_GetTick>
 8003d50:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d52:	e00a      	b.n	8003d6a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d54:	f7fe fc52 	bl	80025fc <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e059      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	4b30      	ldr	r3, [pc, #192]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 020c 	and.w	r2, r3, #12
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d1eb      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d20c      	bcs.n	8003da4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8a:	4b27      	ldr	r3, [pc, #156]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d92:	4b25      	ldr	r3, [pc, #148]	@ (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e03c      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0304 	and.w	r3, r3, #4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	491b      	ldr	r1, [pc, #108]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dce:	4b17      	ldr	r3, [pc, #92]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4913      	ldr	r1, [pc, #76]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003de2:	f000 f82b 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003de6:	4601      	mov	r1, r0
 8003de8:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df0:	22f0      	movs	r2, #240	@ 0xf0
 8003df2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	fa92 f2a2 	rbit	r2, r2
 8003dfa:	60fa      	str	r2, [r7, #12]
  return result;
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	fab2 f282 	clz	r2, r2
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	40d3      	lsrs	r3, r2
 8003e06:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <HAL_RCC_ClockConfig+0x1cc>)
 8003e08:	5cd3      	ldrb	r3, [r2, r3]
 8003e0a:	fa21 f303 	lsr.w	r3, r1, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	@ (8003e34 <HAL_RCC_ClockConfig+0x1d0>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_RCC_ClockConfig+0x1d4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fbae 	bl	8002578 <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023c00 	.word	0x40023c00
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	08008020 	.word	0x08008020
 8003e34:	20000000 	.word	0x20000000
 8003e38:	20000004 	.word	0x20000004

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e40:	b094      	sub	sp, #80	@ 0x50
 8003e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e48:	2300      	movs	r3, #0
 8003e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e54:	4b7c      	ldr	r3, [pc, #496]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d00d      	beq.n	8003e7c <HAL_RCC_GetSysClockFreq+0x40>
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	f200 80e7 	bhi.w	8004034 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0x34>
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e6e:	e0e1      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e70:	4b76      	ldr	r3, [pc, #472]	@ (800404c <HAL_RCC_GetSysClockFreq+0x210>)
 8003e72:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003e74:	e0e1      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e76:	4b75      	ldr	r3, [pc, #468]	@ (800404c <HAL_RCC_GetSysClockFreq+0x210>)
 8003e78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e7a:	e0de      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7c:	4b72      	ldr	r3, [pc, #456]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e84:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e86:	4b70      	ldr	r3, [pc, #448]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d065      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e92:	4b6d      	ldr	r3, [pc, #436]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	099b      	lsrs	r3, r3, #6
 8003e98:	2200      	movs	r2, #0
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003eae:	4622      	mov	r2, r4
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f04f 0100 	mov.w	r1, #0
 8003eba:	0159      	lsls	r1, r3, #5
 8003ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec0:	0150      	lsls	r0, r2, #5
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	1a51      	subs	r1, r2, r1
 8003eca:	6139      	str	r1, [r7, #16]
 8003ecc:	4629      	mov	r1, r5
 8003ece:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee0:	4659      	mov	r1, fp
 8003ee2:	018b      	lsls	r3, r1, #6
 8003ee4:	4651      	mov	r1, sl
 8003ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eea:	4651      	mov	r1, sl
 8003eec:	018a      	lsls	r2, r1, #6
 8003eee:	46d4      	mov	ip, sl
 8003ef0:	ebb2 080c 	subs.w	r8, r2, ip
 8003ef4:	4659      	mov	r1, fp
 8003ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0e:	4690      	mov	r8, r2
 8003f10:	4699      	mov	r9, r3
 8003f12:	4623      	mov	r3, r4
 8003f14:	eb18 0303 	adds.w	r3, r8, r3
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	462b      	mov	r3, r5
 8003f1c:	eb49 0303 	adc.w	r3, r9, r3
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f2e:	4629      	mov	r1, r5
 8003f30:	028b      	lsls	r3, r1, #10
 8003f32:	4620      	mov	r0, r4
 8003f34:	4629      	mov	r1, r5
 8003f36:	4604      	mov	r4, r0
 8003f38:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	028a      	lsls	r2, r1, #10
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f46:	2200      	movs	r2, #0
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f50:	f7fc fdd6 	bl	8000b00 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f5c:	e05c      	b.n	8004018 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	099b      	lsrs	r3, r3, #6
 8003f64:	2200      	movs	r2, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	4611      	mov	r1, r2
 8003f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	2300      	movs	r3, #0
 8003f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	f04f 0000 	mov.w	r0, #0
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	0159      	lsls	r1, r3, #5
 8003f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8a:	0150      	lsls	r0, r2, #5
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	46c4      	mov	ip, r8
 8003f92:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003f96:	4640      	mov	r0, r8
 8003f98:	4649      	mov	r1, r9
 8003f9a:	468c      	mov	ip, r1
 8003f9c:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	00eb      	lsls	r3, r5, #3
 8003fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fca:	00e2      	lsls	r2, r4, #3
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	18e3      	adds	r3, r4, r3
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	eb45 0303 	adc.w	r3, r5, r3
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fea:	4629      	mov	r1, r5
 8003fec:	028b      	lsls	r3, r1, #10
 8003fee:	4620      	mov	r0, r4
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	028a      	lsls	r2, r1, #10
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004002:	2200      	movs	r2, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	61fa      	str	r2, [r7, #28]
 8004008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800400c:	f7fc fd78 	bl	8000b00 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x20c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	3301      	adds	r3, #1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800402a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004032:	e002      	b.n	800403a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004034:	4b05      	ldr	r3, [pc, #20]	@ (800404c <HAL_RCC_GetSysClockFreq+0x210>)
 8004036:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800403a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800403c:	4618      	mov	r0, r3
 800403e:	3750      	adds	r7, #80	@ 0x50
 8004040:	46bd      	mov	sp, r7
 8004042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	00f42400 	.word	0x00f42400

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b02      	ldr	r3, [pc, #8]	@ (8004060 <HAL_RCC_GetHCLKFreq+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	20000000 	.word	0x20000000

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800406a:	f7ff fff1 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800406e:	4601      	mov	r1, r0
 8004070:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004078:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 800407c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	fa92 f2a2 	rbit	r2, r2
 8004084:	603a      	str	r2, [r7, #0]
  return result;
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	fab2 f282 	clz	r2, r2
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	40d3      	lsrs	r3, r2
 8004090:	4a04      	ldr	r2, [pc, #16]	@ (80040a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004092:	5cd3      	ldrb	r3, [r2, r3]
 8004094:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	08008030 	.word	0x08008030

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80040ae:	f7ff ffcf 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 80040b2:	4601      	mov	r1, r0
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80040bc:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80040c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	fa92 f2a2 	rbit	r2, r2
 80040c8:	603a      	str	r2, [r7, #0]
  return result;
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	40d3      	lsrs	r3, r2
 80040d4:	4a04      	ldr	r2, [pc, #16]	@ (80040e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40023800 	.word	0x40023800
 80040e8:	08008030 	.word	0x08008030

080040ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e07b      	b.n	80041f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d108      	bne.n	8004118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800410e:	d009      	beq.n	8004124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	61da      	str	r2, [r3, #28]
 8004116:	e005      	b.n	8004124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fffe 	bl	8002140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800415a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
 800419a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a8:	ea42 0103 	orr.w	r1, r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0104 	and.w	r1, r3, #4
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	f003 0210 	and.w	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b088      	sub	sp, #32
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800420e:	f7fe f9f5 	bl	80025fc <HAL_GetTick>
 8004212:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d001      	beq.n	8004228 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004224:	2302      	movs	r3, #2
 8004226:	e12a      	b.n	800447e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_SPI_Transmit+0x36>
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e122      	b.n	800447e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_SPI_Transmit+0x48>
 8004242:	2302      	movs	r3, #2
 8004244:	e11b      	b.n	800447e <HAL_SPI_Transmit+0x280>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2203      	movs	r2, #3
 8004252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	88fa      	ldrh	r2, [r7, #6]
 8004266:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004294:	d10f      	bne.n	80042b6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c0:	2b40      	cmp	r3, #64	@ 0x40
 80042c2:	d007      	beq.n	80042d4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042dc:	d152      	bne.n	8004384 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_SPI_Transmit+0xee>
 80042e6:	8b7b      	ldrh	r3, [r7, #26]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d145      	bne.n	8004378 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	881a      	ldrh	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fc:	1c9a      	adds	r2, r3, #2
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004310:	e032      	b.n	8004378 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b02      	cmp	r3, #2
 800431e:	d112      	bne.n	8004346 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004324:	881a      	ldrh	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004330:	1c9a      	adds	r2, r3, #2
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004344:	e018      	b.n	8004378 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004346:	f7fe f959 	bl	80025fc <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d803      	bhi.n	800435e <HAL_SPI_Transmit+0x160>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d102      	bne.n	8004364 <HAL_SPI_Transmit+0x166>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d109      	bne.n	8004378 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e082      	b.n	800447e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1c7      	bne.n	8004312 <HAL_SPI_Transmit+0x114>
 8004382:	e053      	b.n	800442c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_SPI_Transmit+0x194>
 800438c:	8b7b      	ldrh	r3, [r7, #26]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d147      	bne.n	8004422 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043b8:	e033      	b.n	8004422 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d113      	bne.n	80043f0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80043ee:	e018      	b.n	8004422 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f0:	f7fe f904 	bl	80025fc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d803      	bhi.n	8004408 <HAL_SPI_Transmit+0x20a>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d102      	bne.n	800440e <HAL_SPI_Transmit+0x210>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e02d      	b.n	800447e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1c6      	bne.n	80043ba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	6839      	ldr	r1, [r7, #0]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fa59 	bl	80048e8 <SPI_EndRxTxTransaction>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e000      	b.n	800447e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800447c:	2300      	movs	r3, #0
  }
}
 800447e:	4618      	mov	r0, r3
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b08a      	sub	sp, #40	@ 0x28
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004494:	2301      	movs	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004498:	f7fe f8b0 	bl	80025fc <HAL_GetTick>
 800449c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044a4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044ac:	887b      	ldrh	r3, [r7, #2]
 80044ae:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044b0:	7ffb      	ldrb	r3, [r7, #31]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d00c      	beq.n	80044d0 <HAL_SPI_TransmitReceive+0x4a>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044bc:	d106      	bne.n	80044cc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <HAL_SPI_TransmitReceive+0x46>
 80044c6:	7ffb      	ldrb	r3, [r7, #31]
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d001      	beq.n	80044d0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
 80044ce:	e17f      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_SPI_TransmitReceive+0x5c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_SPI_TransmitReceive+0x5c>
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e174      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_SPI_TransmitReceive+0x6e>
 80044f0:	2302      	movs	r3, #2
 80044f2:	e16d      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x34a>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b04      	cmp	r3, #4
 8004506:	d003      	beq.n	8004510 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2205      	movs	r2, #5
 800450c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	887a      	ldrh	r2, [r7, #2]
 8004520:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	887a      	ldrh	r2, [r7, #2]
 8004526:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	887a      	ldrh	r2, [r7, #2]
 8004532:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d007      	beq.n	8004564 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800456c:	d17e      	bne.n	800466c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_SPI_TransmitReceive+0xf6>
 8004576:	8afb      	ldrh	r3, [r7, #22]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d16c      	bne.n	8004656 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	1c9a      	adds	r2, r3, #2
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045a0:	e059      	b.n	8004656 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d11b      	bne.n	80045e8 <HAL_SPI_TransmitReceive+0x162>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d016      	beq.n	80045e8 <HAL_SPI_TransmitReceive+0x162>
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d113      	bne.n	80045e8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	881a      	ldrh	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	1c9a      	adds	r2, r3, #2
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d119      	bne.n	800462a <HAL_SPI_TransmitReceive+0x1a4>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d014      	beq.n	800462a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	b292      	uxth	r2, r2
 800460c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004612:	1c9a      	adds	r2, r3, #2
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004626:	2301      	movs	r3, #1
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800462a:	f7fd ffe7 	bl	80025fc <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004636:	429a      	cmp	r2, r3
 8004638:	d80d      	bhi.n	8004656 <HAL_SPI_TransmitReceive+0x1d0>
 800463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004640:	d009      	beq.n	8004656 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e0bc      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1a0      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x11c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d19b      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x11c>
 800466a:	e082      	b.n	8004772 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_SPI_TransmitReceive+0x1f4>
 8004674:	8afb      	ldrh	r3, [r7, #22]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d171      	bne.n	800475e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468c:	1c5a      	adds	r2, r3, #1
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046a0:	e05d      	b.n	800475e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d11c      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x264>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d017      	beq.n	80046ea <HAL_SPI_TransmitReceive+0x264>
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d114      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	7812      	ldrb	r2, [r2, #0]
 80046cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d119      	bne.n	800472c <HAL_SPI_TransmitReceive+0x2a6>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d014      	beq.n	800472c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004728:	2301      	movs	r3, #1
 800472a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800472c:	f7fd ff66 	bl	80025fc <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004738:	429a      	cmp	r2, r3
 800473a:	d803      	bhi.n	8004744 <HAL_SPI_TransmitReceive+0x2be>
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d102      	bne.n	800474a <HAL_SPI_TransmitReceive+0x2c4>
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e038      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d19c      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x21c>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d197      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004772:	6a3a      	ldr	r2, [r7, #32]
 8004774:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f8b6 	bl	80048e8 <SPI_EndRxTxTransaction>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e01d      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80047ce:	2300      	movs	r3, #0
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3728      	adds	r7, #40	@ 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047e8:	f7fd ff08 	bl	80025fc <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f0:	1a9b      	subs	r3, r3, r2
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	4413      	add	r3, r2
 80047f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047f8:	f7fd ff00 	bl	80025fc <HAL_GetTick>
 80047fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80047fe:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	015b      	lsls	r3, r3, #5
 8004804:	0d1b      	lsrs	r3, r3, #20
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800480e:	e054      	b.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004816:	d050      	beq.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004818:	f7fd fef0 	bl	80025fc <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	429a      	cmp	r2, r3
 8004826:	d902      	bls.n	800482e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d13d      	bne.n	80048aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800483c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004846:	d111      	bne.n	800486c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004850:	d004      	beq.n	800485c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800485a:	d107      	bne.n	800486c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800486a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004874:	d10f      	bne.n	8004896 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004894:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e017      	b.n	80048da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d19b      	bne.n	8004810 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3720      	adds	r7, #32
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000000 	.word	0x20000000

080048e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2201      	movs	r2, #1
 80048fc:	2102      	movs	r1, #2
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff6a 	bl	80047d8 <SPI_WaitFlagStateUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d007      	beq.n	800491a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e013      	b.n	8004942 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2200      	movs	r2, #0
 8004922:	2180      	movs	r1, #128	@ 0x80
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff ff57 	bl	80047d8 <SPI_WaitFlagStateUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e000      	b.n	8004942 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e041      	b.n	80049e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7fd fc2d 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f000 f95b 	bl	8004c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d001      	beq.n	8004a00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e046      	b.n	8004a8e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a22      	ldr	r2, [pc, #136]	@ (8004a98 <HAL_TIM_Base_Start+0xb0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d022      	beq.n	8004a58 <HAL_TIM_Base_Start+0x70>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1a:	d01d      	beq.n	8004a58 <HAL_TIM_Base_Start+0x70>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <HAL_TIM_Base_Start+0xb4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d018      	beq.n	8004a58 <HAL_TIM_Base_Start+0x70>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <HAL_TIM_Base_Start+0xb8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <HAL_TIM_Base_Start+0x70>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <HAL_TIM_Base_Start+0xbc>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00e      	beq.n	8004a58 <HAL_TIM_Base_Start+0x70>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004aa8 <HAL_TIM_Base_Start+0xc0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d009      	beq.n	8004a58 <HAL_TIM_Base_Start+0x70>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a18      	ldr	r2, [pc, #96]	@ (8004aac <HAL_TIM_Base_Start+0xc4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d004      	beq.n	8004a58 <HAL_TIM_Base_Start+0x70>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a17      	ldr	r2, [pc, #92]	@ (8004ab0 <HAL_TIM_Base_Start+0xc8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d111      	bne.n	8004a7c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b06      	cmp	r3, #6
 8004a68:	d010      	beq.n	8004a8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f042 0201 	orr.w	r2, r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a7a:	e007      	b.n	8004a8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40000800 	.word	0x40000800
 8004aa4:	40000c00 	.word	0x40000c00
 8004aa8:	40010400 	.word	0x40010400
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40001800 	.word	0x40001800

08004ab4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_TIM_ConfigClockSource+0x1c>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e0b4      	b.n	8004c3a <HAL_TIM_ConfigClockSource+0x186>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004af6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b08:	d03e      	beq.n	8004b88 <HAL_TIM_ConfigClockSource+0xd4>
 8004b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b0e:	f200 8087 	bhi.w	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b16:	f000 8086 	beq.w	8004c26 <HAL_TIM_ConfigClockSource+0x172>
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1e:	d87f      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b70      	cmp	r3, #112	@ 0x70
 8004b22:	d01a      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0xa6>
 8004b24:	2b70      	cmp	r3, #112	@ 0x70
 8004b26:	d87b      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b60      	cmp	r3, #96	@ 0x60
 8004b2a:	d050      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x11a>
 8004b2c:	2b60      	cmp	r3, #96	@ 0x60
 8004b2e:	d877      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b50      	cmp	r3, #80	@ 0x50
 8004b32:	d03c      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0xfa>
 8004b34:	2b50      	cmp	r3, #80	@ 0x50
 8004b36:	d873      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b40      	cmp	r3, #64	@ 0x40
 8004b3a:	d058      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x13a>
 8004b3c:	2b40      	cmp	r3, #64	@ 0x40
 8004b3e:	d86f      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b30      	cmp	r3, #48	@ 0x30
 8004b42:	d064      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	2b30      	cmp	r3, #48	@ 0x30
 8004b46:	d86b      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b48:	2b20      	cmp	r3, #32
 8004b4a:	d060      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x15a>
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d867      	bhi.n	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d05c      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x15a>
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d05a      	beq.n	8004c0e <HAL_TIM_ConfigClockSource+0x15a>
 8004b58:	e062      	b.n	8004c20 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b6a:	f000 f98c 	bl	8004e86 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	609a      	str	r2, [r3, #8]
      break;
 8004b86:	e04f      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b98:	f000 f975 	bl	8004e86 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004baa:	609a      	str	r2, [r3, #8]
      break;
 8004bac:	e03c      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f000 f8ec 	bl	8004d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2150      	movs	r1, #80	@ 0x50
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f943 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004bcc:	e02c      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f000 f90a 	bl	8004df4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2160      	movs	r1, #96	@ 0x60
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f933 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004bec:	e01c      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f000 f8cc 	bl	8004d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2140      	movs	r1, #64	@ 0x40
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f923 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004c0c:	e00c      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f000 f91a 	bl	8004e52 <TIM_ITRx_SetConfig>
      break;
 8004c1e:	e003      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      break;
 8004c24:	e000      	b.n	8004c28 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a45      	ldr	r2, [pc, #276]	@ (8004d6c <TIM_Base_SetConfig+0x128>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <TIM_Base_SetConfig+0x40>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c62:	d00f      	beq.n	8004c84 <TIM_Base_SetConfig+0x40>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a42      	ldr	r2, [pc, #264]	@ (8004d70 <TIM_Base_SetConfig+0x12c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00b      	beq.n	8004c84 <TIM_Base_SetConfig+0x40>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a41      	ldr	r2, [pc, #260]	@ (8004d74 <TIM_Base_SetConfig+0x130>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a40      	ldr	r2, [pc, #256]	@ (8004d78 <TIM_Base_SetConfig+0x134>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d7c <TIM_Base_SetConfig+0x138>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d108      	bne.n	8004c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a34      	ldr	r2, [pc, #208]	@ (8004d6c <TIM_Base_SetConfig+0x128>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d02b      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca4:	d027      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a31      	ldr	r2, [pc, #196]	@ (8004d70 <TIM_Base_SetConfig+0x12c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d023      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a30      	ldr	r2, [pc, #192]	@ (8004d74 <TIM_Base_SetConfig+0x130>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01f      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d78 <TIM_Base_SetConfig+0x134>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01b      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d7c <TIM_Base_SetConfig+0x138>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d017      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004d80 <TIM_Base_SetConfig+0x13c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d84 <TIM_Base_SetConfig+0x140>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00f      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8004d88 <TIM_Base_SetConfig+0x144>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d8c <TIM_Base_SetConfig+0x148>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a29      	ldr	r2, [pc, #164]	@ (8004d90 <TIM_Base_SetConfig+0x14c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a28      	ldr	r2, [pc, #160]	@ (8004d94 <TIM_Base_SetConfig+0x150>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d108      	bne.n	8004d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8004d6c <TIM_Base_SetConfig+0x128>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <TIM_Base_SetConfig+0xf8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a11      	ldr	r2, [pc, #68]	@ (8004d7c <TIM_Base_SetConfig+0x138>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d103      	bne.n	8004d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	691a      	ldr	r2, [r3, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d105      	bne.n	8004d62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]
  }
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40010400 	.word	0x40010400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800
 8004d8c:	40001800 	.word	0x40001800
 8004d90:	40001c00 	.word	0x40001c00
 8004d94:	40002000 	.word	0x40002000

08004d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 030a 	bic.w	r3, r3, #10
 8004dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f023 0210 	bic.w	r2, r3, #16
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	031b      	lsls	r3, r3, #12
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr

08004e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f043 0307 	orr.w	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]
}
 8004e7c:	bf00      	nop
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr

08004e86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e86:	b480      	push	{r7}
 8004e88:	b087      	sub	sp, #28
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	60f8      	str	r0, [r7, #12]
 8004e8e:	60b9      	str	r1, [r7, #8]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	021a      	lsls	r2, r3, #8
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	609a      	str	r2, [r3, #8]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e05a      	b.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a20      	ldr	r2, [pc, #128]	@ (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d022      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d01d      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d018      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a19      	ldr	r2, [pc, #100]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a17      	ldr	r2, [pc, #92]	@ (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d009      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a16      	ldr	r2, [pc, #88]	@ (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d004      	beq.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a14      	ldr	r2, [pc, #80]	@ (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10c      	bne.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	40010000 	.word	0x40010000
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40010400 	.word	0x40010400
 8004fb0:	40014000 	.word	0x40014000
 8004fb4:	40001800 	.word	0x40001800

08004fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e042      	b.n	8005050 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fd f916 	bl	8002210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2224      	movs	r2, #36	@ 0x24
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f82b 	bl	8005058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	4313      	orrs	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005098:	f023 030c 	bic.w	r3, r3, #12
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	430b      	orrs	r3, r1
 80050a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a57      	ldr	r2, [pc, #348]	@ (8005220 <UART_SetConfig+0x1c8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d004      	beq.n	80050d0 <UART_SetConfig+0x78>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a56      	ldr	r2, [pc, #344]	@ (8005224 <UART_SetConfig+0x1cc>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d103      	bne.n	80050d8 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050d0:	f7fe ffea 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	e002      	b.n	80050de <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050d8:	f7fe ffc4 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 80050dc:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050e6:	d14c      	bne.n	8005182 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009a      	lsls	r2, r3, #2
 80050f2:	441a      	add	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	4a4a      	ldr	r2, [pc, #296]	@ (8005228 <UART_SetConfig+0x1d0>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	0119      	lsls	r1, r3, #4
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	009a      	lsls	r2, r3, #2
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	fbb2 f2f3 	udiv	r2, r2, r3
 800511e:	4b42      	ldr	r3, [pc, #264]	@ (8005228 <UART_SetConfig+0x1d0>)
 8005120:	fba3 0302 	umull	r0, r3, r3, r2
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	2064      	movs	r0, #100	@ 0x64
 8005128:	fb00 f303 	mul.w	r3, r0, r3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	3332      	adds	r3, #50	@ 0x32
 8005132:	4a3d      	ldr	r2, [pc, #244]	@ (8005228 <UART_SetConfig+0x1d0>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005140:	4419      	add	r1, r3
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009a      	lsls	r2, r3, #2
 800514c:	441a      	add	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	fbb2 f2f3 	udiv	r2, r2, r3
 8005158:	4b33      	ldr	r3, [pc, #204]	@ (8005228 <UART_SetConfig+0x1d0>)
 800515a:	fba3 0302 	umull	r0, r3, r3, r2
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	2064      	movs	r0, #100	@ 0x64
 8005162:	fb00 f303 	mul.w	r3, r0, r3
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	3332      	adds	r3, #50	@ 0x32
 800516c:	4a2e      	ldr	r2, [pc, #184]	@ (8005228 <UART_SetConfig+0x1d0>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	f003 0207 	and.w	r2, r3, #7
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	440a      	add	r2, r1
 800517e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005180:	e04a      	b.n	8005218 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009a      	lsls	r2, r3, #2
 800518c:	441a      	add	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	4a23      	ldr	r2, [pc, #140]	@ (8005228 <UART_SetConfig+0x1d0>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	0119      	lsls	r1, r3, #4
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	009a      	lsls	r2, r3, #2
 80051ac:	441a      	add	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80051b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005228 <UART_SetConfig+0x1d0>)
 80051ba:	fba3 0302 	umull	r0, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	2064      	movs	r0, #100	@ 0x64
 80051c2:	fb00 f303 	mul.w	r3, r0, r3
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	3332      	adds	r3, #50	@ 0x32
 80051cc:	4a16      	ldr	r2, [pc, #88]	@ (8005228 <UART_SetConfig+0x1d0>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051d8:	4419      	add	r1, r3
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009a      	lsls	r2, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80051f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <UART_SetConfig+0x1d0>)
 80051f2:	fba3 0302 	umull	r0, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2064      	movs	r0, #100	@ 0x64
 80051fa:	fb00 f303 	mul.w	r3, r0, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	3332      	adds	r3, #50	@ 0x32
 8005204:	4a08      	ldr	r2, [pc, #32]	@ (8005228 <UART_SetConfig+0x1d0>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 020f 	and.w	r2, r3, #15
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	440a      	add	r2, r1
 8005216:	609a      	str	r2, [r3, #8]
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40011000 	.word	0x40011000
 8005224:	40011400 	.word	0x40011400
 8005228:	51eb851f 	.word	0x51eb851f

0800522c <__cvt>:
 800522c:	2b00      	cmp	r3, #0
 800522e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005232:	461d      	mov	r5, r3
 8005234:	bfbb      	ittet	lt
 8005236:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800523a:	461d      	movlt	r5, r3
 800523c:	2300      	movge	r3, #0
 800523e:	232d      	movlt	r3, #45	@ 0x2d
 8005240:	b088      	sub	sp, #32
 8005242:	4614      	mov	r4, r2
 8005244:	bfb8      	it	lt
 8005246:	4614      	movlt	r4, r2
 8005248:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800524a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800524c:	7013      	strb	r3, [r2, #0]
 800524e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005250:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005254:	f023 0820 	bic.w	r8, r3, #32
 8005258:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800525c:	d005      	beq.n	800526a <__cvt+0x3e>
 800525e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005262:	d100      	bne.n	8005266 <__cvt+0x3a>
 8005264:	3601      	adds	r6, #1
 8005266:	2302      	movs	r3, #2
 8005268:	e000      	b.n	800526c <__cvt+0x40>
 800526a:	2303      	movs	r3, #3
 800526c:	aa07      	add	r2, sp, #28
 800526e:	9204      	str	r2, [sp, #16]
 8005270:	aa06      	add	r2, sp, #24
 8005272:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005276:	e9cd 3600 	strd	r3, r6, [sp]
 800527a:	4622      	mov	r2, r4
 800527c:	462b      	mov	r3, r5
 800527e:	f000 ff53 	bl	8006128 <_dtoa_r>
 8005282:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005286:	4607      	mov	r7, r0
 8005288:	d119      	bne.n	80052be <__cvt+0x92>
 800528a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800528c:	07db      	lsls	r3, r3, #31
 800528e:	d50e      	bpl.n	80052ae <__cvt+0x82>
 8005290:	eb00 0906 	add.w	r9, r0, r6
 8005294:	2200      	movs	r2, #0
 8005296:	2300      	movs	r3, #0
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	f7fb fbc0 	bl	8000a20 <__aeabi_dcmpeq>
 80052a0:	b108      	cbz	r0, 80052a6 <__cvt+0x7a>
 80052a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80052a6:	2230      	movs	r2, #48	@ 0x30
 80052a8:	9b07      	ldr	r3, [sp, #28]
 80052aa:	454b      	cmp	r3, r9
 80052ac:	d31e      	bcc.n	80052ec <__cvt+0xc0>
 80052ae:	4638      	mov	r0, r7
 80052b0:	9b07      	ldr	r3, [sp, #28]
 80052b2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80052b4:	1bdb      	subs	r3, r3, r7
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	b008      	add	sp, #32
 80052ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052c2:	eb00 0906 	add.w	r9, r0, r6
 80052c6:	d1e5      	bne.n	8005294 <__cvt+0x68>
 80052c8:	7803      	ldrb	r3, [r0, #0]
 80052ca:	2b30      	cmp	r3, #48	@ 0x30
 80052cc:	d10a      	bne.n	80052e4 <__cvt+0xb8>
 80052ce:	2200      	movs	r2, #0
 80052d0:	2300      	movs	r3, #0
 80052d2:	4620      	mov	r0, r4
 80052d4:	4629      	mov	r1, r5
 80052d6:	f7fb fba3 	bl	8000a20 <__aeabi_dcmpeq>
 80052da:	b918      	cbnz	r0, 80052e4 <__cvt+0xb8>
 80052dc:	f1c6 0601 	rsb	r6, r6, #1
 80052e0:	f8ca 6000 	str.w	r6, [sl]
 80052e4:	f8da 3000 	ldr.w	r3, [sl]
 80052e8:	4499      	add	r9, r3
 80052ea:	e7d3      	b.n	8005294 <__cvt+0x68>
 80052ec:	1c59      	adds	r1, r3, #1
 80052ee:	9107      	str	r1, [sp, #28]
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e7d9      	b.n	80052a8 <__cvt+0x7c>

080052f4 <__exponent>:
 80052f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052f6:	2900      	cmp	r1, #0
 80052f8:	bfb6      	itet	lt
 80052fa:	232d      	movlt	r3, #45	@ 0x2d
 80052fc:	232b      	movge	r3, #43	@ 0x2b
 80052fe:	4249      	neglt	r1, r1
 8005300:	2909      	cmp	r1, #9
 8005302:	7002      	strb	r2, [r0, #0]
 8005304:	7043      	strb	r3, [r0, #1]
 8005306:	dd29      	ble.n	800535c <__exponent+0x68>
 8005308:	f10d 0307 	add.w	r3, sp, #7
 800530c:	461d      	mov	r5, r3
 800530e:	270a      	movs	r7, #10
 8005310:	fbb1 f6f7 	udiv	r6, r1, r7
 8005314:	461a      	mov	r2, r3
 8005316:	fb07 1416 	mls	r4, r7, r6, r1
 800531a:	3430      	adds	r4, #48	@ 0x30
 800531c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005320:	460c      	mov	r4, r1
 8005322:	2c63      	cmp	r4, #99	@ 0x63
 8005324:	4631      	mov	r1, r6
 8005326:	f103 33ff 	add.w	r3, r3, #4294967295
 800532a:	dcf1      	bgt.n	8005310 <__exponent+0x1c>
 800532c:	3130      	adds	r1, #48	@ 0x30
 800532e:	1e94      	subs	r4, r2, #2
 8005330:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005334:	4623      	mov	r3, r4
 8005336:	1c41      	adds	r1, r0, #1
 8005338:	42ab      	cmp	r3, r5
 800533a:	d30a      	bcc.n	8005352 <__exponent+0x5e>
 800533c:	f10d 0309 	add.w	r3, sp, #9
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	42ac      	cmp	r4, r5
 8005344:	bf88      	it	hi
 8005346:	2300      	movhi	r3, #0
 8005348:	3302      	adds	r3, #2
 800534a:	4403      	add	r3, r0
 800534c:	1a18      	subs	r0, r3, r0
 800534e:	b003      	add	sp, #12
 8005350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005352:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005356:	f801 6f01 	strb.w	r6, [r1, #1]!
 800535a:	e7ed      	b.n	8005338 <__exponent+0x44>
 800535c:	2330      	movs	r3, #48	@ 0x30
 800535e:	3130      	adds	r1, #48	@ 0x30
 8005360:	7083      	strb	r3, [r0, #2]
 8005362:	70c1      	strb	r1, [r0, #3]
 8005364:	1d03      	adds	r3, r0, #4
 8005366:	e7f1      	b.n	800534c <__exponent+0x58>

08005368 <_printf_float>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	b091      	sub	sp, #68	@ 0x44
 800536e:	460c      	mov	r4, r1
 8005370:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005374:	4616      	mov	r6, r2
 8005376:	461f      	mov	r7, r3
 8005378:	4605      	mov	r5, r0
 800537a:	f000 fdc5 	bl	8005f08 <_localeconv_r>
 800537e:	6803      	ldr	r3, [r0, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	9308      	str	r3, [sp, #32]
 8005384:	f7fa ff20 	bl	80001c8 <strlen>
 8005388:	2300      	movs	r3, #0
 800538a:	930e      	str	r3, [sp, #56]	@ 0x38
 800538c:	f8d8 3000 	ldr.w	r3, [r8]
 8005390:	9009      	str	r0, [sp, #36]	@ 0x24
 8005392:	3307      	adds	r3, #7
 8005394:	f023 0307 	bic.w	r3, r3, #7
 8005398:	f103 0208 	add.w	r2, r3, #8
 800539c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053a0:	f8d4 b000 	ldr.w	fp, [r4]
 80053a4:	f8c8 2000 	str.w	r2, [r8]
 80053a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80053b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053b2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80053b6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80053c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005634 <_printf_float+0x2cc>)
 80053c4:	f7fb fb5e 	bl	8000a84 <__aeabi_dcmpun>
 80053c8:	bb70      	cbnz	r0, 8005428 <_printf_float+0xc0>
 80053ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053ce:	f04f 32ff 	mov.w	r2, #4294967295
 80053d2:	4b98      	ldr	r3, [pc, #608]	@ (8005634 <_printf_float+0x2cc>)
 80053d4:	f7fb fb38 	bl	8000a48 <__aeabi_dcmple>
 80053d8:	bb30      	cbnz	r0, 8005428 <_printf_float+0xc0>
 80053da:	2200      	movs	r2, #0
 80053dc:	2300      	movs	r3, #0
 80053de:	4640      	mov	r0, r8
 80053e0:	4649      	mov	r1, r9
 80053e2:	f7fb fb27 	bl	8000a34 <__aeabi_dcmplt>
 80053e6:	b110      	cbz	r0, 80053ee <_printf_float+0x86>
 80053e8:	232d      	movs	r3, #45	@ 0x2d
 80053ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053ee:	4a92      	ldr	r2, [pc, #584]	@ (8005638 <_printf_float+0x2d0>)
 80053f0:	4b92      	ldr	r3, [pc, #584]	@ (800563c <_printf_float+0x2d4>)
 80053f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053f6:	bf94      	ite	ls
 80053f8:	4690      	movls	r8, r2
 80053fa:	4698      	movhi	r8, r3
 80053fc:	2303      	movs	r3, #3
 80053fe:	f04f 0900 	mov.w	r9, #0
 8005402:	6123      	str	r3, [r4, #16]
 8005404:	f02b 0304 	bic.w	r3, fp, #4
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	4633      	mov	r3, r6
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	9700      	str	r7, [sp, #0]
 8005412:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005414:	f000 f9d4 	bl	80057c0 <_printf_common>
 8005418:	3001      	adds	r0, #1
 800541a:	f040 8090 	bne.w	800553e <_printf_float+0x1d6>
 800541e:	f04f 30ff 	mov.w	r0, #4294967295
 8005422:	b011      	add	sp, #68	@ 0x44
 8005424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	4640      	mov	r0, r8
 800542e:	4649      	mov	r1, r9
 8005430:	f7fb fb28 	bl	8000a84 <__aeabi_dcmpun>
 8005434:	b148      	cbz	r0, 800544a <_printf_float+0xe2>
 8005436:	464b      	mov	r3, r9
 8005438:	2b00      	cmp	r3, #0
 800543a:	bfb8      	it	lt
 800543c:	232d      	movlt	r3, #45	@ 0x2d
 800543e:	4a80      	ldr	r2, [pc, #512]	@ (8005640 <_printf_float+0x2d8>)
 8005440:	bfb8      	it	lt
 8005442:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005446:	4b7f      	ldr	r3, [pc, #508]	@ (8005644 <_printf_float+0x2dc>)
 8005448:	e7d3      	b.n	80053f2 <_printf_float+0x8a>
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	d13f      	bne.n	80054d4 <_printf_float+0x16c>
 8005454:	2306      	movs	r3, #6
 8005456:	6063      	str	r3, [r4, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800545e:	6023      	str	r3, [r4, #0]
 8005460:	9206      	str	r2, [sp, #24]
 8005462:	aa0e      	add	r2, sp, #56	@ 0x38
 8005464:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005468:	aa0d      	add	r2, sp, #52	@ 0x34
 800546a:	9203      	str	r2, [sp, #12]
 800546c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005470:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	4642      	mov	r2, r8
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	4628      	mov	r0, r5
 800547c:	464b      	mov	r3, r9
 800547e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005480:	f7ff fed4 	bl	800522c <__cvt>
 8005484:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005486:	4680      	mov	r8, r0
 8005488:	2947      	cmp	r1, #71	@ 0x47
 800548a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800548c:	d128      	bne.n	80054e0 <_printf_float+0x178>
 800548e:	1cc8      	adds	r0, r1, #3
 8005490:	db02      	blt.n	8005498 <_printf_float+0x130>
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	4299      	cmp	r1, r3
 8005496:	dd40      	ble.n	800551a <_printf_float+0x1b2>
 8005498:	f1aa 0a02 	sub.w	sl, sl, #2
 800549c:	fa5f fa8a 	uxtb.w	sl, sl
 80054a0:	4652      	mov	r2, sl
 80054a2:	3901      	subs	r1, #1
 80054a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80054a8:	910d      	str	r1, [sp, #52]	@ 0x34
 80054aa:	f7ff ff23 	bl	80052f4 <__exponent>
 80054ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054b0:	4681      	mov	r9, r0
 80054b2:	1813      	adds	r3, r2, r0
 80054b4:	2a01      	cmp	r2, #1
 80054b6:	6123      	str	r3, [r4, #16]
 80054b8:	dc02      	bgt.n	80054c0 <_printf_float+0x158>
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	07d2      	lsls	r2, r2, #31
 80054be:	d501      	bpl.n	80054c4 <_printf_float+0x15c>
 80054c0:	3301      	adds	r3, #1
 80054c2:	6123      	str	r3, [r4, #16]
 80054c4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d09e      	beq.n	800540a <_printf_float+0xa2>
 80054cc:	232d      	movs	r3, #45	@ 0x2d
 80054ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054d2:	e79a      	b.n	800540a <_printf_float+0xa2>
 80054d4:	2947      	cmp	r1, #71	@ 0x47
 80054d6:	d1bf      	bne.n	8005458 <_printf_float+0xf0>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1bd      	bne.n	8005458 <_printf_float+0xf0>
 80054dc:	2301      	movs	r3, #1
 80054de:	e7ba      	b.n	8005456 <_printf_float+0xee>
 80054e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054e4:	d9dc      	bls.n	80054a0 <_printf_float+0x138>
 80054e6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80054ea:	d118      	bne.n	800551e <_printf_float+0x1b6>
 80054ec:	2900      	cmp	r1, #0
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	dd0b      	ble.n	800550a <_printf_float+0x1a2>
 80054f2:	6121      	str	r1, [r4, #16]
 80054f4:	b913      	cbnz	r3, 80054fc <_printf_float+0x194>
 80054f6:	6822      	ldr	r2, [r4, #0]
 80054f8:	07d0      	lsls	r0, r2, #31
 80054fa:	d502      	bpl.n	8005502 <_printf_float+0x19a>
 80054fc:	3301      	adds	r3, #1
 80054fe:	440b      	add	r3, r1
 8005500:	6123      	str	r3, [r4, #16]
 8005502:	f04f 0900 	mov.w	r9, #0
 8005506:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005508:	e7dc      	b.n	80054c4 <_printf_float+0x15c>
 800550a:	b913      	cbnz	r3, 8005512 <_printf_float+0x1aa>
 800550c:	6822      	ldr	r2, [r4, #0]
 800550e:	07d2      	lsls	r2, r2, #31
 8005510:	d501      	bpl.n	8005516 <_printf_float+0x1ae>
 8005512:	3302      	adds	r3, #2
 8005514:	e7f4      	b.n	8005500 <_printf_float+0x198>
 8005516:	2301      	movs	r3, #1
 8005518:	e7f2      	b.n	8005500 <_printf_float+0x198>
 800551a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800551e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005520:	4299      	cmp	r1, r3
 8005522:	db05      	blt.n	8005530 <_printf_float+0x1c8>
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	6121      	str	r1, [r4, #16]
 8005528:	07d8      	lsls	r0, r3, #31
 800552a:	d5ea      	bpl.n	8005502 <_printf_float+0x19a>
 800552c:	1c4b      	adds	r3, r1, #1
 800552e:	e7e7      	b.n	8005500 <_printf_float+0x198>
 8005530:	2900      	cmp	r1, #0
 8005532:	bfcc      	ite	gt
 8005534:	2201      	movgt	r2, #1
 8005536:	f1c1 0202 	rsble	r2, r1, #2
 800553a:	4413      	add	r3, r2
 800553c:	e7e0      	b.n	8005500 <_printf_float+0x198>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	055a      	lsls	r2, r3, #21
 8005542:	d407      	bmi.n	8005554 <_printf_float+0x1ec>
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	4642      	mov	r2, r8
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	d12b      	bne.n	80055aa <_printf_float+0x242>
 8005552:	e764      	b.n	800541e <_printf_float+0xb6>
 8005554:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005558:	f240 80dc 	bls.w	8005714 <_printf_float+0x3ac>
 800555c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005560:	2200      	movs	r2, #0
 8005562:	2300      	movs	r3, #0
 8005564:	f7fb fa5c 	bl	8000a20 <__aeabi_dcmpeq>
 8005568:	2800      	cmp	r0, #0
 800556a:	d033      	beq.n	80055d4 <_printf_float+0x26c>
 800556c:	2301      	movs	r3, #1
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	4a35      	ldr	r2, [pc, #212]	@ (8005648 <_printf_float+0x2e0>)
 8005574:	47b8      	blx	r7
 8005576:	3001      	adds	r0, #1
 8005578:	f43f af51 	beq.w	800541e <_printf_float+0xb6>
 800557c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005580:	4543      	cmp	r3, r8
 8005582:	db02      	blt.n	800558a <_printf_float+0x222>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	07d8      	lsls	r0, r3, #31
 8005588:	d50f      	bpl.n	80055aa <_printf_float+0x242>
 800558a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	f43f af42 	beq.w	800541e <_printf_float+0xb6>
 800559a:	f04f 0900 	mov.w	r9, #0
 800559e:	f108 38ff 	add.w	r8, r8, #4294967295
 80055a2:	f104 0a1a 	add.w	sl, r4, #26
 80055a6:	45c8      	cmp	r8, r9
 80055a8:	dc09      	bgt.n	80055be <_printf_float+0x256>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	079b      	lsls	r3, r3, #30
 80055ae:	f100 8102 	bmi.w	80057b6 <_printf_float+0x44e>
 80055b2:	68e0      	ldr	r0, [r4, #12]
 80055b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055b6:	4298      	cmp	r0, r3
 80055b8:	bfb8      	it	lt
 80055ba:	4618      	movlt	r0, r3
 80055bc:	e731      	b.n	8005422 <_printf_float+0xba>
 80055be:	2301      	movs	r3, #1
 80055c0:	4652      	mov	r2, sl
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	f43f af28 	beq.w	800541e <_printf_float+0xb6>
 80055ce:	f109 0901 	add.w	r9, r9, #1
 80055d2:	e7e8      	b.n	80055a6 <_printf_float+0x23e>
 80055d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	dc38      	bgt.n	800564c <_printf_float+0x2e4>
 80055da:	2301      	movs	r3, #1
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	4a19      	ldr	r2, [pc, #100]	@ (8005648 <_printf_float+0x2e0>)
 80055e2:	47b8      	blx	r7
 80055e4:	3001      	adds	r0, #1
 80055e6:	f43f af1a 	beq.w	800541e <_printf_float+0xb6>
 80055ea:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80055ee:	ea59 0303 	orrs.w	r3, r9, r3
 80055f2:	d102      	bne.n	80055fa <_printf_float+0x292>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	07d9      	lsls	r1, r3, #31
 80055f8:	d5d7      	bpl.n	80055aa <_printf_float+0x242>
 80055fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055fe:	4631      	mov	r1, r6
 8005600:	4628      	mov	r0, r5
 8005602:	47b8      	blx	r7
 8005604:	3001      	adds	r0, #1
 8005606:	f43f af0a 	beq.w	800541e <_printf_float+0xb6>
 800560a:	f04f 0a00 	mov.w	sl, #0
 800560e:	f104 0b1a 	add.w	fp, r4, #26
 8005612:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005614:	425b      	negs	r3, r3
 8005616:	4553      	cmp	r3, sl
 8005618:	dc01      	bgt.n	800561e <_printf_float+0x2b6>
 800561a:	464b      	mov	r3, r9
 800561c:	e793      	b.n	8005546 <_printf_float+0x1de>
 800561e:	2301      	movs	r3, #1
 8005620:	465a      	mov	r2, fp
 8005622:	4631      	mov	r1, r6
 8005624:	4628      	mov	r0, r5
 8005626:	47b8      	blx	r7
 8005628:	3001      	adds	r0, #1
 800562a:	f43f aef8 	beq.w	800541e <_printf_float+0xb6>
 800562e:	f10a 0a01 	add.w	sl, sl, #1
 8005632:	e7ee      	b.n	8005612 <_printf_float+0x2aa>
 8005634:	7fefffff 	.word	0x7fefffff
 8005638:	08008038 	.word	0x08008038
 800563c:	0800803c 	.word	0x0800803c
 8005640:	08008040 	.word	0x08008040
 8005644:	08008044 	.word	0x08008044
 8005648:	08008048 	.word	0x08008048
 800564c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800564e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005652:	4553      	cmp	r3, sl
 8005654:	bfa8      	it	ge
 8005656:	4653      	movge	r3, sl
 8005658:	2b00      	cmp	r3, #0
 800565a:	4699      	mov	r9, r3
 800565c:	dc36      	bgt.n	80056cc <_printf_float+0x364>
 800565e:	f04f 0b00 	mov.w	fp, #0
 8005662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005666:	f104 021a 	add.w	r2, r4, #26
 800566a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800566c:	930a      	str	r3, [sp, #40]	@ 0x28
 800566e:	eba3 0309 	sub.w	r3, r3, r9
 8005672:	455b      	cmp	r3, fp
 8005674:	dc31      	bgt.n	80056da <_printf_float+0x372>
 8005676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005678:	459a      	cmp	sl, r3
 800567a:	dc3a      	bgt.n	80056f2 <_printf_float+0x38a>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	07da      	lsls	r2, r3, #31
 8005680:	d437      	bmi.n	80056f2 <_printf_float+0x38a>
 8005682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005684:	ebaa 0903 	sub.w	r9, sl, r3
 8005688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800568a:	ebaa 0303 	sub.w	r3, sl, r3
 800568e:	4599      	cmp	r9, r3
 8005690:	bfa8      	it	ge
 8005692:	4699      	movge	r9, r3
 8005694:	f1b9 0f00 	cmp.w	r9, #0
 8005698:	dc33      	bgt.n	8005702 <_printf_float+0x39a>
 800569a:	f04f 0800 	mov.w	r8, #0
 800569e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a2:	f104 0b1a 	add.w	fp, r4, #26
 80056a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056a8:	ebaa 0303 	sub.w	r3, sl, r3
 80056ac:	eba3 0309 	sub.w	r3, r3, r9
 80056b0:	4543      	cmp	r3, r8
 80056b2:	f77f af7a 	ble.w	80055aa <_printf_float+0x242>
 80056b6:	2301      	movs	r3, #1
 80056b8:	465a      	mov	r2, fp
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	f43f aeac 	beq.w	800541e <_printf_float+0xb6>
 80056c6:	f108 0801 	add.w	r8, r8, #1
 80056ca:	e7ec      	b.n	80056a6 <_printf_float+0x33e>
 80056cc:	4642      	mov	r2, r8
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	d1c2      	bne.n	800565e <_printf_float+0x2f6>
 80056d8:	e6a1      	b.n	800541e <_printf_float+0xb6>
 80056da:	2301      	movs	r3, #1
 80056dc:	4631      	mov	r1, r6
 80056de:	4628      	mov	r0, r5
 80056e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80056e2:	47b8      	blx	r7
 80056e4:	3001      	adds	r0, #1
 80056e6:	f43f ae9a 	beq.w	800541e <_printf_float+0xb6>
 80056ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056ec:	f10b 0b01 	add.w	fp, fp, #1
 80056f0:	e7bb      	b.n	800566a <_printf_float+0x302>
 80056f2:	4631      	mov	r1, r6
 80056f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	d1c0      	bne.n	8005682 <_printf_float+0x31a>
 8005700:	e68d      	b.n	800541e <_printf_float+0xb6>
 8005702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005704:	464b      	mov	r3, r9
 8005706:	4631      	mov	r1, r6
 8005708:	4628      	mov	r0, r5
 800570a:	4442      	add	r2, r8
 800570c:	47b8      	blx	r7
 800570e:	3001      	adds	r0, #1
 8005710:	d1c3      	bne.n	800569a <_printf_float+0x332>
 8005712:	e684      	b.n	800541e <_printf_float+0xb6>
 8005714:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005718:	f1ba 0f01 	cmp.w	sl, #1
 800571c:	dc01      	bgt.n	8005722 <_printf_float+0x3ba>
 800571e:	07db      	lsls	r3, r3, #31
 8005720:	d536      	bpl.n	8005790 <_printf_float+0x428>
 8005722:	2301      	movs	r3, #1
 8005724:	4642      	mov	r2, r8
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	47b8      	blx	r7
 800572c:	3001      	adds	r0, #1
 800572e:	f43f ae76 	beq.w	800541e <_printf_float+0xb6>
 8005732:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	f43f ae6e 	beq.w	800541e <_printf_float+0xb6>
 8005742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005746:	2200      	movs	r2, #0
 8005748:	2300      	movs	r3, #0
 800574a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800574e:	f7fb f967 	bl	8000a20 <__aeabi_dcmpeq>
 8005752:	b9c0      	cbnz	r0, 8005786 <_printf_float+0x41e>
 8005754:	4653      	mov	r3, sl
 8005756:	f108 0201 	add.w	r2, r8, #1
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	d10c      	bne.n	800577e <_printf_float+0x416>
 8005764:	e65b      	b.n	800541e <_printf_float+0xb6>
 8005766:	2301      	movs	r3, #1
 8005768:	465a      	mov	r2, fp
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	f43f ae54 	beq.w	800541e <_printf_float+0xb6>
 8005776:	f108 0801 	add.w	r8, r8, #1
 800577a:	45d0      	cmp	r8, sl
 800577c:	dbf3      	blt.n	8005766 <_printf_float+0x3fe>
 800577e:	464b      	mov	r3, r9
 8005780:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005784:	e6e0      	b.n	8005548 <_printf_float+0x1e0>
 8005786:	f04f 0800 	mov.w	r8, #0
 800578a:	f104 0b1a 	add.w	fp, r4, #26
 800578e:	e7f4      	b.n	800577a <_printf_float+0x412>
 8005790:	2301      	movs	r3, #1
 8005792:	4642      	mov	r2, r8
 8005794:	e7e1      	b.n	800575a <_printf_float+0x3f2>
 8005796:	2301      	movs	r3, #1
 8005798:	464a      	mov	r2, r9
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f ae3c 	beq.w	800541e <_printf_float+0xb6>
 80057a6:	f108 0801 	add.w	r8, r8, #1
 80057aa:	68e3      	ldr	r3, [r4, #12]
 80057ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80057ae:	1a5b      	subs	r3, r3, r1
 80057b0:	4543      	cmp	r3, r8
 80057b2:	dcf0      	bgt.n	8005796 <_printf_float+0x42e>
 80057b4:	e6fd      	b.n	80055b2 <_printf_float+0x24a>
 80057b6:	f04f 0800 	mov.w	r8, #0
 80057ba:	f104 0919 	add.w	r9, r4, #25
 80057be:	e7f4      	b.n	80057aa <_printf_float+0x442>

080057c0 <_printf_common>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	4616      	mov	r6, r2
 80057c6:	4698      	mov	r8, r3
 80057c8:	688a      	ldr	r2, [r1, #8]
 80057ca:	690b      	ldr	r3, [r1, #16]
 80057cc:	4607      	mov	r7, r0
 80057ce:	4293      	cmp	r3, r2
 80057d0:	bfb8      	it	lt
 80057d2:	4613      	movlt	r3, r2
 80057d4:	6033      	str	r3, [r6, #0]
 80057d6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80057da:	460c      	mov	r4, r1
 80057dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80057e0:	b10a      	cbz	r2, 80057e6 <_printf_common+0x26>
 80057e2:	3301      	adds	r3, #1
 80057e4:	6033      	str	r3, [r6, #0]
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	0699      	lsls	r1, r3, #26
 80057ea:	bf42      	ittt	mi
 80057ec:	6833      	ldrmi	r3, [r6, #0]
 80057ee:	3302      	addmi	r3, #2
 80057f0:	6033      	strmi	r3, [r6, #0]
 80057f2:	6825      	ldr	r5, [r4, #0]
 80057f4:	f015 0506 	ands.w	r5, r5, #6
 80057f8:	d106      	bne.n	8005808 <_printf_common+0x48>
 80057fa:	f104 0a19 	add.w	sl, r4, #25
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	6832      	ldr	r2, [r6, #0]
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	42ab      	cmp	r3, r5
 8005806:	dc2b      	bgt.n	8005860 <_printf_common+0xa0>
 8005808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800580c:	6822      	ldr	r2, [r4, #0]
 800580e:	3b00      	subs	r3, #0
 8005810:	bf18      	it	ne
 8005812:	2301      	movne	r3, #1
 8005814:	0692      	lsls	r2, r2, #26
 8005816:	d430      	bmi.n	800587a <_printf_common+0xba>
 8005818:	4641      	mov	r1, r8
 800581a:	4638      	mov	r0, r7
 800581c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005820:	47c8      	blx	r9
 8005822:	3001      	adds	r0, #1
 8005824:	d023      	beq.n	800586e <_printf_common+0xae>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	6922      	ldr	r2, [r4, #16]
 800582a:	f003 0306 	and.w	r3, r3, #6
 800582e:	2b04      	cmp	r3, #4
 8005830:	bf14      	ite	ne
 8005832:	2500      	movne	r5, #0
 8005834:	6833      	ldreq	r3, [r6, #0]
 8005836:	f04f 0600 	mov.w	r6, #0
 800583a:	bf08      	it	eq
 800583c:	68e5      	ldreq	r5, [r4, #12]
 800583e:	f104 041a 	add.w	r4, r4, #26
 8005842:	bf08      	it	eq
 8005844:	1aed      	subeq	r5, r5, r3
 8005846:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800584a:	bf08      	it	eq
 800584c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005850:	4293      	cmp	r3, r2
 8005852:	bfc4      	itt	gt
 8005854:	1a9b      	subgt	r3, r3, r2
 8005856:	18ed      	addgt	r5, r5, r3
 8005858:	42b5      	cmp	r5, r6
 800585a:	d11a      	bne.n	8005892 <_printf_common+0xd2>
 800585c:	2000      	movs	r0, #0
 800585e:	e008      	b.n	8005872 <_printf_common+0xb2>
 8005860:	2301      	movs	r3, #1
 8005862:	4652      	mov	r2, sl
 8005864:	4641      	mov	r1, r8
 8005866:	4638      	mov	r0, r7
 8005868:	47c8      	blx	r9
 800586a:	3001      	adds	r0, #1
 800586c:	d103      	bne.n	8005876 <_printf_common+0xb6>
 800586e:	f04f 30ff 	mov.w	r0, #4294967295
 8005872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005876:	3501      	adds	r5, #1
 8005878:	e7c1      	b.n	80057fe <_printf_common+0x3e>
 800587a:	2030      	movs	r0, #48	@ 0x30
 800587c:	18e1      	adds	r1, r4, r3
 800587e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005888:	4422      	add	r2, r4
 800588a:	3302      	adds	r3, #2
 800588c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005890:	e7c2      	b.n	8005818 <_printf_common+0x58>
 8005892:	2301      	movs	r3, #1
 8005894:	4622      	mov	r2, r4
 8005896:	4641      	mov	r1, r8
 8005898:	4638      	mov	r0, r7
 800589a:	47c8      	blx	r9
 800589c:	3001      	adds	r0, #1
 800589e:	d0e6      	beq.n	800586e <_printf_common+0xae>
 80058a0:	3601      	adds	r6, #1
 80058a2:	e7d9      	b.n	8005858 <_printf_common+0x98>

080058a4 <_printf_i>:
 80058a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a8:	7e0f      	ldrb	r7, [r1, #24]
 80058aa:	4691      	mov	r9, r2
 80058ac:	2f78      	cmp	r7, #120	@ 0x78
 80058ae:	4680      	mov	r8, r0
 80058b0:	460c      	mov	r4, r1
 80058b2:	469a      	mov	sl, r3
 80058b4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058ba:	d807      	bhi.n	80058cc <_printf_i+0x28>
 80058bc:	2f62      	cmp	r7, #98	@ 0x62
 80058be:	d80a      	bhi.n	80058d6 <_printf_i+0x32>
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	f000 80d3 	beq.w	8005a6c <_printf_i+0x1c8>
 80058c6:	2f58      	cmp	r7, #88	@ 0x58
 80058c8:	f000 80ba 	beq.w	8005a40 <_printf_i+0x19c>
 80058cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80058d4:	e03a      	b.n	800594c <_printf_i+0xa8>
 80058d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80058da:	2b15      	cmp	r3, #21
 80058dc:	d8f6      	bhi.n	80058cc <_printf_i+0x28>
 80058de:	a101      	add	r1, pc, #4	@ (adr r1, 80058e4 <_printf_i+0x40>)
 80058e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058e4:	0800593d 	.word	0x0800593d
 80058e8:	08005951 	.word	0x08005951
 80058ec:	080058cd 	.word	0x080058cd
 80058f0:	080058cd 	.word	0x080058cd
 80058f4:	080058cd 	.word	0x080058cd
 80058f8:	080058cd 	.word	0x080058cd
 80058fc:	08005951 	.word	0x08005951
 8005900:	080058cd 	.word	0x080058cd
 8005904:	080058cd 	.word	0x080058cd
 8005908:	080058cd 	.word	0x080058cd
 800590c:	080058cd 	.word	0x080058cd
 8005910:	08005a53 	.word	0x08005a53
 8005914:	0800597b 	.word	0x0800597b
 8005918:	08005a0d 	.word	0x08005a0d
 800591c:	080058cd 	.word	0x080058cd
 8005920:	080058cd 	.word	0x080058cd
 8005924:	08005a75 	.word	0x08005a75
 8005928:	080058cd 	.word	0x080058cd
 800592c:	0800597b 	.word	0x0800597b
 8005930:	080058cd 	.word	0x080058cd
 8005934:	080058cd 	.word	0x080058cd
 8005938:	08005a15 	.word	0x08005a15
 800593c:	6833      	ldr	r3, [r6, #0]
 800593e:	1d1a      	adds	r2, r3, #4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6032      	str	r2, [r6, #0]
 8005944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800594c:	2301      	movs	r3, #1
 800594e:	e09e      	b.n	8005a8e <_printf_i+0x1ea>
 8005950:	6833      	ldr	r3, [r6, #0]
 8005952:	6820      	ldr	r0, [r4, #0]
 8005954:	1d19      	adds	r1, r3, #4
 8005956:	6031      	str	r1, [r6, #0]
 8005958:	0606      	lsls	r6, r0, #24
 800595a:	d501      	bpl.n	8005960 <_printf_i+0xbc>
 800595c:	681d      	ldr	r5, [r3, #0]
 800595e:	e003      	b.n	8005968 <_printf_i+0xc4>
 8005960:	0645      	lsls	r5, r0, #25
 8005962:	d5fb      	bpl.n	800595c <_printf_i+0xb8>
 8005964:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005968:	2d00      	cmp	r5, #0
 800596a:	da03      	bge.n	8005974 <_printf_i+0xd0>
 800596c:	232d      	movs	r3, #45	@ 0x2d
 800596e:	426d      	negs	r5, r5
 8005970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005974:	230a      	movs	r3, #10
 8005976:	4859      	ldr	r0, [pc, #356]	@ (8005adc <_printf_i+0x238>)
 8005978:	e011      	b.n	800599e <_printf_i+0xfa>
 800597a:	6821      	ldr	r1, [r4, #0]
 800597c:	6833      	ldr	r3, [r6, #0]
 800597e:	0608      	lsls	r0, r1, #24
 8005980:	f853 5b04 	ldr.w	r5, [r3], #4
 8005984:	d402      	bmi.n	800598c <_printf_i+0xe8>
 8005986:	0649      	lsls	r1, r1, #25
 8005988:	bf48      	it	mi
 800598a:	b2ad      	uxthmi	r5, r5
 800598c:	2f6f      	cmp	r7, #111	@ 0x6f
 800598e:	6033      	str	r3, [r6, #0]
 8005990:	bf14      	ite	ne
 8005992:	230a      	movne	r3, #10
 8005994:	2308      	moveq	r3, #8
 8005996:	4851      	ldr	r0, [pc, #324]	@ (8005adc <_printf_i+0x238>)
 8005998:	2100      	movs	r1, #0
 800599a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800599e:	6866      	ldr	r6, [r4, #4]
 80059a0:	2e00      	cmp	r6, #0
 80059a2:	bfa8      	it	ge
 80059a4:	6821      	ldrge	r1, [r4, #0]
 80059a6:	60a6      	str	r6, [r4, #8]
 80059a8:	bfa4      	itt	ge
 80059aa:	f021 0104 	bicge.w	r1, r1, #4
 80059ae:	6021      	strge	r1, [r4, #0]
 80059b0:	b90d      	cbnz	r5, 80059b6 <_printf_i+0x112>
 80059b2:	2e00      	cmp	r6, #0
 80059b4:	d04b      	beq.n	8005a4e <_printf_i+0x1aa>
 80059b6:	4616      	mov	r6, r2
 80059b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80059bc:	fb03 5711 	mls	r7, r3, r1, r5
 80059c0:	5dc7      	ldrb	r7, [r0, r7]
 80059c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059c6:	462f      	mov	r7, r5
 80059c8:	42bb      	cmp	r3, r7
 80059ca:	460d      	mov	r5, r1
 80059cc:	d9f4      	bls.n	80059b8 <_printf_i+0x114>
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d10b      	bne.n	80059ea <_printf_i+0x146>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	07df      	lsls	r7, r3, #31
 80059d6:	d508      	bpl.n	80059ea <_printf_i+0x146>
 80059d8:	6923      	ldr	r3, [r4, #16]
 80059da:	6861      	ldr	r1, [r4, #4]
 80059dc:	4299      	cmp	r1, r3
 80059de:	bfde      	ittt	le
 80059e0:	2330      	movle	r3, #48	@ 0x30
 80059e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059ea:	1b92      	subs	r2, r2, r6
 80059ec:	6122      	str	r2, [r4, #16]
 80059ee:	464b      	mov	r3, r9
 80059f0:	4621      	mov	r1, r4
 80059f2:	4640      	mov	r0, r8
 80059f4:	f8cd a000 	str.w	sl, [sp]
 80059f8:	aa03      	add	r2, sp, #12
 80059fa:	f7ff fee1 	bl	80057c0 <_printf_common>
 80059fe:	3001      	adds	r0, #1
 8005a00:	d14a      	bne.n	8005a98 <_printf_i+0x1f4>
 8005a02:	f04f 30ff 	mov.w	r0, #4294967295
 8005a06:	b004      	add	sp, #16
 8005a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	f043 0320 	orr.w	r3, r3, #32
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	2778      	movs	r7, #120	@ 0x78
 8005a16:	4832      	ldr	r0, [pc, #200]	@ (8005ae0 <_printf_i+0x23c>)
 8005a18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	6831      	ldr	r1, [r6, #0]
 8005a20:	061f      	lsls	r7, r3, #24
 8005a22:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a26:	d402      	bmi.n	8005a2e <_printf_i+0x18a>
 8005a28:	065f      	lsls	r7, r3, #25
 8005a2a:	bf48      	it	mi
 8005a2c:	b2ad      	uxthmi	r5, r5
 8005a2e:	6031      	str	r1, [r6, #0]
 8005a30:	07d9      	lsls	r1, r3, #31
 8005a32:	bf44      	itt	mi
 8005a34:	f043 0320 	orrmi.w	r3, r3, #32
 8005a38:	6023      	strmi	r3, [r4, #0]
 8005a3a:	b11d      	cbz	r5, 8005a44 <_printf_i+0x1a0>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	e7ab      	b.n	8005998 <_printf_i+0xf4>
 8005a40:	4826      	ldr	r0, [pc, #152]	@ (8005adc <_printf_i+0x238>)
 8005a42:	e7e9      	b.n	8005a18 <_printf_i+0x174>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	f023 0320 	bic.w	r3, r3, #32
 8005a4a:	6023      	str	r3, [r4, #0]
 8005a4c:	e7f6      	b.n	8005a3c <_printf_i+0x198>
 8005a4e:	4616      	mov	r6, r2
 8005a50:	e7bd      	b.n	80059ce <_printf_i+0x12a>
 8005a52:	6833      	ldr	r3, [r6, #0]
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1d18      	adds	r0, r3, #4
 8005a58:	6961      	ldr	r1, [r4, #20]
 8005a5a:	6030      	str	r0, [r6, #0]
 8005a5c:	062e      	lsls	r6, r5, #24
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	d501      	bpl.n	8005a66 <_printf_i+0x1c2>
 8005a62:	6019      	str	r1, [r3, #0]
 8005a64:	e002      	b.n	8005a6c <_printf_i+0x1c8>
 8005a66:	0668      	lsls	r0, r5, #25
 8005a68:	d5fb      	bpl.n	8005a62 <_printf_i+0x1be>
 8005a6a:	8019      	strh	r1, [r3, #0]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4616      	mov	r6, r2
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	e7bc      	b.n	80059ee <_printf_i+0x14a>
 8005a74:	6833      	ldr	r3, [r6, #0]
 8005a76:	2100      	movs	r1, #0
 8005a78:	1d1a      	adds	r2, r3, #4
 8005a7a:	6032      	str	r2, [r6, #0]
 8005a7c:	681e      	ldr	r6, [r3, #0]
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 fab8 	bl	8005ff6 <memchr>
 8005a86:	b108      	cbz	r0, 8005a8c <_printf_i+0x1e8>
 8005a88:	1b80      	subs	r0, r0, r6
 8005a8a:	6060      	str	r0, [r4, #4]
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	6123      	str	r3, [r4, #16]
 8005a90:	2300      	movs	r3, #0
 8005a92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a96:	e7aa      	b.n	80059ee <_printf_i+0x14a>
 8005a98:	4632      	mov	r2, r6
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	47d0      	blx	sl
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d0ad      	beq.n	8005a02 <_printf_i+0x15e>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	079b      	lsls	r3, r3, #30
 8005aaa:	d413      	bmi.n	8005ad4 <_printf_i+0x230>
 8005aac:	68e0      	ldr	r0, [r4, #12]
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	4298      	cmp	r0, r3
 8005ab2:	bfb8      	it	lt
 8005ab4:	4618      	movlt	r0, r3
 8005ab6:	e7a6      	b.n	8005a06 <_printf_i+0x162>
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4632      	mov	r2, r6
 8005abc:	4649      	mov	r1, r9
 8005abe:	4640      	mov	r0, r8
 8005ac0:	47d0      	blx	sl
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d09d      	beq.n	8005a02 <_printf_i+0x15e>
 8005ac6:	3501      	adds	r5, #1
 8005ac8:	68e3      	ldr	r3, [r4, #12]
 8005aca:	9903      	ldr	r1, [sp, #12]
 8005acc:	1a5b      	subs	r3, r3, r1
 8005ace:	42ab      	cmp	r3, r5
 8005ad0:	dcf2      	bgt.n	8005ab8 <_printf_i+0x214>
 8005ad2:	e7eb      	b.n	8005aac <_printf_i+0x208>
 8005ad4:	2500      	movs	r5, #0
 8005ad6:	f104 0619 	add.w	r6, r4, #25
 8005ada:	e7f5      	b.n	8005ac8 <_printf_i+0x224>
 8005adc:	0800804a 	.word	0x0800804a
 8005ae0:	0800805b 	.word	0x0800805b

08005ae4 <std>:
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	b510      	push	{r4, lr}
 8005ae8:	4604      	mov	r4, r0
 8005aea:	e9c0 3300 	strd	r3, r3, [r0]
 8005aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005af2:	6083      	str	r3, [r0, #8]
 8005af4:	8181      	strh	r1, [r0, #12]
 8005af6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005af8:	81c2      	strh	r2, [r0, #14]
 8005afa:	6183      	str	r3, [r0, #24]
 8005afc:	4619      	mov	r1, r3
 8005afe:	2208      	movs	r2, #8
 8005b00:	305c      	adds	r0, #92	@ 0x5c
 8005b02:	f000 f9f9 	bl	8005ef8 <memset>
 8005b06:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <std+0x58>)
 8005b08:	6224      	str	r4, [r4, #32]
 8005b0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <std+0x5c>)
 8005b0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b10:	4b0c      	ldr	r3, [pc, #48]	@ (8005b44 <std+0x60>)
 8005b12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b14:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <std+0x64>)
 8005b16:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b18:	4b0c      	ldr	r3, [pc, #48]	@ (8005b4c <std+0x68>)
 8005b1a:	429c      	cmp	r4, r3
 8005b1c:	d006      	beq.n	8005b2c <std+0x48>
 8005b1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b22:	4294      	cmp	r4, r2
 8005b24:	d002      	beq.n	8005b2c <std+0x48>
 8005b26:	33d0      	adds	r3, #208	@ 0xd0
 8005b28:	429c      	cmp	r4, r3
 8005b2a:	d105      	bne.n	8005b38 <std+0x54>
 8005b2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b34:	f000 ba5c 	b.w	8005ff0 <__retarget_lock_init_recursive>
 8005b38:	bd10      	pop	{r4, pc}
 8005b3a:	bf00      	nop
 8005b3c:	08005d49 	.word	0x08005d49
 8005b40:	08005d6b 	.word	0x08005d6b
 8005b44:	08005da3 	.word	0x08005da3
 8005b48:	08005dc7 	.word	0x08005dc7
 8005b4c:	20000454 	.word	0x20000454

08005b50 <stdio_exit_handler>:
 8005b50:	4a02      	ldr	r2, [pc, #8]	@ (8005b5c <stdio_exit_handler+0xc>)
 8005b52:	4903      	ldr	r1, [pc, #12]	@ (8005b60 <stdio_exit_handler+0x10>)
 8005b54:	4803      	ldr	r0, [pc, #12]	@ (8005b64 <stdio_exit_handler+0x14>)
 8005b56:	f000 b869 	b.w	8005c2c <_fwalk_sglue>
 8005b5a:	bf00      	nop
 8005b5c:	2000000c 	.word	0x2000000c
 8005b60:	08007935 	.word	0x08007935
 8005b64:	2000001c 	.word	0x2000001c

08005b68 <cleanup_stdio>:
 8005b68:	6841      	ldr	r1, [r0, #4]
 8005b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b9c <cleanup_stdio+0x34>)
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4299      	cmp	r1, r3
 8005b70:	4604      	mov	r4, r0
 8005b72:	d001      	beq.n	8005b78 <cleanup_stdio+0x10>
 8005b74:	f001 fede 	bl	8007934 <_fflush_r>
 8005b78:	68a1      	ldr	r1, [r4, #8]
 8005b7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <cleanup_stdio+0x38>)
 8005b7c:	4299      	cmp	r1, r3
 8005b7e:	d002      	beq.n	8005b86 <cleanup_stdio+0x1e>
 8005b80:	4620      	mov	r0, r4
 8005b82:	f001 fed7 	bl	8007934 <_fflush_r>
 8005b86:	68e1      	ldr	r1, [r4, #12]
 8005b88:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <cleanup_stdio+0x3c>)
 8005b8a:	4299      	cmp	r1, r3
 8005b8c:	d004      	beq.n	8005b98 <cleanup_stdio+0x30>
 8005b8e:	4620      	mov	r0, r4
 8005b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b94:	f001 bece 	b.w	8007934 <_fflush_r>
 8005b98:	bd10      	pop	{r4, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000454 	.word	0x20000454
 8005ba0:	200004bc 	.word	0x200004bc
 8005ba4:	20000524 	.word	0x20000524

08005ba8 <global_stdio_init.part.0>:
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd8 <global_stdio_init.part.0+0x30>)
 8005bac:	4c0b      	ldr	r4, [pc, #44]	@ (8005bdc <global_stdio_init.part.0+0x34>)
 8005bae:	4a0c      	ldr	r2, [pc, #48]	@ (8005be0 <global_stdio_init.part.0+0x38>)
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	2104      	movs	r1, #4
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f7ff ff94 	bl	8005ae4 <std>
 8005bbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	2109      	movs	r1, #9
 8005bc4:	f7ff ff8e 	bl	8005ae4 <std>
 8005bc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bcc:	2202      	movs	r2, #2
 8005bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd2:	2112      	movs	r1, #18
 8005bd4:	f7ff bf86 	b.w	8005ae4 <std>
 8005bd8:	2000058c 	.word	0x2000058c
 8005bdc:	20000454 	.word	0x20000454
 8005be0:	08005b51 	.word	0x08005b51

08005be4 <__sfp_lock_acquire>:
 8005be4:	4801      	ldr	r0, [pc, #4]	@ (8005bec <__sfp_lock_acquire+0x8>)
 8005be6:	f000 ba04 	b.w	8005ff2 <__retarget_lock_acquire_recursive>
 8005bea:	bf00      	nop
 8005bec:	20000595 	.word	0x20000595

08005bf0 <__sfp_lock_release>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	@ (8005bf8 <__sfp_lock_release+0x8>)
 8005bf2:	f000 b9ff 	b.w	8005ff4 <__retarget_lock_release_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20000595 	.word	0x20000595

08005bfc <__sinit>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4604      	mov	r4, r0
 8005c00:	f7ff fff0 	bl	8005be4 <__sfp_lock_acquire>
 8005c04:	6a23      	ldr	r3, [r4, #32]
 8005c06:	b11b      	cbz	r3, 8005c10 <__sinit+0x14>
 8005c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0c:	f7ff bff0 	b.w	8005bf0 <__sfp_lock_release>
 8005c10:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <__sinit+0x28>)
 8005c12:	6223      	str	r3, [r4, #32]
 8005c14:	4b04      	ldr	r3, [pc, #16]	@ (8005c28 <__sinit+0x2c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1f5      	bne.n	8005c08 <__sinit+0xc>
 8005c1c:	f7ff ffc4 	bl	8005ba8 <global_stdio_init.part.0>
 8005c20:	e7f2      	b.n	8005c08 <__sinit+0xc>
 8005c22:	bf00      	nop
 8005c24:	08005b69 	.word	0x08005b69
 8005c28:	2000058c 	.word	0x2000058c

08005c2c <_fwalk_sglue>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	4607      	mov	r7, r0
 8005c32:	4688      	mov	r8, r1
 8005c34:	4614      	mov	r4, r2
 8005c36:	2600      	movs	r6, #0
 8005c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8005c40:	d505      	bpl.n	8005c4e <_fwalk_sglue+0x22>
 8005c42:	6824      	ldr	r4, [r4, #0]
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d1f7      	bne.n	8005c38 <_fwalk_sglue+0xc>
 8005c48:	4630      	mov	r0, r6
 8005c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d907      	bls.n	8005c64 <_fwalk_sglue+0x38>
 8005c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	d003      	beq.n	8005c64 <_fwalk_sglue+0x38>
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	4638      	mov	r0, r7
 8005c60:	47c0      	blx	r8
 8005c62:	4306      	orrs	r6, r0
 8005c64:	3568      	adds	r5, #104	@ 0x68
 8005c66:	e7e9      	b.n	8005c3c <_fwalk_sglue+0x10>

08005c68 <iprintf>:
 8005c68:	b40f      	push	{r0, r1, r2, r3}
 8005c6a:	b507      	push	{r0, r1, r2, lr}
 8005c6c:	4906      	ldr	r1, [pc, #24]	@ (8005c88 <iprintf+0x20>)
 8005c6e:	ab04      	add	r3, sp, #16
 8005c70:	6808      	ldr	r0, [r1, #0]
 8005c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c76:	6881      	ldr	r1, [r0, #8]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	f001 fcc3 	bl	8007604 <_vfiprintf_r>
 8005c7e:	b003      	add	sp, #12
 8005c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c84:	b004      	add	sp, #16
 8005c86:	4770      	bx	lr
 8005c88:	20000018 	.word	0x20000018

08005c8c <_puts_r>:
 8005c8c:	6a03      	ldr	r3, [r0, #32]
 8005c8e:	b570      	push	{r4, r5, r6, lr}
 8005c90:	4605      	mov	r5, r0
 8005c92:	460e      	mov	r6, r1
 8005c94:	6884      	ldr	r4, [r0, #8]
 8005c96:	b90b      	cbnz	r3, 8005c9c <_puts_r+0x10>
 8005c98:	f7ff ffb0 	bl	8005bfc <__sinit>
 8005c9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c9e:	07db      	lsls	r3, r3, #31
 8005ca0:	d405      	bmi.n	8005cae <_puts_r+0x22>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	0598      	lsls	r0, r3, #22
 8005ca6:	d402      	bmi.n	8005cae <_puts_r+0x22>
 8005ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005caa:	f000 f9a2 	bl	8005ff2 <__retarget_lock_acquire_recursive>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	0719      	lsls	r1, r3, #28
 8005cb2:	d502      	bpl.n	8005cba <_puts_r+0x2e>
 8005cb4:	6923      	ldr	r3, [r4, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d135      	bne.n	8005d26 <_puts_r+0x9a>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f000 f8c5 	bl	8005e4c <__swsetup_r>
 8005cc2:	b380      	cbz	r0, 8005d26 <_puts_r+0x9a>
 8005cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8005cc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cca:	07da      	lsls	r2, r3, #31
 8005ccc:	d405      	bmi.n	8005cda <_puts_r+0x4e>
 8005cce:	89a3      	ldrh	r3, [r4, #12]
 8005cd0:	059b      	lsls	r3, r3, #22
 8005cd2:	d402      	bmi.n	8005cda <_puts_r+0x4e>
 8005cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cd6:	f000 f98d 	bl	8005ff4 <__retarget_lock_release_recursive>
 8005cda:	4628      	mov	r0, r5
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	da04      	bge.n	8005cec <_puts_r+0x60>
 8005ce2:	69a2      	ldr	r2, [r4, #24]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	dc17      	bgt.n	8005d18 <_puts_r+0x8c>
 8005ce8:	290a      	cmp	r1, #10
 8005cea:	d015      	beq.n	8005d18 <_puts_r+0x8c>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	6022      	str	r2, [r4, #0]
 8005cf2:	7019      	strb	r1, [r3, #0]
 8005cf4:	68a3      	ldr	r3, [r4, #8]
 8005cf6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	60a3      	str	r3, [r4, #8]
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	d1ed      	bne.n	8005cde <_puts_r+0x52>
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	da11      	bge.n	8005d2a <_puts_r+0x9e>
 8005d06:	4622      	mov	r2, r4
 8005d08:	210a      	movs	r1, #10
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 f85f 	bl	8005dce <__swbuf_r>
 8005d10:	3001      	adds	r0, #1
 8005d12:	d0d7      	beq.n	8005cc4 <_puts_r+0x38>
 8005d14:	250a      	movs	r5, #10
 8005d16:	e7d7      	b.n	8005cc8 <_puts_r+0x3c>
 8005d18:	4622      	mov	r2, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 f857 	bl	8005dce <__swbuf_r>
 8005d20:	3001      	adds	r0, #1
 8005d22:	d1e7      	bne.n	8005cf4 <_puts_r+0x68>
 8005d24:	e7ce      	b.n	8005cc4 <_puts_r+0x38>
 8005d26:	3e01      	subs	r6, #1
 8005d28:	e7e4      	b.n	8005cf4 <_puts_r+0x68>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	6022      	str	r2, [r4, #0]
 8005d30:	220a      	movs	r2, #10
 8005d32:	701a      	strb	r2, [r3, #0]
 8005d34:	e7ee      	b.n	8005d14 <_puts_r+0x88>
	...

08005d38 <puts>:
 8005d38:	4b02      	ldr	r3, [pc, #8]	@ (8005d44 <puts+0xc>)
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f7ff bfa5 	b.w	8005c8c <_puts_r>
 8005d42:	bf00      	nop
 8005d44:	20000018 	.word	0x20000018

08005d48 <__sread>:
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	f000 f900 	bl	8005f54 <_read_r>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	bfab      	itete	ge
 8005d58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005d5c:	181b      	addge	r3, r3, r0
 8005d5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d62:	bfac      	ite	ge
 8005d64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d66:	81a3      	strhlt	r3, [r4, #12]
 8005d68:	bd10      	pop	{r4, pc}

08005d6a <__swrite>:
 8005d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6e:	461f      	mov	r7, r3
 8005d70:	898b      	ldrh	r3, [r1, #12]
 8005d72:	4605      	mov	r5, r0
 8005d74:	05db      	lsls	r3, r3, #23
 8005d76:	460c      	mov	r4, r1
 8005d78:	4616      	mov	r6, r2
 8005d7a:	d505      	bpl.n	8005d88 <__swrite+0x1e>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d84:	f000 f8d4 	bl	8005f30 <_lseek_r>
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	4632      	mov	r2, r6
 8005d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d90:	81a3      	strh	r3, [r4, #12]
 8005d92:	4628      	mov	r0, r5
 8005d94:	463b      	mov	r3, r7
 8005d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	f000 b8eb 	b.w	8005f78 <_write_r>

08005da2 <__sseek>:
 8005da2:	b510      	push	{r4, lr}
 8005da4:	460c      	mov	r4, r1
 8005da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005daa:	f000 f8c1 	bl	8005f30 <_lseek_r>
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	bf15      	itete	ne
 8005db4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005db6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005dba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005dbe:	81a3      	strheq	r3, [r4, #12]
 8005dc0:	bf18      	it	ne
 8005dc2:	81a3      	strhne	r3, [r4, #12]
 8005dc4:	bd10      	pop	{r4, pc}

08005dc6 <__sclose>:
 8005dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dca:	f000 b8a1 	b.w	8005f10 <_close_r>

08005dce <__swbuf_r>:
 8005dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd0:	460e      	mov	r6, r1
 8005dd2:	4614      	mov	r4, r2
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	b118      	cbz	r0, 8005de0 <__swbuf_r+0x12>
 8005dd8:	6a03      	ldr	r3, [r0, #32]
 8005dda:	b90b      	cbnz	r3, 8005de0 <__swbuf_r+0x12>
 8005ddc:	f7ff ff0e 	bl	8005bfc <__sinit>
 8005de0:	69a3      	ldr	r3, [r4, #24]
 8005de2:	60a3      	str	r3, [r4, #8]
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	071a      	lsls	r2, r3, #28
 8005de8:	d501      	bpl.n	8005dee <__swbuf_r+0x20>
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	b943      	cbnz	r3, 8005e00 <__swbuf_r+0x32>
 8005dee:	4621      	mov	r1, r4
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 f82b 	bl	8005e4c <__swsetup_r>
 8005df6:	b118      	cbz	r0, 8005e00 <__swbuf_r+0x32>
 8005df8:	f04f 37ff 	mov.w	r7, #4294967295
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	6922      	ldr	r2, [r4, #16]
 8005e04:	b2f6      	uxtb	r6, r6
 8005e06:	1a98      	subs	r0, r3, r2
 8005e08:	6963      	ldr	r3, [r4, #20]
 8005e0a:	4637      	mov	r7, r6
 8005e0c:	4283      	cmp	r3, r0
 8005e0e:	dc05      	bgt.n	8005e1c <__swbuf_r+0x4e>
 8005e10:	4621      	mov	r1, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	f001 fd8e 	bl	8007934 <_fflush_r>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1ed      	bne.n	8005df8 <__swbuf_r+0x2a>
 8005e1c:	68a3      	ldr	r3, [r4, #8]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	60a3      	str	r3, [r4, #8]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	6022      	str	r2, [r4, #0]
 8005e28:	701e      	strb	r6, [r3, #0]
 8005e2a:	6962      	ldr	r2, [r4, #20]
 8005e2c:	1c43      	adds	r3, r0, #1
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d004      	beq.n	8005e3c <__swbuf_r+0x6e>
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	07db      	lsls	r3, r3, #31
 8005e36:	d5e1      	bpl.n	8005dfc <__swbuf_r+0x2e>
 8005e38:	2e0a      	cmp	r6, #10
 8005e3a:	d1df      	bne.n	8005dfc <__swbuf_r+0x2e>
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f001 fd78 	bl	8007934 <_fflush_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d0d9      	beq.n	8005dfc <__swbuf_r+0x2e>
 8005e48:	e7d6      	b.n	8005df8 <__swbuf_r+0x2a>
	...

08005e4c <__swsetup_r>:
 8005e4c:	b538      	push	{r3, r4, r5, lr}
 8005e4e:	4b29      	ldr	r3, [pc, #164]	@ (8005ef4 <__swsetup_r+0xa8>)
 8005e50:	4605      	mov	r5, r0
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	460c      	mov	r4, r1
 8005e56:	b118      	cbz	r0, 8005e60 <__swsetup_r+0x14>
 8005e58:	6a03      	ldr	r3, [r0, #32]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <__swsetup_r+0x14>
 8005e5c:	f7ff fece 	bl	8005bfc <__sinit>
 8005e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e64:	0719      	lsls	r1, r3, #28
 8005e66:	d422      	bmi.n	8005eae <__swsetup_r+0x62>
 8005e68:	06da      	lsls	r2, r3, #27
 8005e6a:	d407      	bmi.n	8005e7c <__swsetup_r+0x30>
 8005e6c:	2209      	movs	r2, #9
 8005e6e:	602a      	str	r2, [r5, #0]
 8005e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e74:	f04f 30ff 	mov.w	r0, #4294967295
 8005e78:	81a3      	strh	r3, [r4, #12]
 8005e7a:	e033      	b.n	8005ee4 <__swsetup_r+0x98>
 8005e7c:	0758      	lsls	r0, r3, #29
 8005e7e:	d512      	bpl.n	8005ea6 <__swsetup_r+0x5a>
 8005e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e82:	b141      	cbz	r1, 8005e96 <__swsetup_r+0x4a>
 8005e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e88:	4299      	cmp	r1, r3
 8005e8a:	d002      	beq.n	8005e92 <__swsetup_r+0x46>
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f000 ff13 	bl	8006cb8 <_free_r>
 8005e92:	2300      	movs	r3, #0
 8005e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e96:	89a3      	ldrh	r3, [r4, #12]
 8005e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e9c:	81a3      	strh	r3, [r4, #12]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6063      	str	r3, [r4, #4]
 8005ea2:	6923      	ldr	r3, [r4, #16]
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	f043 0308 	orr.w	r3, r3, #8
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	6923      	ldr	r3, [r4, #16]
 8005eb0:	b94b      	cbnz	r3, 8005ec6 <__swsetup_r+0x7a>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ebc:	d003      	beq.n	8005ec6 <__swsetup_r+0x7a>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f001 fd84 	bl	80079ce <__smakebuf_r>
 8005ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eca:	f013 0201 	ands.w	r2, r3, #1
 8005ece:	d00a      	beq.n	8005ee6 <__swsetup_r+0x9a>
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	60a2      	str	r2, [r4, #8]
 8005ed4:	6962      	ldr	r2, [r4, #20]
 8005ed6:	4252      	negs	r2, r2
 8005ed8:	61a2      	str	r2, [r4, #24]
 8005eda:	6922      	ldr	r2, [r4, #16]
 8005edc:	b942      	cbnz	r2, 8005ef0 <__swsetup_r+0xa4>
 8005ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ee2:	d1c5      	bne.n	8005e70 <__swsetup_r+0x24>
 8005ee4:	bd38      	pop	{r3, r4, r5, pc}
 8005ee6:	0799      	lsls	r1, r3, #30
 8005ee8:	bf58      	it	pl
 8005eea:	6962      	ldrpl	r2, [r4, #20]
 8005eec:	60a2      	str	r2, [r4, #8]
 8005eee:	e7f4      	b.n	8005eda <__swsetup_r+0x8e>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e7f7      	b.n	8005ee4 <__swsetup_r+0x98>
 8005ef4:	20000018 	.word	0x20000018

08005ef8 <memset>:
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4402      	add	r2, r0
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d100      	bne.n	8005f02 <memset+0xa>
 8005f00:	4770      	bx	lr
 8005f02:	f803 1b01 	strb.w	r1, [r3], #1
 8005f06:	e7f9      	b.n	8005efc <memset+0x4>

08005f08 <_localeconv_r>:
 8005f08:	4800      	ldr	r0, [pc, #0]	@ (8005f0c <_localeconv_r+0x4>)
 8005f0a:	4770      	bx	lr
 8005f0c:	20000158 	.word	0x20000158

08005f10 <_close_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	2300      	movs	r3, #0
 8005f14:	4d05      	ldr	r5, [pc, #20]	@ (8005f2c <_close_r+0x1c>)
 8005f16:	4604      	mov	r4, r0
 8005f18:	4608      	mov	r0, r1
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	f7fc fa73 	bl	8002406 <_close>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_close_r+0x1a>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_close_r+0x1a>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	20000590 	.word	0x20000590

08005f30 <_lseek_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4d05      	ldr	r5, [pc, #20]	@ (8005f50 <_lseek_r+0x20>)
 8005f3c:	602a      	str	r2, [r5, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f7fc fa85 	bl	800244e <_lseek>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_lseek_r+0x1e>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_lseek_r+0x1e>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000590 	.word	0x20000590

08005f54 <_read_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4d05      	ldr	r5, [pc, #20]	@ (8005f74 <_read_r+0x20>)
 8005f60:	602a      	str	r2, [r5, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	f7fc fa32 	bl	80023cc <_read>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d102      	bne.n	8005f72 <_read_r+0x1e>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	b103      	cbz	r3, 8005f72 <_read_r+0x1e>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	20000590 	.word	0x20000590

08005f78 <_write_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	2200      	movs	r2, #0
 8005f82:	4d05      	ldr	r5, [pc, #20]	@ (8005f98 <_write_r+0x20>)
 8005f84:	602a      	str	r2, [r5, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f7fb fca2 	bl	80018d0 <_write>
 8005f8c:	1c43      	adds	r3, r0, #1
 8005f8e:	d102      	bne.n	8005f96 <_write_r+0x1e>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b103      	cbz	r3, 8005f96 <_write_r+0x1e>
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	20000590 	.word	0x20000590

08005f9c <__errno>:
 8005f9c:	4b01      	ldr	r3, [pc, #4]	@ (8005fa4 <__errno+0x8>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000018 	.word	0x20000018

08005fa8 <__libc_init_array>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	2600      	movs	r6, #0
 8005fac:	4d0c      	ldr	r5, [pc, #48]	@ (8005fe0 <__libc_init_array+0x38>)
 8005fae:	4c0d      	ldr	r4, [pc, #52]	@ (8005fe4 <__libc_init_array+0x3c>)
 8005fb0:	1b64      	subs	r4, r4, r5
 8005fb2:	10a4      	asrs	r4, r4, #2
 8005fb4:	42a6      	cmp	r6, r4
 8005fb6:	d109      	bne.n	8005fcc <__libc_init_array+0x24>
 8005fb8:	f001 fe36 	bl	8007c28 <_init>
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	4d0a      	ldr	r5, [pc, #40]	@ (8005fe8 <__libc_init_array+0x40>)
 8005fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8005fec <__libc_init_array+0x44>)
 8005fc2:	1b64      	subs	r4, r4, r5
 8005fc4:	10a4      	asrs	r4, r4, #2
 8005fc6:	42a6      	cmp	r6, r4
 8005fc8:	d105      	bne.n	8005fd6 <__libc_init_array+0x2e>
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd0:	4798      	blx	r3
 8005fd2:	3601      	adds	r6, #1
 8005fd4:	e7ee      	b.n	8005fb4 <__libc_init_array+0xc>
 8005fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fda:	4798      	blx	r3
 8005fdc:	3601      	adds	r6, #1
 8005fde:	e7f2      	b.n	8005fc6 <__libc_init_array+0x1e>
 8005fe0:	080083b0 	.word	0x080083b0
 8005fe4:	080083b0 	.word	0x080083b0
 8005fe8:	080083b0 	.word	0x080083b0
 8005fec:	080083b4 	.word	0x080083b4

08005ff0 <__retarget_lock_init_recursive>:
 8005ff0:	4770      	bx	lr

08005ff2 <__retarget_lock_acquire_recursive>:
 8005ff2:	4770      	bx	lr

08005ff4 <__retarget_lock_release_recursive>:
 8005ff4:	4770      	bx	lr

08005ff6 <memchr>:
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	b2c9      	uxtb	r1, r1
 8005ffc:	4402      	add	r2, r0
 8005ffe:	4293      	cmp	r3, r2
 8006000:	4618      	mov	r0, r3
 8006002:	d101      	bne.n	8006008 <memchr+0x12>
 8006004:	2000      	movs	r0, #0
 8006006:	e003      	b.n	8006010 <memchr+0x1a>
 8006008:	7804      	ldrb	r4, [r0, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	428c      	cmp	r4, r1
 800600e:	d1f6      	bne.n	8005ffe <memchr+0x8>
 8006010:	bd10      	pop	{r4, pc}

08006012 <quorem>:
 8006012:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006016:	6903      	ldr	r3, [r0, #16]
 8006018:	690c      	ldr	r4, [r1, #16]
 800601a:	4607      	mov	r7, r0
 800601c:	42a3      	cmp	r3, r4
 800601e:	db7e      	blt.n	800611e <quorem+0x10c>
 8006020:	3c01      	subs	r4, #1
 8006022:	00a3      	lsls	r3, r4, #2
 8006024:	f100 0514 	add.w	r5, r0, #20
 8006028:	f101 0814 	add.w	r8, r1, #20
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800603c:	3301      	adds	r3, #1
 800603e:	429a      	cmp	r2, r3
 8006040:	fbb2 f6f3 	udiv	r6, r2, r3
 8006044:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006048:	d32e      	bcc.n	80060a8 <quorem+0x96>
 800604a:	f04f 0a00 	mov.w	sl, #0
 800604e:	46c4      	mov	ip, r8
 8006050:	46ae      	mov	lr, r5
 8006052:	46d3      	mov	fp, sl
 8006054:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006058:	b298      	uxth	r0, r3
 800605a:	fb06 a000 	mla	r0, r6, r0, sl
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	0c02      	lsrs	r2, r0, #16
 8006062:	fb06 2303 	mla	r3, r6, r3, r2
 8006066:	f8de 2000 	ldr.w	r2, [lr]
 800606a:	b280      	uxth	r0, r0
 800606c:	b292      	uxth	r2, r2
 800606e:	1a12      	subs	r2, r2, r0
 8006070:	445a      	add	r2, fp
 8006072:	f8de 0000 	ldr.w	r0, [lr]
 8006076:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800607a:	b29b      	uxth	r3, r3
 800607c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006080:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006084:	b292      	uxth	r2, r2
 8006086:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800608a:	45e1      	cmp	r9, ip
 800608c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006090:	f84e 2b04 	str.w	r2, [lr], #4
 8006094:	d2de      	bcs.n	8006054 <quorem+0x42>
 8006096:	9b00      	ldr	r3, [sp, #0]
 8006098:	58eb      	ldr	r3, [r5, r3]
 800609a:	b92b      	cbnz	r3, 80060a8 <quorem+0x96>
 800609c:	9b01      	ldr	r3, [sp, #4]
 800609e:	3b04      	subs	r3, #4
 80060a0:	429d      	cmp	r5, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	d32f      	bcc.n	8006106 <quorem+0xf4>
 80060a6:	613c      	str	r4, [r7, #16]
 80060a8:	4638      	mov	r0, r7
 80060aa:	f001 f97b 	bl	80073a4 <__mcmp>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	db25      	blt.n	80060fe <quorem+0xec>
 80060b2:	4629      	mov	r1, r5
 80060b4:	2000      	movs	r0, #0
 80060b6:	f858 2b04 	ldr.w	r2, [r8], #4
 80060ba:	f8d1 c000 	ldr.w	ip, [r1]
 80060be:	fa1f fe82 	uxth.w	lr, r2
 80060c2:	fa1f f38c 	uxth.w	r3, ip
 80060c6:	eba3 030e 	sub.w	r3, r3, lr
 80060ca:	4403      	add	r3, r0
 80060cc:	0c12      	lsrs	r2, r2, #16
 80060ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060dc:	45c1      	cmp	r9, r8
 80060de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060e2:	f841 3b04 	str.w	r3, [r1], #4
 80060e6:	d2e6      	bcs.n	80060b6 <quorem+0xa4>
 80060e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060f0:	b922      	cbnz	r2, 80060fc <quorem+0xea>
 80060f2:	3b04      	subs	r3, #4
 80060f4:	429d      	cmp	r5, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	d30b      	bcc.n	8006112 <quorem+0x100>
 80060fa:	613c      	str	r4, [r7, #16]
 80060fc:	3601      	adds	r6, #1
 80060fe:	4630      	mov	r0, r6
 8006100:	b003      	add	sp, #12
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	6812      	ldr	r2, [r2, #0]
 8006108:	3b04      	subs	r3, #4
 800610a:	2a00      	cmp	r2, #0
 800610c:	d1cb      	bne.n	80060a6 <quorem+0x94>
 800610e:	3c01      	subs	r4, #1
 8006110:	e7c6      	b.n	80060a0 <quorem+0x8e>
 8006112:	6812      	ldr	r2, [r2, #0]
 8006114:	3b04      	subs	r3, #4
 8006116:	2a00      	cmp	r2, #0
 8006118:	d1ef      	bne.n	80060fa <quorem+0xe8>
 800611a:	3c01      	subs	r4, #1
 800611c:	e7ea      	b.n	80060f4 <quorem+0xe2>
 800611e:	2000      	movs	r0, #0
 8006120:	e7ee      	b.n	8006100 <quorem+0xee>
 8006122:	0000      	movs	r0, r0
 8006124:	0000      	movs	r0, r0
	...

08006128 <_dtoa_r>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	4614      	mov	r4, r2
 800612e:	461d      	mov	r5, r3
 8006130:	69c7      	ldr	r7, [r0, #28]
 8006132:	b097      	sub	sp, #92	@ 0x5c
 8006134:	4683      	mov	fp, r0
 8006136:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800613a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800613c:	b97f      	cbnz	r7, 800615e <_dtoa_r+0x36>
 800613e:	2010      	movs	r0, #16
 8006140:	f000 fe02 	bl	8006d48 <malloc>
 8006144:	4602      	mov	r2, r0
 8006146:	f8cb 001c 	str.w	r0, [fp, #28]
 800614a:	b920      	cbnz	r0, 8006156 <_dtoa_r+0x2e>
 800614c:	21ef      	movs	r1, #239	@ 0xef
 800614e:	4ba8      	ldr	r3, [pc, #672]	@ (80063f0 <_dtoa_r+0x2c8>)
 8006150:	48a8      	ldr	r0, [pc, #672]	@ (80063f4 <_dtoa_r+0x2cc>)
 8006152:	f001 fcb9 	bl	8007ac8 <__assert_func>
 8006156:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800615a:	6007      	str	r7, [r0, #0]
 800615c:	60c7      	str	r7, [r0, #12]
 800615e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006162:	6819      	ldr	r1, [r3, #0]
 8006164:	b159      	cbz	r1, 800617e <_dtoa_r+0x56>
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	2301      	movs	r3, #1
 800616a:	4093      	lsls	r3, r2
 800616c:	604a      	str	r2, [r1, #4]
 800616e:	608b      	str	r3, [r1, #8]
 8006170:	4658      	mov	r0, fp
 8006172:	f000 fedf 	bl	8006f34 <_Bfree>
 8006176:	2200      	movs	r2, #0
 8006178:	f8db 301c 	ldr.w	r3, [fp, #28]
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	1e2b      	subs	r3, r5, #0
 8006180:	bfaf      	iteee	ge
 8006182:	2300      	movge	r3, #0
 8006184:	2201      	movlt	r2, #1
 8006186:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800618a:	9303      	strlt	r3, [sp, #12]
 800618c:	bfa8      	it	ge
 800618e:	6033      	strge	r3, [r6, #0]
 8006190:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006194:	4b98      	ldr	r3, [pc, #608]	@ (80063f8 <_dtoa_r+0x2d0>)
 8006196:	bfb8      	it	lt
 8006198:	6032      	strlt	r2, [r6, #0]
 800619a:	ea33 0308 	bics.w	r3, r3, r8
 800619e:	d112      	bne.n	80061c6 <_dtoa_r+0x9e>
 80061a0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061ac:	4323      	orrs	r3, r4
 80061ae:	f000 8550 	beq.w	8006c52 <_dtoa_r+0xb2a>
 80061b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061b4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80063fc <_dtoa_r+0x2d4>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8552 	beq.w	8006c62 <_dtoa_r+0xb3a>
 80061be:	f10a 0303 	add.w	r3, sl, #3
 80061c2:	f000 bd4c 	b.w	8006c5e <_dtoa_r+0xb36>
 80061c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ca:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80061ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061d2:	2200      	movs	r2, #0
 80061d4:	2300      	movs	r3, #0
 80061d6:	f7fa fc23 	bl	8000a20 <__aeabi_dcmpeq>
 80061da:	4607      	mov	r7, r0
 80061dc:	b158      	cbz	r0, 80061f6 <_dtoa_r+0xce>
 80061de:	2301      	movs	r3, #1
 80061e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061e6:	b113      	cbz	r3, 80061ee <_dtoa_r+0xc6>
 80061e8:	4b85      	ldr	r3, [pc, #532]	@ (8006400 <_dtoa_r+0x2d8>)
 80061ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006404 <_dtoa_r+0x2dc>
 80061f2:	f000 bd36 	b.w	8006c62 <_dtoa_r+0xb3a>
 80061f6:	ab14      	add	r3, sp, #80	@ 0x50
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	ab15      	add	r3, sp, #84	@ 0x54
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	4658      	mov	r0, fp
 8006200:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006204:	f001 f97e 	bl	8007504 <__d2b>
 8006208:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800620c:	4681      	mov	r9, r0
 800620e:	2e00      	cmp	r6, #0
 8006210:	d077      	beq.n	8006302 <_dtoa_r+0x1da>
 8006212:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006218:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800621c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006220:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006224:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006228:	9712      	str	r7, [sp, #72]	@ 0x48
 800622a:	4619      	mov	r1, r3
 800622c:	2200      	movs	r2, #0
 800622e:	4b76      	ldr	r3, [pc, #472]	@ (8006408 <_dtoa_r+0x2e0>)
 8006230:	f7f9 ffd6 	bl	80001e0 <__aeabi_dsub>
 8006234:	a368      	add	r3, pc, #416	@ (adr r3, 80063d8 <_dtoa_r+0x2b0>)
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f7fa f989 	bl	8000550 <__aeabi_dmul>
 800623e:	a368      	add	r3, pc, #416	@ (adr r3, 80063e0 <_dtoa_r+0x2b8>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f7f9 ffce 	bl	80001e4 <__adddf3>
 8006248:	4604      	mov	r4, r0
 800624a:	4630      	mov	r0, r6
 800624c:	460d      	mov	r5, r1
 800624e:	f7fa f915 	bl	800047c <__aeabi_i2d>
 8006252:	a365      	add	r3, pc, #404	@ (adr r3, 80063e8 <_dtoa_r+0x2c0>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f7fa f97a 	bl	8000550 <__aeabi_dmul>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4620      	mov	r0, r4
 8006262:	4629      	mov	r1, r5
 8006264:	f7f9 ffbe 	bl	80001e4 <__adddf3>
 8006268:	4604      	mov	r4, r0
 800626a:	460d      	mov	r5, r1
 800626c:	f7fa fc20 	bl	8000ab0 <__aeabi_d2iz>
 8006270:	2200      	movs	r2, #0
 8006272:	4607      	mov	r7, r0
 8006274:	2300      	movs	r3, #0
 8006276:	4620      	mov	r0, r4
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa fbdb 	bl	8000a34 <__aeabi_dcmplt>
 800627e:	b140      	cbz	r0, 8006292 <_dtoa_r+0x16a>
 8006280:	4638      	mov	r0, r7
 8006282:	f7fa f8fb 	bl	800047c <__aeabi_i2d>
 8006286:	4622      	mov	r2, r4
 8006288:	462b      	mov	r3, r5
 800628a:	f7fa fbc9 	bl	8000a20 <__aeabi_dcmpeq>
 800628e:	b900      	cbnz	r0, 8006292 <_dtoa_r+0x16a>
 8006290:	3f01      	subs	r7, #1
 8006292:	2f16      	cmp	r7, #22
 8006294:	d853      	bhi.n	800633e <_dtoa_r+0x216>
 8006296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800629a:	4b5c      	ldr	r3, [pc, #368]	@ (800640c <_dtoa_r+0x2e4>)
 800629c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	f7fa fbc6 	bl	8000a34 <__aeabi_dcmplt>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d04a      	beq.n	8006342 <_dtoa_r+0x21a>
 80062ac:	2300      	movs	r3, #0
 80062ae:	3f01      	subs	r7, #1
 80062b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062b4:	1b9b      	subs	r3, r3, r6
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	bf46      	itte	mi
 80062ba:	f1c3 0801 	rsbmi	r8, r3, #1
 80062be:	2300      	movmi	r3, #0
 80062c0:	f04f 0800 	movpl.w	r8, #0
 80062c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80062c6:	bf48      	it	mi
 80062c8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80062ca:	2f00      	cmp	r7, #0
 80062cc:	db3b      	blt.n	8006346 <_dtoa_r+0x21e>
 80062ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d0:	970e      	str	r7, [sp, #56]	@ 0x38
 80062d2:	443b      	add	r3, r7
 80062d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062d6:	2300      	movs	r3, #0
 80062d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062dc:	2b09      	cmp	r3, #9
 80062de:	d866      	bhi.n	80063ae <_dtoa_r+0x286>
 80062e0:	2b05      	cmp	r3, #5
 80062e2:	bfc4      	itt	gt
 80062e4:	3b04      	subgt	r3, #4
 80062e6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80062e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062ea:	bfc8      	it	gt
 80062ec:	2400      	movgt	r4, #0
 80062ee:	f1a3 0302 	sub.w	r3, r3, #2
 80062f2:	bfd8      	it	le
 80062f4:	2401      	movle	r4, #1
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d864      	bhi.n	80063c4 <_dtoa_r+0x29c>
 80062fa:	e8df f003 	tbb	[pc, r3]
 80062fe:	382b      	.short	0x382b
 8006300:	5636      	.short	0x5636
 8006302:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006306:	441e      	add	r6, r3
 8006308:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800630c:	2b20      	cmp	r3, #32
 800630e:	bfc1      	itttt	gt
 8006310:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006314:	fa08 f803 	lslgt.w	r8, r8, r3
 8006318:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800631c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006320:	bfd6      	itet	le
 8006322:	f1c3 0320 	rsble	r3, r3, #32
 8006326:	ea48 0003 	orrgt.w	r0, r8, r3
 800632a:	fa04 f003 	lslle.w	r0, r4, r3
 800632e:	f7fa f895 	bl	800045c <__aeabi_ui2d>
 8006332:	2201      	movs	r2, #1
 8006334:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006338:	3e01      	subs	r6, #1
 800633a:	9212      	str	r2, [sp, #72]	@ 0x48
 800633c:	e775      	b.n	800622a <_dtoa_r+0x102>
 800633e:	2301      	movs	r3, #1
 8006340:	e7b6      	b.n	80062b0 <_dtoa_r+0x188>
 8006342:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006344:	e7b5      	b.n	80062b2 <_dtoa_r+0x18a>
 8006346:	427b      	negs	r3, r7
 8006348:	930a      	str	r3, [sp, #40]	@ 0x28
 800634a:	2300      	movs	r3, #0
 800634c:	eba8 0807 	sub.w	r8, r8, r7
 8006350:	930e      	str	r3, [sp, #56]	@ 0x38
 8006352:	e7c2      	b.n	80062da <_dtoa_r+0x1b2>
 8006354:	2300      	movs	r3, #0
 8006356:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006358:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800635a:	2b00      	cmp	r3, #0
 800635c:	dc35      	bgt.n	80063ca <_dtoa_r+0x2a2>
 800635e:	2301      	movs	r3, #1
 8006360:	461a      	mov	r2, r3
 8006362:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006366:	9221      	str	r2, [sp, #132]	@ 0x84
 8006368:	e00b      	b.n	8006382 <_dtoa_r+0x25a>
 800636a:	2301      	movs	r3, #1
 800636c:	e7f3      	b.n	8006356 <_dtoa_r+0x22e>
 800636e:	2300      	movs	r3, #0
 8006370:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006372:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	9308      	str	r3, [sp, #32]
 8006378:	3301      	adds	r3, #1
 800637a:	2b01      	cmp	r3, #1
 800637c:	9307      	str	r3, [sp, #28]
 800637e:	bfb8      	it	lt
 8006380:	2301      	movlt	r3, #1
 8006382:	2100      	movs	r1, #0
 8006384:	2204      	movs	r2, #4
 8006386:	f8db 001c 	ldr.w	r0, [fp, #28]
 800638a:	f102 0514 	add.w	r5, r2, #20
 800638e:	429d      	cmp	r5, r3
 8006390:	d91f      	bls.n	80063d2 <_dtoa_r+0x2aa>
 8006392:	6041      	str	r1, [r0, #4]
 8006394:	4658      	mov	r0, fp
 8006396:	f000 fd8d 	bl	8006eb4 <_Balloc>
 800639a:	4682      	mov	sl, r0
 800639c:	2800      	cmp	r0, #0
 800639e:	d139      	bne.n	8006414 <_dtoa_r+0x2ec>
 80063a0:	4602      	mov	r2, r0
 80063a2:	f240 11af 	movw	r1, #431	@ 0x1af
 80063a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006410 <_dtoa_r+0x2e8>)
 80063a8:	e6d2      	b.n	8006150 <_dtoa_r+0x28>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7e0      	b.n	8006370 <_dtoa_r+0x248>
 80063ae:	2401      	movs	r4, #1
 80063b0:	2300      	movs	r3, #0
 80063b2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80063b4:	9320      	str	r3, [sp, #128]	@ 0x80
 80063b6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ba:	2200      	movs	r2, #0
 80063bc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063c0:	2312      	movs	r3, #18
 80063c2:	e7d0      	b.n	8006366 <_dtoa_r+0x23e>
 80063c4:	2301      	movs	r3, #1
 80063c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063c8:	e7f5      	b.n	80063b6 <_dtoa_r+0x28e>
 80063ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063d0:	e7d7      	b.n	8006382 <_dtoa_r+0x25a>
 80063d2:	3101      	adds	r1, #1
 80063d4:	0052      	lsls	r2, r2, #1
 80063d6:	e7d8      	b.n	800638a <_dtoa_r+0x262>
 80063d8:	636f4361 	.word	0x636f4361
 80063dc:	3fd287a7 	.word	0x3fd287a7
 80063e0:	8b60c8b3 	.word	0x8b60c8b3
 80063e4:	3fc68a28 	.word	0x3fc68a28
 80063e8:	509f79fb 	.word	0x509f79fb
 80063ec:	3fd34413 	.word	0x3fd34413
 80063f0:	08008079 	.word	0x08008079
 80063f4:	08008090 	.word	0x08008090
 80063f8:	7ff00000 	.word	0x7ff00000
 80063fc:	08008075 	.word	0x08008075
 8006400:	08008049 	.word	0x08008049
 8006404:	08008048 	.word	0x08008048
 8006408:	3ff80000 	.word	0x3ff80000
 800640c:	08008188 	.word	0x08008188
 8006410:	080080e8 	.word	0x080080e8
 8006414:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006418:	6018      	str	r0, [r3, #0]
 800641a:	9b07      	ldr	r3, [sp, #28]
 800641c:	2b0e      	cmp	r3, #14
 800641e:	f200 80a4 	bhi.w	800656a <_dtoa_r+0x442>
 8006422:	2c00      	cmp	r4, #0
 8006424:	f000 80a1 	beq.w	800656a <_dtoa_r+0x442>
 8006428:	2f00      	cmp	r7, #0
 800642a:	dd33      	ble.n	8006494 <_dtoa_r+0x36c>
 800642c:	4b86      	ldr	r3, [pc, #536]	@ (8006648 <_dtoa_r+0x520>)
 800642e:	f007 020f 	and.w	r2, r7, #15
 8006432:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006436:	05f8      	lsls	r0, r7, #23
 8006438:	e9d3 3400 	ldrd	r3, r4, [r3]
 800643c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006440:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006444:	d516      	bpl.n	8006474 <_dtoa_r+0x34c>
 8006446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800644a:	4b80      	ldr	r3, [pc, #512]	@ (800664c <_dtoa_r+0x524>)
 800644c:	2603      	movs	r6, #3
 800644e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006452:	f7fa f9a7 	bl	80007a4 <__aeabi_ddiv>
 8006456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800645a:	f004 040f 	and.w	r4, r4, #15
 800645e:	4d7b      	ldr	r5, [pc, #492]	@ (800664c <_dtoa_r+0x524>)
 8006460:	b954      	cbnz	r4, 8006478 <_dtoa_r+0x350>
 8006462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800646a:	f7fa f99b 	bl	80007a4 <__aeabi_ddiv>
 800646e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006472:	e028      	b.n	80064c6 <_dtoa_r+0x39e>
 8006474:	2602      	movs	r6, #2
 8006476:	e7f2      	b.n	800645e <_dtoa_r+0x336>
 8006478:	07e1      	lsls	r1, r4, #31
 800647a:	d508      	bpl.n	800648e <_dtoa_r+0x366>
 800647c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006480:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006484:	f7fa f864 	bl	8000550 <__aeabi_dmul>
 8006488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800648c:	3601      	adds	r6, #1
 800648e:	1064      	asrs	r4, r4, #1
 8006490:	3508      	adds	r5, #8
 8006492:	e7e5      	b.n	8006460 <_dtoa_r+0x338>
 8006494:	f000 80d2 	beq.w	800663c <_dtoa_r+0x514>
 8006498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800649c:	427c      	negs	r4, r7
 800649e:	4b6a      	ldr	r3, [pc, #424]	@ (8006648 <_dtoa_r+0x520>)
 80064a0:	f004 020f 	and.w	r2, r4, #15
 80064a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f7fa f850 	bl	8000550 <__aeabi_dmul>
 80064b0:	2602      	movs	r6, #2
 80064b2:	2300      	movs	r3, #0
 80064b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b8:	4d64      	ldr	r5, [pc, #400]	@ (800664c <_dtoa_r+0x524>)
 80064ba:	1124      	asrs	r4, r4, #4
 80064bc:	2c00      	cmp	r4, #0
 80064be:	f040 80b2 	bne.w	8006626 <_dtoa_r+0x4fe>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1d3      	bne.n	800646e <_dtoa_r+0x346>
 80064c6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80b7 	beq.w	8006640 <_dtoa_r+0x518>
 80064d2:	2200      	movs	r2, #0
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	4b5d      	ldr	r3, [pc, #372]	@ (8006650 <_dtoa_r+0x528>)
 80064da:	f7fa faab 	bl	8000a34 <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f000 80ae 	beq.w	8006640 <_dtoa_r+0x518>
 80064e4:	9b07      	ldr	r3, [sp, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f000 80aa 	beq.w	8006640 <_dtoa_r+0x518>
 80064ec:	9b08      	ldr	r3, [sp, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	dd37      	ble.n	8006562 <_dtoa_r+0x43a>
 80064f2:	1e7b      	subs	r3, r7, #1
 80064f4:	4620      	mov	r0, r4
 80064f6:	9304      	str	r3, [sp, #16]
 80064f8:	2200      	movs	r2, #0
 80064fa:	4629      	mov	r1, r5
 80064fc:	4b55      	ldr	r3, [pc, #340]	@ (8006654 <_dtoa_r+0x52c>)
 80064fe:	f7fa f827 	bl	8000550 <__aeabi_dmul>
 8006502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006506:	9c08      	ldr	r4, [sp, #32]
 8006508:	3601      	adds	r6, #1
 800650a:	4630      	mov	r0, r6
 800650c:	f7f9 ffb6 	bl	800047c <__aeabi_i2d>
 8006510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006514:	f7fa f81c 	bl	8000550 <__aeabi_dmul>
 8006518:	2200      	movs	r2, #0
 800651a:	4b4f      	ldr	r3, [pc, #316]	@ (8006658 <_dtoa_r+0x530>)
 800651c:	f7f9 fe62 	bl	80001e4 <__adddf3>
 8006520:	4605      	mov	r5, r0
 8006522:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006526:	2c00      	cmp	r4, #0
 8006528:	f040 809a 	bne.w	8006660 <_dtoa_r+0x538>
 800652c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	4b4a      	ldr	r3, [pc, #296]	@ (800665c <_dtoa_r+0x534>)
 8006534:	f7f9 fe54 	bl	80001e0 <__aeabi_dsub>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006540:	462a      	mov	r2, r5
 8006542:	4633      	mov	r3, r6
 8006544:	f7fa fa94 	bl	8000a70 <__aeabi_dcmpgt>
 8006548:	2800      	cmp	r0, #0
 800654a:	f040 828e 	bne.w	8006a6a <_dtoa_r+0x942>
 800654e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006552:	462a      	mov	r2, r5
 8006554:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006558:	f7fa fa6c 	bl	8000a34 <__aeabi_dcmplt>
 800655c:	2800      	cmp	r0, #0
 800655e:	f040 8127 	bne.w	80067b0 <_dtoa_r+0x688>
 8006562:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006566:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800656a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800656c:	2b00      	cmp	r3, #0
 800656e:	f2c0 8163 	blt.w	8006838 <_dtoa_r+0x710>
 8006572:	2f0e      	cmp	r7, #14
 8006574:	f300 8160 	bgt.w	8006838 <_dtoa_r+0x710>
 8006578:	4b33      	ldr	r3, [pc, #204]	@ (8006648 <_dtoa_r+0x520>)
 800657a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800657e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006582:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006586:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006588:	2b00      	cmp	r3, #0
 800658a:	da03      	bge.n	8006594 <_dtoa_r+0x46c>
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f340 8100 	ble.w	8006794 <_dtoa_r+0x66c>
 8006594:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006598:	4656      	mov	r6, sl
 800659a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa f8ff 	bl	80007a4 <__aeabi_ddiv>
 80065a6:	f7fa fa83 	bl	8000ab0 <__aeabi_d2iz>
 80065aa:	4680      	mov	r8, r0
 80065ac:	f7f9 ff66 	bl	800047c <__aeabi_i2d>
 80065b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065b4:	f7f9 ffcc 	bl	8000550 <__aeabi_dmul>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4620      	mov	r0, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	f7f9 fe0e 	bl	80001e0 <__aeabi_dsub>
 80065c4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065c8:	9d07      	ldr	r5, [sp, #28]
 80065ca:	f806 4b01 	strb.w	r4, [r6], #1
 80065ce:	eba6 040a 	sub.w	r4, r6, sl
 80065d2:	42a5      	cmp	r5, r4
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	f040 8116 	bne.w	8006808 <_dtoa_r+0x6e0>
 80065dc:	f7f9 fe02 	bl	80001e4 <__adddf3>
 80065e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065e4:	4604      	mov	r4, r0
 80065e6:	460d      	mov	r5, r1
 80065e8:	f7fa fa42 	bl	8000a70 <__aeabi_dcmpgt>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f040 80f8 	bne.w	80067e2 <_dtoa_r+0x6ba>
 80065f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa fa11 	bl	8000a20 <__aeabi_dcmpeq>
 80065fe:	b118      	cbz	r0, 8006608 <_dtoa_r+0x4e0>
 8006600:	f018 0f01 	tst.w	r8, #1
 8006604:	f040 80ed 	bne.w	80067e2 <_dtoa_r+0x6ba>
 8006608:	4649      	mov	r1, r9
 800660a:	4658      	mov	r0, fp
 800660c:	f000 fc92 	bl	8006f34 <_Bfree>
 8006610:	2300      	movs	r3, #0
 8006612:	7033      	strb	r3, [r6, #0]
 8006614:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006616:	3701      	adds	r7, #1
 8006618:	601f      	str	r7, [r3, #0]
 800661a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8320 	beq.w	8006c62 <_dtoa_r+0xb3a>
 8006622:	601e      	str	r6, [r3, #0]
 8006624:	e31d      	b.n	8006c62 <_dtoa_r+0xb3a>
 8006626:	07e2      	lsls	r2, r4, #31
 8006628:	d505      	bpl.n	8006636 <_dtoa_r+0x50e>
 800662a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800662e:	f7f9 ff8f 	bl	8000550 <__aeabi_dmul>
 8006632:	2301      	movs	r3, #1
 8006634:	3601      	adds	r6, #1
 8006636:	1064      	asrs	r4, r4, #1
 8006638:	3508      	adds	r5, #8
 800663a:	e73f      	b.n	80064bc <_dtoa_r+0x394>
 800663c:	2602      	movs	r6, #2
 800663e:	e742      	b.n	80064c6 <_dtoa_r+0x39e>
 8006640:	9c07      	ldr	r4, [sp, #28]
 8006642:	9704      	str	r7, [sp, #16]
 8006644:	e761      	b.n	800650a <_dtoa_r+0x3e2>
 8006646:	bf00      	nop
 8006648:	08008188 	.word	0x08008188
 800664c:	08008160 	.word	0x08008160
 8006650:	3ff00000 	.word	0x3ff00000
 8006654:	40240000 	.word	0x40240000
 8006658:	401c0000 	.word	0x401c0000
 800665c:	40140000 	.word	0x40140000
 8006660:	4b70      	ldr	r3, [pc, #448]	@ (8006824 <_dtoa_r+0x6fc>)
 8006662:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006664:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006668:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800666c:	4454      	add	r4, sl
 800666e:	2900      	cmp	r1, #0
 8006670:	d045      	beq.n	80066fe <_dtoa_r+0x5d6>
 8006672:	2000      	movs	r0, #0
 8006674:	496c      	ldr	r1, [pc, #432]	@ (8006828 <_dtoa_r+0x700>)
 8006676:	f7fa f895 	bl	80007a4 <__aeabi_ddiv>
 800667a:	4633      	mov	r3, r6
 800667c:	462a      	mov	r2, r5
 800667e:	f7f9 fdaf 	bl	80001e0 <__aeabi_dsub>
 8006682:	4656      	mov	r6, sl
 8006684:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800668c:	f7fa fa10 	bl	8000ab0 <__aeabi_d2iz>
 8006690:	4605      	mov	r5, r0
 8006692:	f7f9 fef3 	bl	800047c <__aeabi_i2d>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800669e:	f7f9 fd9f 	bl	80001e0 <__aeabi_dsub>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	3530      	adds	r5, #48	@ 0x30
 80066a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066b0:	f806 5b01 	strb.w	r5, [r6], #1
 80066b4:	f7fa f9be 	bl	8000a34 <__aeabi_dcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d163      	bne.n	8006784 <_dtoa_r+0x65c>
 80066bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066c0:	2000      	movs	r0, #0
 80066c2:	495a      	ldr	r1, [pc, #360]	@ (800682c <_dtoa_r+0x704>)
 80066c4:	f7f9 fd8c 	bl	80001e0 <__aeabi_dsub>
 80066c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066cc:	f7fa f9b2 	bl	8000a34 <__aeabi_dcmplt>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f040 8087 	bne.w	80067e4 <_dtoa_r+0x6bc>
 80066d6:	42a6      	cmp	r6, r4
 80066d8:	f43f af43 	beq.w	8006562 <_dtoa_r+0x43a>
 80066dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066e0:	2200      	movs	r2, #0
 80066e2:	4b53      	ldr	r3, [pc, #332]	@ (8006830 <_dtoa_r+0x708>)
 80066e4:	f7f9 ff34 	bl	8000550 <__aeabi_dmul>
 80066e8:	2200      	movs	r2, #0
 80066ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006830 <_dtoa_r+0x708>)
 80066f4:	f7f9 ff2c 	bl	8000550 <__aeabi_dmul>
 80066f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066fc:	e7c4      	b.n	8006688 <_dtoa_r+0x560>
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	f7f9 ff25 	bl	8000550 <__aeabi_dmul>
 8006706:	4656      	mov	r6, sl
 8006708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800670c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800670e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006712:	f7fa f9cd 	bl	8000ab0 <__aeabi_d2iz>
 8006716:	4605      	mov	r5, r0
 8006718:	f7f9 feb0 	bl	800047c <__aeabi_i2d>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006724:	f7f9 fd5c 	bl	80001e0 <__aeabi_dsub>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	3530      	adds	r5, #48	@ 0x30
 800672e:	f806 5b01 	strb.w	r5, [r6], #1
 8006732:	42a6      	cmp	r6, r4
 8006734:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	d124      	bne.n	8006788 <_dtoa_r+0x660>
 800673e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006742:	4b39      	ldr	r3, [pc, #228]	@ (8006828 <_dtoa_r+0x700>)
 8006744:	f7f9 fd4e 	bl	80001e4 <__adddf3>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006750:	f7fa f98e 	bl	8000a70 <__aeabi_dcmpgt>
 8006754:	2800      	cmp	r0, #0
 8006756:	d145      	bne.n	80067e4 <_dtoa_r+0x6bc>
 8006758:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800675c:	2000      	movs	r0, #0
 800675e:	4932      	ldr	r1, [pc, #200]	@ (8006828 <_dtoa_r+0x700>)
 8006760:	f7f9 fd3e 	bl	80001e0 <__aeabi_dsub>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800676c:	f7fa f962 	bl	8000a34 <__aeabi_dcmplt>
 8006770:	2800      	cmp	r0, #0
 8006772:	f43f aef6 	beq.w	8006562 <_dtoa_r+0x43a>
 8006776:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006778:	1e73      	subs	r3, r6, #1
 800677a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800677c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006780:	2b30      	cmp	r3, #48	@ 0x30
 8006782:	d0f8      	beq.n	8006776 <_dtoa_r+0x64e>
 8006784:	9f04      	ldr	r7, [sp, #16]
 8006786:	e73f      	b.n	8006608 <_dtoa_r+0x4e0>
 8006788:	4b29      	ldr	r3, [pc, #164]	@ (8006830 <_dtoa_r+0x708>)
 800678a:	f7f9 fee1 	bl	8000550 <__aeabi_dmul>
 800678e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006792:	e7bc      	b.n	800670e <_dtoa_r+0x5e6>
 8006794:	d10c      	bne.n	80067b0 <_dtoa_r+0x688>
 8006796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800679a:	2200      	movs	r2, #0
 800679c:	4b25      	ldr	r3, [pc, #148]	@ (8006834 <_dtoa_r+0x70c>)
 800679e:	f7f9 fed7 	bl	8000550 <__aeabi_dmul>
 80067a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a6:	f7fa f959 	bl	8000a5c <__aeabi_dcmpge>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f000 815b 	beq.w	8006a66 <_dtoa_r+0x93e>
 80067b0:	2400      	movs	r4, #0
 80067b2:	4625      	mov	r5, r4
 80067b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067b6:	4656      	mov	r6, sl
 80067b8:	43db      	mvns	r3, r3
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	2700      	movs	r7, #0
 80067be:	4621      	mov	r1, r4
 80067c0:	4658      	mov	r0, fp
 80067c2:	f000 fbb7 	bl	8006f34 <_Bfree>
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	d0dc      	beq.n	8006784 <_dtoa_r+0x65c>
 80067ca:	b12f      	cbz	r7, 80067d8 <_dtoa_r+0x6b0>
 80067cc:	42af      	cmp	r7, r5
 80067ce:	d003      	beq.n	80067d8 <_dtoa_r+0x6b0>
 80067d0:	4639      	mov	r1, r7
 80067d2:	4658      	mov	r0, fp
 80067d4:	f000 fbae 	bl	8006f34 <_Bfree>
 80067d8:	4629      	mov	r1, r5
 80067da:	4658      	mov	r0, fp
 80067dc:	f000 fbaa 	bl	8006f34 <_Bfree>
 80067e0:	e7d0      	b.n	8006784 <_dtoa_r+0x65c>
 80067e2:	9704      	str	r7, [sp, #16]
 80067e4:	4633      	mov	r3, r6
 80067e6:	461e      	mov	r6, r3
 80067e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067ec:	2a39      	cmp	r2, #57	@ 0x39
 80067ee:	d107      	bne.n	8006800 <_dtoa_r+0x6d8>
 80067f0:	459a      	cmp	sl, r3
 80067f2:	d1f8      	bne.n	80067e6 <_dtoa_r+0x6be>
 80067f4:	9a04      	ldr	r2, [sp, #16]
 80067f6:	3201      	adds	r2, #1
 80067f8:	9204      	str	r2, [sp, #16]
 80067fa:	2230      	movs	r2, #48	@ 0x30
 80067fc:	f88a 2000 	strb.w	r2, [sl]
 8006800:	781a      	ldrb	r2, [r3, #0]
 8006802:	3201      	adds	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e7bd      	b.n	8006784 <_dtoa_r+0x65c>
 8006808:	2200      	movs	r2, #0
 800680a:	4b09      	ldr	r3, [pc, #36]	@ (8006830 <_dtoa_r+0x708>)
 800680c:	f7f9 fea0 	bl	8000550 <__aeabi_dmul>
 8006810:	2200      	movs	r2, #0
 8006812:	2300      	movs	r3, #0
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
 8006818:	f7fa f902 	bl	8000a20 <__aeabi_dcmpeq>
 800681c:	2800      	cmp	r0, #0
 800681e:	f43f aebc 	beq.w	800659a <_dtoa_r+0x472>
 8006822:	e6f1      	b.n	8006608 <_dtoa_r+0x4e0>
 8006824:	08008188 	.word	0x08008188
 8006828:	3fe00000 	.word	0x3fe00000
 800682c:	3ff00000 	.word	0x3ff00000
 8006830:	40240000 	.word	0x40240000
 8006834:	40140000 	.word	0x40140000
 8006838:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800683a:	2a00      	cmp	r2, #0
 800683c:	f000 80db 	beq.w	80069f6 <_dtoa_r+0x8ce>
 8006840:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006842:	2a01      	cmp	r2, #1
 8006844:	f300 80bf 	bgt.w	80069c6 <_dtoa_r+0x89e>
 8006848:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800684a:	2a00      	cmp	r2, #0
 800684c:	f000 80b7 	beq.w	80069be <_dtoa_r+0x896>
 8006850:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006854:	4646      	mov	r6, r8
 8006856:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800685a:	2101      	movs	r1, #1
 800685c:	441a      	add	r2, r3
 800685e:	4658      	mov	r0, fp
 8006860:	4498      	add	r8, r3
 8006862:	9209      	str	r2, [sp, #36]	@ 0x24
 8006864:	f000 fc1a 	bl	800709c <__i2b>
 8006868:	4605      	mov	r5, r0
 800686a:	b15e      	cbz	r6, 8006884 <_dtoa_r+0x75c>
 800686c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800686e:	2b00      	cmp	r3, #0
 8006870:	dd08      	ble.n	8006884 <_dtoa_r+0x75c>
 8006872:	42b3      	cmp	r3, r6
 8006874:	bfa8      	it	ge
 8006876:	4633      	movge	r3, r6
 8006878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800687a:	eba8 0803 	sub.w	r8, r8, r3
 800687e:	1af6      	subs	r6, r6, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	9309      	str	r3, [sp, #36]	@ 0x24
 8006884:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006886:	b1f3      	cbz	r3, 80068c6 <_dtoa_r+0x79e>
 8006888:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80b7 	beq.w	80069fe <_dtoa_r+0x8d6>
 8006890:	b18c      	cbz	r4, 80068b6 <_dtoa_r+0x78e>
 8006892:	4629      	mov	r1, r5
 8006894:	4622      	mov	r2, r4
 8006896:	4658      	mov	r0, fp
 8006898:	f000 fcbe 	bl	8007218 <__pow5mult>
 800689c:	464a      	mov	r2, r9
 800689e:	4601      	mov	r1, r0
 80068a0:	4605      	mov	r5, r0
 80068a2:	4658      	mov	r0, fp
 80068a4:	f000 fc10 	bl	80070c8 <__multiply>
 80068a8:	4649      	mov	r1, r9
 80068aa:	9004      	str	r0, [sp, #16]
 80068ac:	4658      	mov	r0, fp
 80068ae:	f000 fb41 	bl	8006f34 <_Bfree>
 80068b2:	9b04      	ldr	r3, [sp, #16]
 80068b4:	4699      	mov	r9, r3
 80068b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068b8:	1b1a      	subs	r2, r3, r4
 80068ba:	d004      	beq.n	80068c6 <_dtoa_r+0x79e>
 80068bc:	4649      	mov	r1, r9
 80068be:	4658      	mov	r0, fp
 80068c0:	f000 fcaa 	bl	8007218 <__pow5mult>
 80068c4:	4681      	mov	r9, r0
 80068c6:	2101      	movs	r1, #1
 80068c8:	4658      	mov	r0, fp
 80068ca:	f000 fbe7 	bl	800709c <__i2b>
 80068ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068d0:	4604      	mov	r4, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f000 81c9 	beq.w	8006c6a <_dtoa_r+0xb42>
 80068d8:	461a      	mov	r2, r3
 80068da:	4601      	mov	r1, r0
 80068dc:	4658      	mov	r0, fp
 80068de:	f000 fc9b 	bl	8007218 <__pow5mult>
 80068e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068e4:	4604      	mov	r4, r0
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	f300 808f 	bgt.w	8006a0a <_dtoa_r+0x8e2>
 80068ec:	9b02      	ldr	r3, [sp, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 8087 	bne.w	8006a02 <_dtoa_r+0x8da>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f040 8083 	bne.w	8006a06 <_dtoa_r+0x8de>
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006906:	0d1b      	lsrs	r3, r3, #20
 8006908:	051b      	lsls	r3, r3, #20
 800690a:	b12b      	cbz	r3, 8006918 <_dtoa_r+0x7f0>
 800690c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800690e:	f108 0801 	add.w	r8, r8, #1
 8006912:	3301      	adds	r3, #1
 8006914:	9309      	str	r3, [sp, #36]	@ 0x24
 8006916:	2301      	movs	r3, #1
 8006918:	930a      	str	r3, [sp, #40]	@ 0x28
 800691a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 81aa 	beq.w	8006c76 <_dtoa_r+0xb4e>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006928:	6918      	ldr	r0, [r3, #16]
 800692a:	f000 fb6b 	bl	8007004 <__hi0bits>
 800692e:	f1c0 0020 	rsb	r0, r0, #32
 8006932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006934:	4418      	add	r0, r3
 8006936:	f010 001f 	ands.w	r0, r0, #31
 800693a:	d071      	beq.n	8006a20 <_dtoa_r+0x8f8>
 800693c:	f1c0 0320 	rsb	r3, r0, #32
 8006940:	2b04      	cmp	r3, #4
 8006942:	dd65      	ble.n	8006a10 <_dtoa_r+0x8e8>
 8006944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006946:	f1c0 001c 	rsb	r0, r0, #28
 800694a:	4403      	add	r3, r0
 800694c:	4480      	add	r8, r0
 800694e:	4406      	add	r6, r0
 8006950:	9309      	str	r3, [sp, #36]	@ 0x24
 8006952:	f1b8 0f00 	cmp.w	r8, #0
 8006956:	dd05      	ble.n	8006964 <_dtoa_r+0x83c>
 8006958:	4649      	mov	r1, r9
 800695a:	4642      	mov	r2, r8
 800695c:	4658      	mov	r0, fp
 800695e:	f000 fcb5 	bl	80072cc <__lshift>
 8006962:	4681      	mov	r9, r0
 8006964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	dd05      	ble.n	8006976 <_dtoa_r+0x84e>
 800696a:	4621      	mov	r1, r4
 800696c:	461a      	mov	r2, r3
 800696e:	4658      	mov	r0, fp
 8006970:	f000 fcac 	bl	80072cc <__lshift>
 8006974:	4604      	mov	r4, r0
 8006976:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006978:	2b00      	cmp	r3, #0
 800697a:	d053      	beq.n	8006a24 <_dtoa_r+0x8fc>
 800697c:	4621      	mov	r1, r4
 800697e:	4648      	mov	r0, r9
 8006980:	f000 fd10 	bl	80073a4 <__mcmp>
 8006984:	2800      	cmp	r0, #0
 8006986:	da4d      	bge.n	8006a24 <_dtoa_r+0x8fc>
 8006988:	1e7b      	subs	r3, r7, #1
 800698a:	4649      	mov	r1, r9
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	220a      	movs	r2, #10
 8006990:	2300      	movs	r3, #0
 8006992:	4658      	mov	r0, fp
 8006994:	f000 faf0 	bl	8006f78 <__multadd>
 8006998:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800699a:	4681      	mov	r9, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 816c 	beq.w	8006c7a <_dtoa_r+0xb52>
 80069a2:	2300      	movs	r3, #0
 80069a4:	4629      	mov	r1, r5
 80069a6:	220a      	movs	r2, #10
 80069a8:	4658      	mov	r0, fp
 80069aa:	f000 fae5 	bl	8006f78 <__multadd>
 80069ae:	9b08      	ldr	r3, [sp, #32]
 80069b0:	4605      	mov	r5, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	dc61      	bgt.n	8006a7a <_dtoa_r+0x952>
 80069b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	dc3b      	bgt.n	8006a34 <_dtoa_r+0x90c>
 80069bc:	e05d      	b.n	8006a7a <_dtoa_r+0x952>
 80069be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069c0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80069c4:	e746      	b.n	8006854 <_dtoa_r+0x72c>
 80069c6:	9b07      	ldr	r3, [sp, #28]
 80069c8:	1e5c      	subs	r4, r3, #1
 80069ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	bfbf      	itttt	lt
 80069d0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80069d2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80069d4:	1ae3      	sublt	r3, r4, r3
 80069d6:	18d2      	addlt	r2, r2, r3
 80069d8:	bfa8      	it	ge
 80069da:	1b1c      	subge	r4, r3, r4
 80069dc:	9b07      	ldr	r3, [sp, #28]
 80069de:	bfbe      	ittt	lt
 80069e0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80069e2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80069e4:	2400      	movlt	r4, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bfb5      	itete	lt
 80069ea:	eba8 0603 	sublt.w	r6, r8, r3
 80069ee:	4646      	movge	r6, r8
 80069f0:	2300      	movlt	r3, #0
 80069f2:	9b07      	ldrge	r3, [sp, #28]
 80069f4:	e730      	b.n	8006858 <_dtoa_r+0x730>
 80069f6:	4646      	mov	r6, r8
 80069f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069fa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069fc:	e735      	b.n	800686a <_dtoa_r+0x742>
 80069fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a00:	e75c      	b.n	80068bc <_dtoa_r+0x794>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e788      	b.n	8006918 <_dtoa_r+0x7f0>
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	e786      	b.n	8006918 <_dtoa_r+0x7f0>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a0e:	e788      	b.n	8006922 <_dtoa_r+0x7fa>
 8006a10:	d09f      	beq.n	8006952 <_dtoa_r+0x82a>
 8006a12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a14:	331c      	adds	r3, #28
 8006a16:	441a      	add	r2, r3
 8006a18:	4498      	add	r8, r3
 8006a1a:	441e      	add	r6, r3
 8006a1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a1e:	e798      	b.n	8006952 <_dtoa_r+0x82a>
 8006a20:	4603      	mov	r3, r0
 8006a22:	e7f6      	b.n	8006a12 <_dtoa_r+0x8ea>
 8006a24:	9b07      	ldr	r3, [sp, #28]
 8006a26:	9704      	str	r7, [sp, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	dc20      	bgt.n	8006a6e <_dtoa_r+0x946>
 8006a2c:	9308      	str	r3, [sp, #32]
 8006a2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	dd1e      	ble.n	8006a72 <_dtoa_r+0x94a>
 8006a34:	9b08      	ldr	r3, [sp, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f47f aebc 	bne.w	80067b4 <_dtoa_r+0x68c>
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	2205      	movs	r2, #5
 8006a40:	4658      	mov	r0, fp
 8006a42:	f000 fa99 	bl	8006f78 <__multadd>
 8006a46:	4601      	mov	r1, r0
 8006a48:	4604      	mov	r4, r0
 8006a4a:	4648      	mov	r0, r9
 8006a4c:	f000 fcaa 	bl	80073a4 <__mcmp>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	f77f aeaf 	ble.w	80067b4 <_dtoa_r+0x68c>
 8006a56:	2331      	movs	r3, #49	@ 0x31
 8006a58:	4656      	mov	r6, sl
 8006a5a:	f806 3b01 	strb.w	r3, [r6], #1
 8006a5e:	9b04      	ldr	r3, [sp, #16]
 8006a60:	3301      	adds	r3, #1
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	e6aa      	b.n	80067bc <_dtoa_r+0x694>
 8006a66:	9c07      	ldr	r4, [sp, #28]
 8006a68:	9704      	str	r7, [sp, #16]
 8006a6a:	4625      	mov	r5, r4
 8006a6c:	e7f3      	b.n	8006a56 <_dtoa_r+0x92e>
 8006a6e:	9b07      	ldr	r3, [sp, #28]
 8006a70:	9308      	str	r3, [sp, #32]
 8006a72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8104 	beq.w	8006c82 <_dtoa_r+0xb5a>
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	dd05      	ble.n	8006a8a <_dtoa_r+0x962>
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4632      	mov	r2, r6
 8006a82:	4658      	mov	r0, fp
 8006a84:	f000 fc22 	bl	80072cc <__lshift>
 8006a88:	4605      	mov	r5, r0
 8006a8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05a      	beq.n	8006b46 <_dtoa_r+0xa1e>
 8006a90:	4658      	mov	r0, fp
 8006a92:	6869      	ldr	r1, [r5, #4]
 8006a94:	f000 fa0e 	bl	8006eb4 <_Balloc>
 8006a98:	4606      	mov	r6, r0
 8006a9a:	b928      	cbnz	r0, 8006aa8 <_dtoa_r+0x980>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006aa2:	4b83      	ldr	r3, [pc, #524]	@ (8006cb0 <_dtoa_r+0xb88>)
 8006aa4:	f7ff bb54 	b.w	8006150 <_dtoa_r+0x28>
 8006aa8:	692a      	ldr	r2, [r5, #16]
 8006aaa:	f105 010c 	add.w	r1, r5, #12
 8006aae:	3202      	adds	r2, #2
 8006ab0:	0092      	lsls	r2, r2, #2
 8006ab2:	300c      	adds	r0, #12
 8006ab4:	f000 fffa 	bl	8007aac <memcpy>
 8006ab8:	2201      	movs	r2, #1
 8006aba:	4631      	mov	r1, r6
 8006abc:	4658      	mov	r0, fp
 8006abe:	f000 fc05 	bl	80072cc <__lshift>
 8006ac2:	462f      	mov	r7, r5
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	f10a 0301 	add.w	r3, sl, #1
 8006aca:	9307      	str	r3, [sp, #28]
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	4453      	add	r3, sl
 8006ad0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ada:	9b07      	ldr	r3, [sp, #28]
 8006adc:	4621      	mov	r1, r4
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	4648      	mov	r0, r9
 8006ae2:	9302      	str	r3, [sp, #8]
 8006ae4:	f7ff fa95 	bl	8006012 <quorem>
 8006ae8:	4639      	mov	r1, r7
 8006aea:	9008      	str	r0, [sp, #32]
 8006aec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006af0:	4648      	mov	r0, r9
 8006af2:	f000 fc57 	bl	80073a4 <__mcmp>
 8006af6:	462a      	mov	r2, r5
 8006af8:	9009      	str	r0, [sp, #36]	@ 0x24
 8006afa:	4621      	mov	r1, r4
 8006afc:	4658      	mov	r0, fp
 8006afe:	f000 fc6d 	bl	80073dc <__mdiff>
 8006b02:	68c2      	ldr	r2, [r0, #12]
 8006b04:	4606      	mov	r6, r0
 8006b06:	bb02      	cbnz	r2, 8006b4a <_dtoa_r+0xa22>
 8006b08:	4601      	mov	r1, r0
 8006b0a:	4648      	mov	r0, r9
 8006b0c:	f000 fc4a 	bl	80073a4 <__mcmp>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4631      	mov	r1, r6
 8006b14:	4658      	mov	r0, fp
 8006b16:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b18:	f000 fa0c 	bl	8006f34 <_Bfree>
 8006b1c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b20:	9e07      	ldr	r6, [sp, #28]
 8006b22:	ea43 0102 	orr.w	r1, r3, r2
 8006b26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b28:	4319      	orrs	r1, r3
 8006b2a:	d110      	bne.n	8006b4e <_dtoa_r+0xa26>
 8006b2c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b30:	d029      	beq.n	8006b86 <_dtoa_r+0xa5e>
 8006b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	dd02      	ble.n	8006b3e <_dtoa_r+0xa16>
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b3e:	9b02      	ldr	r3, [sp, #8]
 8006b40:	f883 8000 	strb.w	r8, [r3]
 8006b44:	e63b      	b.n	80067be <_dtoa_r+0x696>
 8006b46:	4628      	mov	r0, r5
 8006b48:	e7bb      	b.n	8006ac2 <_dtoa_r+0x99a>
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	e7e1      	b.n	8006b12 <_dtoa_r+0x9ea>
 8006b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	db04      	blt.n	8006b5e <_dtoa_r+0xa36>
 8006b54:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006b56:	430b      	orrs	r3, r1
 8006b58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	d120      	bne.n	8006ba0 <_dtoa_r+0xa78>
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	dded      	ble.n	8006b3e <_dtoa_r+0xa16>
 8006b62:	4649      	mov	r1, r9
 8006b64:	2201      	movs	r2, #1
 8006b66:	4658      	mov	r0, fp
 8006b68:	f000 fbb0 	bl	80072cc <__lshift>
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4681      	mov	r9, r0
 8006b70:	f000 fc18 	bl	80073a4 <__mcmp>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	dc03      	bgt.n	8006b80 <_dtoa_r+0xa58>
 8006b78:	d1e1      	bne.n	8006b3e <_dtoa_r+0xa16>
 8006b7a:	f018 0f01 	tst.w	r8, #1
 8006b7e:	d0de      	beq.n	8006b3e <_dtoa_r+0xa16>
 8006b80:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b84:	d1d8      	bne.n	8006b38 <_dtoa_r+0xa10>
 8006b86:	2339      	movs	r3, #57	@ 0x39
 8006b88:	9a02      	ldr	r2, [sp, #8]
 8006b8a:	7013      	strb	r3, [r2, #0]
 8006b8c:	4633      	mov	r3, r6
 8006b8e:	461e      	mov	r6, r3
 8006b90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	2a39      	cmp	r2, #57	@ 0x39
 8006b98:	d052      	beq.n	8006c40 <_dtoa_r+0xb18>
 8006b9a:	3201      	adds	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e60e      	b.n	80067be <_dtoa_r+0x696>
 8006ba0:	2a00      	cmp	r2, #0
 8006ba2:	dd07      	ble.n	8006bb4 <_dtoa_r+0xa8c>
 8006ba4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ba8:	d0ed      	beq.n	8006b86 <_dtoa_r+0xa5e>
 8006baa:	9a02      	ldr	r2, [sp, #8]
 8006bac:	f108 0301 	add.w	r3, r8, #1
 8006bb0:	7013      	strb	r3, [r2, #0]
 8006bb2:	e604      	b.n	80067be <_dtoa_r+0x696>
 8006bb4:	9b07      	ldr	r3, [sp, #28]
 8006bb6:	9a07      	ldr	r2, [sp, #28]
 8006bb8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006bbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d028      	beq.n	8006c14 <_dtoa_r+0xaec>
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	220a      	movs	r2, #10
 8006bc8:	4658      	mov	r0, fp
 8006bca:	f000 f9d5 	bl	8006f78 <__multadd>
 8006bce:	42af      	cmp	r7, r5
 8006bd0:	4681      	mov	r9, r0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	f04f 020a 	mov.w	r2, #10
 8006bda:	4639      	mov	r1, r7
 8006bdc:	4658      	mov	r0, fp
 8006bde:	d107      	bne.n	8006bf0 <_dtoa_r+0xac8>
 8006be0:	f000 f9ca 	bl	8006f78 <__multadd>
 8006be4:	4607      	mov	r7, r0
 8006be6:	4605      	mov	r5, r0
 8006be8:	9b07      	ldr	r3, [sp, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	9307      	str	r3, [sp, #28]
 8006bee:	e774      	b.n	8006ada <_dtoa_r+0x9b2>
 8006bf0:	f000 f9c2 	bl	8006f78 <__multadd>
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	220a      	movs	r2, #10
 8006bfc:	4658      	mov	r0, fp
 8006bfe:	f000 f9bb 	bl	8006f78 <__multadd>
 8006c02:	4605      	mov	r5, r0
 8006c04:	e7f0      	b.n	8006be8 <_dtoa_r+0xac0>
 8006c06:	9b08      	ldr	r3, [sp, #32]
 8006c08:	2700      	movs	r7, #0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bfcc      	ite	gt
 8006c0e:	461e      	movgt	r6, r3
 8006c10:	2601      	movle	r6, #1
 8006c12:	4456      	add	r6, sl
 8006c14:	4649      	mov	r1, r9
 8006c16:	2201      	movs	r2, #1
 8006c18:	4658      	mov	r0, fp
 8006c1a:	f000 fb57 	bl	80072cc <__lshift>
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4681      	mov	r9, r0
 8006c22:	f000 fbbf 	bl	80073a4 <__mcmp>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	dcb0      	bgt.n	8006b8c <_dtoa_r+0xa64>
 8006c2a:	d102      	bne.n	8006c32 <_dtoa_r+0xb0a>
 8006c2c:	f018 0f01 	tst.w	r8, #1
 8006c30:	d1ac      	bne.n	8006b8c <_dtoa_r+0xa64>
 8006c32:	4633      	mov	r3, r6
 8006c34:	461e      	mov	r6, r3
 8006c36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c3a:	2a30      	cmp	r2, #48	@ 0x30
 8006c3c:	d0fa      	beq.n	8006c34 <_dtoa_r+0xb0c>
 8006c3e:	e5be      	b.n	80067be <_dtoa_r+0x696>
 8006c40:	459a      	cmp	sl, r3
 8006c42:	d1a4      	bne.n	8006b8e <_dtoa_r+0xa66>
 8006c44:	9b04      	ldr	r3, [sp, #16]
 8006c46:	3301      	adds	r3, #1
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	2331      	movs	r3, #49	@ 0x31
 8006c4c:	f88a 3000 	strb.w	r3, [sl]
 8006c50:	e5b5      	b.n	80067be <_dtoa_r+0x696>
 8006c52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c54:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006cb4 <_dtoa_r+0xb8c>
 8006c58:	b11b      	cbz	r3, 8006c62 <_dtoa_r+0xb3a>
 8006c5a:	f10a 0308 	add.w	r3, sl, #8
 8006c5e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c60:	6013      	str	r3, [r2, #0]
 8006c62:	4650      	mov	r0, sl
 8006c64:	b017      	add	sp, #92	@ 0x5c
 8006c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	f77f ae3d 	ble.w	80068ec <_dtoa_r+0x7c4>
 8006c72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c74:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c76:	2001      	movs	r0, #1
 8006c78:	e65b      	b.n	8006932 <_dtoa_r+0x80a>
 8006c7a:	9b08      	ldr	r3, [sp, #32]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f77f aed6 	ble.w	8006a2e <_dtoa_r+0x906>
 8006c82:	4656      	mov	r6, sl
 8006c84:	4621      	mov	r1, r4
 8006c86:	4648      	mov	r0, r9
 8006c88:	f7ff f9c3 	bl	8006012 <quorem>
 8006c8c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c90:	9b08      	ldr	r3, [sp, #32]
 8006c92:	f806 8b01 	strb.w	r8, [r6], #1
 8006c96:	eba6 020a 	sub.w	r2, r6, sl
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	ddb3      	ble.n	8006c06 <_dtoa_r+0xade>
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	4658      	mov	r0, fp
 8006ca6:	f000 f967 	bl	8006f78 <__multadd>
 8006caa:	4681      	mov	r9, r0
 8006cac:	e7ea      	b.n	8006c84 <_dtoa_r+0xb5c>
 8006cae:	bf00      	nop
 8006cb0:	080080e8 	.word	0x080080e8
 8006cb4:	0800806c 	.word	0x0800806c

08006cb8 <_free_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4605      	mov	r5, r0
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d040      	beq.n	8006d42 <_free_r+0x8a>
 8006cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc4:	1f0c      	subs	r4, r1, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfb8      	it	lt
 8006cca:	18e4      	addlt	r4, r4, r3
 8006ccc:	f000 f8e6 	bl	8006e9c <__malloc_lock>
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d44 <_free_r+0x8c>)
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	b933      	cbnz	r3, 8006ce4 <_free_r+0x2c>
 8006cd6:	6063      	str	r3, [r4, #4]
 8006cd8:	6014      	str	r4, [r2, #0]
 8006cda:	4628      	mov	r0, r5
 8006cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ce0:	f000 b8e2 	b.w	8006ea8 <__malloc_unlock>
 8006ce4:	42a3      	cmp	r3, r4
 8006ce6:	d908      	bls.n	8006cfa <_free_r+0x42>
 8006ce8:	6820      	ldr	r0, [r4, #0]
 8006cea:	1821      	adds	r1, r4, r0
 8006cec:	428b      	cmp	r3, r1
 8006cee:	bf01      	itttt	eq
 8006cf0:	6819      	ldreq	r1, [r3, #0]
 8006cf2:	685b      	ldreq	r3, [r3, #4]
 8006cf4:	1809      	addeq	r1, r1, r0
 8006cf6:	6021      	streq	r1, [r4, #0]
 8006cf8:	e7ed      	b.n	8006cd6 <_free_r+0x1e>
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	b10b      	cbz	r3, 8006d04 <_free_r+0x4c>
 8006d00:	42a3      	cmp	r3, r4
 8006d02:	d9fa      	bls.n	8006cfa <_free_r+0x42>
 8006d04:	6811      	ldr	r1, [r2, #0]
 8006d06:	1850      	adds	r0, r2, r1
 8006d08:	42a0      	cmp	r0, r4
 8006d0a:	d10b      	bne.n	8006d24 <_free_r+0x6c>
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	4401      	add	r1, r0
 8006d10:	1850      	adds	r0, r2, r1
 8006d12:	4283      	cmp	r3, r0
 8006d14:	6011      	str	r1, [r2, #0]
 8006d16:	d1e0      	bne.n	8006cda <_free_r+0x22>
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4408      	add	r0, r1
 8006d1e:	6010      	str	r0, [r2, #0]
 8006d20:	6053      	str	r3, [r2, #4]
 8006d22:	e7da      	b.n	8006cda <_free_r+0x22>
 8006d24:	d902      	bls.n	8006d2c <_free_r+0x74>
 8006d26:	230c      	movs	r3, #12
 8006d28:	602b      	str	r3, [r5, #0]
 8006d2a:	e7d6      	b.n	8006cda <_free_r+0x22>
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	1821      	adds	r1, r4, r0
 8006d30:	428b      	cmp	r3, r1
 8006d32:	bf01      	itttt	eq
 8006d34:	6819      	ldreq	r1, [r3, #0]
 8006d36:	685b      	ldreq	r3, [r3, #4]
 8006d38:	1809      	addeq	r1, r1, r0
 8006d3a:	6021      	streq	r1, [r4, #0]
 8006d3c:	6063      	str	r3, [r4, #4]
 8006d3e:	6054      	str	r4, [r2, #4]
 8006d40:	e7cb      	b.n	8006cda <_free_r+0x22>
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	2000059c 	.word	0x2000059c

08006d48 <malloc>:
 8006d48:	4b02      	ldr	r3, [pc, #8]	@ (8006d54 <malloc+0xc>)
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	6818      	ldr	r0, [r3, #0]
 8006d4e:	f000 b825 	b.w	8006d9c <_malloc_r>
 8006d52:	bf00      	nop
 8006d54:	20000018 	.word	0x20000018

08006d58 <sbrk_aligned>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	4e0f      	ldr	r6, [pc, #60]	@ (8006d98 <sbrk_aligned+0x40>)
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	6831      	ldr	r1, [r6, #0]
 8006d60:	4605      	mov	r5, r0
 8006d62:	b911      	cbnz	r1, 8006d6a <sbrk_aligned+0x12>
 8006d64:	f000 fe92 	bl	8007a8c <_sbrk_r>
 8006d68:	6030      	str	r0, [r6, #0]
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 fe8d 	bl	8007a8c <_sbrk_r>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d103      	bne.n	8006d7e <sbrk_aligned+0x26>
 8006d76:	f04f 34ff 	mov.w	r4, #4294967295
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	bd70      	pop	{r4, r5, r6, pc}
 8006d7e:	1cc4      	adds	r4, r0, #3
 8006d80:	f024 0403 	bic.w	r4, r4, #3
 8006d84:	42a0      	cmp	r0, r4
 8006d86:	d0f8      	beq.n	8006d7a <sbrk_aligned+0x22>
 8006d88:	1a21      	subs	r1, r4, r0
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 fe7e 	bl	8007a8c <_sbrk_r>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d1f2      	bne.n	8006d7a <sbrk_aligned+0x22>
 8006d94:	e7ef      	b.n	8006d76 <sbrk_aligned+0x1e>
 8006d96:	bf00      	nop
 8006d98:	20000598 	.word	0x20000598

08006d9c <_malloc_r>:
 8006d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da0:	1ccd      	adds	r5, r1, #3
 8006da2:	f025 0503 	bic.w	r5, r5, #3
 8006da6:	3508      	adds	r5, #8
 8006da8:	2d0c      	cmp	r5, #12
 8006daa:	bf38      	it	cc
 8006dac:	250c      	movcc	r5, #12
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	4606      	mov	r6, r0
 8006db2:	db01      	blt.n	8006db8 <_malloc_r+0x1c>
 8006db4:	42a9      	cmp	r1, r5
 8006db6:	d904      	bls.n	8006dc2 <_malloc_r+0x26>
 8006db8:	230c      	movs	r3, #12
 8006dba:	6033      	str	r3, [r6, #0]
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e98 <_malloc_r+0xfc>
 8006dc6:	f000 f869 	bl	8006e9c <__malloc_lock>
 8006dca:	f8d8 3000 	ldr.w	r3, [r8]
 8006dce:	461c      	mov	r4, r3
 8006dd0:	bb44      	cbnz	r4, 8006e24 <_malloc_r+0x88>
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff ffbf 	bl	8006d58 <sbrk_aligned>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	4604      	mov	r4, r0
 8006dde:	d158      	bne.n	8006e92 <_malloc_r+0xf6>
 8006de0:	f8d8 4000 	ldr.w	r4, [r8]
 8006de4:	4627      	mov	r7, r4
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	d143      	bne.n	8006e72 <_malloc_r+0xd6>
 8006dea:	2c00      	cmp	r4, #0
 8006dec:	d04b      	beq.n	8006e86 <_malloc_r+0xea>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	4639      	mov	r1, r7
 8006df2:	4630      	mov	r0, r6
 8006df4:	eb04 0903 	add.w	r9, r4, r3
 8006df8:	f000 fe48 	bl	8007a8c <_sbrk_r>
 8006dfc:	4581      	cmp	r9, r0
 8006dfe:	d142      	bne.n	8006e86 <_malloc_r+0xea>
 8006e00:	6821      	ldr	r1, [r4, #0]
 8006e02:	4630      	mov	r0, r6
 8006e04:	1a6d      	subs	r5, r5, r1
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7ff ffa6 	bl	8006d58 <sbrk_aligned>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d03a      	beq.n	8006e86 <_malloc_r+0xea>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	442b      	add	r3, r5
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	f8d8 3000 	ldr.w	r3, [r8]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	bb62      	cbnz	r2, 8006e78 <_malloc_r+0xdc>
 8006e1e:	f8c8 7000 	str.w	r7, [r8]
 8006e22:	e00f      	b.n	8006e44 <_malloc_r+0xa8>
 8006e24:	6822      	ldr	r2, [r4, #0]
 8006e26:	1b52      	subs	r2, r2, r5
 8006e28:	d420      	bmi.n	8006e6c <_malloc_r+0xd0>
 8006e2a:	2a0b      	cmp	r2, #11
 8006e2c:	d917      	bls.n	8006e5e <_malloc_r+0xc2>
 8006e2e:	1961      	adds	r1, r4, r5
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	6025      	str	r5, [r4, #0]
 8006e34:	bf18      	it	ne
 8006e36:	6059      	strne	r1, [r3, #4]
 8006e38:	6863      	ldr	r3, [r4, #4]
 8006e3a:	bf08      	it	eq
 8006e3c:	f8c8 1000 	streq.w	r1, [r8]
 8006e40:	5162      	str	r2, [r4, r5]
 8006e42:	604b      	str	r3, [r1, #4]
 8006e44:	4630      	mov	r0, r6
 8006e46:	f000 f82f 	bl	8006ea8 <__malloc_unlock>
 8006e4a:	f104 000b 	add.w	r0, r4, #11
 8006e4e:	1d23      	adds	r3, r4, #4
 8006e50:	f020 0007 	bic.w	r0, r0, #7
 8006e54:	1ac2      	subs	r2, r0, r3
 8006e56:	bf1c      	itt	ne
 8006e58:	1a1b      	subne	r3, r3, r0
 8006e5a:	50a3      	strne	r3, [r4, r2]
 8006e5c:	e7af      	b.n	8006dbe <_malloc_r+0x22>
 8006e5e:	6862      	ldr	r2, [r4, #4]
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	bf0c      	ite	eq
 8006e64:	f8c8 2000 	streq.w	r2, [r8]
 8006e68:	605a      	strne	r2, [r3, #4]
 8006e6a:	e7eb      	b.n	8006e44 <_malloc_r+0xa8>
 8006e6c:	4623      	mov	r3, r4
 8006e6e:	6864      	ldr	r4, [r4, #4]
 8006e70:	e7ae      	b.n	8006dd0 <_malloc_r+0x34>
 8006e72:	463c      	mov	r4, r7
 8006e74:	687f      	ldr	r7, [r7, #4]
 8006e76:	e7b6      	b.n	8006de6 <_malloc_r+0x4a>
 8006e78:	461a      	mov	r2, r3
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d1fb      	bne.n	8006e78 <_malloc_r+0xdc>
 8006e80:	2300      	movs	r3, #0
 8006e82:	6053      	str	r3, [r2, #4]
 8006e84:	e7de      	b.n	8006e44 <_malloc_r+0xa8>
 8006e86:	230c      	movs	r3, #12
 8006e88:	4630      	mov	r0, r6
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	f000 f80c 	bl	8006ea8 <__malloc_unlock>
 8006e90:	e794      	b.n	8006dbc <_malloc_r+0x20>
 8006e92:	6005      	str	r5, [r0, #0]
 8006e94:	e7d6      	b.n	8006e44 <_malloc_r+0xa8>
 8006e96:	bf00      	nop
 8006e98:	2000059c 	.word	0x2000059c

08006e9c <__malloc_lock>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	@ (8006ea4 <__malloc_lock+0x8>)
 8006e9e:	f7ff b8a8 	b.w	8005ff2 <__retarget_lock_acquire_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	20000594 	.word	0x20000594

08006ea8 <__malloc_unlock>:
 8006ea8:	4801      	ldr	r0, [pc, #4]	@ (8006eb0 <__malloc_unlock+0x8>)
 8006eaa:	f7ff b8a3 	b.w	8005ff4 <__retarget_lock_release_recursive>
 8006eae:	bf00      	nop
 8006eb0:	20000594 	.word	0x20000594

08006eb4 <_Balloc>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	69c6      	ldr	r6, [r0, #28]
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	b976      	cbnz	r6, 8006edc <_Balloc+0x28>
 8006ebe:	2010      	movs	r0, #16
 8006ec0:	f7ff ff42 	bl	8006d48 <malloc>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	61e0      	str	r0, [r4, #28]
 8006ec8:	b920      	cbnz	r0, 8006ed4 <_Balloc+0x20>
 8006eca:	216b      	movs	r1, #107	@ 0x6b
 8006ecc:	4b17      	ldr	r3, [pc, #92]	@ (8006f2c <_Balloc+0x78>)
 8006ece:	4818      	ldr	r0, [pc, #96]	@ (8006f30 <_Balloc+0x7c>)
 8006ed0:	f000 fdfa 	bl	8007ac8 <__assert_func>
 8006ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ed8:	6006      	str	r6, [r0, #0]
 8006eda:	60c6      	str	r6, [r0, #12]
 8006edc:	69e6      	ldr	r6, [r4, #28]
 8006ede:	68f3      	ldr	r3, [r6, #12]
 8006ee0:	b183      	cbz	r3, 8006f04 <_Balloc+0x50>
 8006ee2:	69e3      	ldr	r3, [r4, #28]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006eea:	b9b8      	cbnz	r0, 8006f1c <_Balloc+0x68>
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f605 	lsl.w	r6, r1, r5
 8006ef2:	1d72      	adds	r2, r6, #5
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	0092      	lsls	r2, r2, #2
 8006ef8:	f000 fe04 	bl	8007b04 <_calloc_r>
 8006efc:	b160      	cbz	r0, 8006f18 <_Balloc+0x64>
 8006efe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f02:	e00e      	b.n	8006f22 <_Balloc+0x6e>
 8006f04:	2221      	movs	r2, #33	@ 0x21
 8006f06:	2104      	movs	r1, #4
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 fdfb 	bl	8007b04 <_calloc_r>
 8006f0e:	69e3      	ldr	r3, [r4, #28]
 8006f10:	60f0      	str	r0, [r6, #12]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e4      	bne.n	8006ee2 <_Balloc+0x2e>
 8006f18:	2000      	movs	r0, #0
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	6802      	ldr	r2, [r0, #0]
 8006f1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f22:	2300      	movs	r3, #0
 8006f24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f28:	e7f7      	b.n	8006f1a <_Balloc+0x66>
 8006f2a:	bf00      	nop
 8006f2c:	08008079 	.word	0x08008079
 8006f30:	080080f9 	.word	0x080080f9

08006f34 <_Bfree>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	69c6      	ldr	r6, [r0, #28]
 8006f38:	4605      	mov	r5, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	b976      	cbnz	r6, 8006f5c <_Bfree+0x28>
 8006f3e:	2010      	movs	r0, #16
 8006f40:	f7ff ff02 	bl	8006d48 <malloc>
 8006f44:	4602      	mov	r2, r0
 8006f46:	61e8      	str	r0, [r5, #28]
 8006f48:	b920      	cbnz	r0, 8006f54 <_Bfree+0x20>
 8006f4a:	218f      	movs	r1, #143	@ 0x8f
 8006f4c:	4b08      	ldr	r3, [pc, #32]	@ (8006f70 <_Bfree+0x3c>)
 8006f4e:	4809      	ldr	r0, [pc, #36]	@ (8006f74 <_Bfree+0x40>)
 8006f50:	f000 fdba 	bl	8007ac8 <__assert_func>
 8006f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f58:	6006      	str	r6, [r0, #0]
 8006f5a:	60c6      	str	r6, [r0, #12]
 8006f5c:	b13c      	cbz	r4, 8006f6e <_Bfree+0x3a>
 8006f5e:	69eb      	ldr	r3, [r5, #28]
 8006f60:	6862      	ldr	r2, [r4, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f68:	6021      	str	r1, [r4, #0]
 8006f6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
 8006f70:	08008079 	.word	0x08008079
 8006f74:	080080f9 	.word	0x080080f9

08006f78 <__multadd>:
 8006f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	461e      	mov	r6, r3
 8006f82:	2000      	movs	r0, #0
 8006f84:	690d      	ldr	r5, [r1, #16]
 8006f86:	f101 0c14 	add.w	ip, r1, #20
 8006f8a:	f8dc 3000 	ldr.w	r3, [ip]
 8006f8e:	3001      	adds	r0, #1
 8006f90:	b299      	uxth	r1, r3
 8006f92:	fb02 6101 	mla	r1, r2, r1, r6
 8006f96:	0c1e      	lsrs	r6, r3, #16
 8006f98:	0c0b      	lsrs	r3, r1, #16
 8006f9a:	fb02 3306 	mla	r3, r2, r6, r3
 8006f9e:	b289      	uxth	r1, r1
 8006fa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fa4:	4285      	cmp	r5, r0
 8006fa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006faa:	f84c 1b04 	str.w	r1, [ip], #4
 8006fae:	dcec      	bgt.n	8006f8a <__multadd+0x12>
 8006fb0:	b30e      	cbz	r6, 8006ff6 <__multadd+0x7e>
 8006fb2:	68a3      	ldr	r3, [r4, #8]
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dc19      	bgt.n	8006fec <__multadd+0x74>
 8006fb8:	6861      	ldr	r1, [r4, #4]
 8006fba:	4638      	mov	r0, r7
 8006fbc:	3101      	adds	r1, #1
 8006fbe:	f7ff ff79 	bl	8006eb4 <_Balloc>
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	b928      	cbnz	r0, 8006fd2 <__multadd+0x5a>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	21ba      	movs	r1, #186	@ 0xba
 8006fca:	4b0c      	ldr	r3, [pc, #48]	@ (8006ffc <__multadd+0x84>)
 8006fcc:	480c      	ldr	r0, [pc, #48]	@ (8007000 <__multadd+0x88>)
 8006fce:	f000 fd7b 	bl	8007ac8 <__assert_func>
 8006fd2:	6922      	ldr	r2, [r4, #16]
 8006fd4:	f104 010c 	add.w	r1, r4, #12
 8006fd8:	3202      	adds	r2, #2
 8006fda:	0092      	lsls	r2, r2, #2
 8006fdc:	300c      	adds	r0, #12
 8006fde:	f000 fd65 	bl	8007aac <memcpy>
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7ff ffa5 	bl	8006f34 <_Bfree>
 8006fea:	4644      	mov	r4, r8
 8006fec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	615e      	str	r6, [r3, #20]
 8006ff4:	6125      	str	r5, [r4, #16]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ffc:	080080e8 	.word	0x080080e8
 8007000:	080080f9 	.word	0x080080f9

08007004 <__hi0bits>:
 8007004:	4603      	mov	r3, r0
 8007006:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800700a:	bf3a      	itte	cc
 800700c:	0403      	lslcc	r3, r0, #16
 800700e:	2010      	movcc	r0, #16
 8007010:	2000      	movcs	r0, #0
 8007012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007016:	bf3c      	itt	cc
 8007018:	021b      	lslcc	r3, r3, #8
 800701a:	3008      	addcc	r0, #8
 800701c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007020:	bf3c      	itt	cc
 8007022:	011b      	lslcc	r3, r3, #4
 8007024:	3004      	addcc	r0, #4
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702a:	bf3c      	itt	cc
 800702c:	009b      	lslcc	r3, r3, #2
 800702e:	3002      	addcc	r0, #2
 8007030:	2b00      	cmp	r3, #0
 8007032:	db05      	blt.n	8007040 <__hi0bits+0x3c>
 8007034:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007038:	f100 0001 	add.w	r0, r0, #1
 800703c:	bf08      	it	eq
 800703e:	2020      	moveq	r0, #32
 8007040:	4770      	bx	lr

08007042 <__lo0bits>:
 8007042:	6803      	ldr	r3, [r0, #0]
 8007044:	4602      	mov	r2, r0
 8007046:	f013 0007 	ands.w	r0, r3, #7
 800704a:	d00b      	beq.n	8007064 <__lo0bits+0x22>
 800704c:	07d9      	lsls	r1, r3, #31
 800704e:	d421      	bmi.n	8007094 <__lo0bits+0x52>
 8007050:	0798      	lsls	r0, r3, #30
 8007052:	bf49      	itett	mi
 8007054:	085b      	lsrmi	r3, r3, #1
 8007056:	089b      	lsrpl	r3, r3, #2
 8007058:	2001      	movmi	r0, #1
 800705a:	6013      	strmi	r3, [r2, #0]
 800705c:	bf5c      	itt	pl
 800705e:	2002      	movpl	r0, #2
 8007060:	6013      	strpl	r3, [r2, #0]
 8007062:	4770      	bx	lr
 8007064:	b299      	uxth	r1, r3
 8007066:	b909      	cbnz	r1, 800706c <__lo0bits+0x2a>
 8007068:	2010      	movs	r0, #16
 800706a:	0c1b      	lsrs	r3, r3, #16
 800706c:	b2d9      	uxtb	r1, r3
 800706e:	b909      	cbnz	r1, 8007074 <__lo0bits+0x32>
 8007070:	3008      	adds	r0, #8
 8007072:	0a1b      	lsrs	r3, r3, #8
 8007074:	0719      	lsls	r1, r3, #28
 8007076:	bf04      	itt	eq
 8007078:	091b      	lsreq	r3, r3, #4
 800707a:	3004      	addeq	r0, #4
 800707c:	0799      	lsls	r1, r3, #30
 800707e:	bf04      	itt	eq
 8007080:	089b      	lsreq	r3, r3, #2
 8007082:	3002      	addeq	r0, #2
 8007084:	07d9      	lsls	r1, r3, #31
 8007086:	d403      	bmi.n	8007090 <__lo0bits+0x4e>
 8007088:	085b      	lsrs	r3, r3, #1
 800708a:	f100 0001 	add.w	r0, r0, #1
 800708e:	d003      	beq.n	8007098 <__lo0bits+0x56>
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	4770      	bx	lr
 8007094:	2000      	movs	r0, #0
 8007096:	4770      	bx	lr
 8007098:	2020      	movs	r0, #32
 800709a:	4770      	bx	lr

0800709c <__i2b>:
 800709c:	b510      	push	{r4, lr}
 800709e:	460c      	mov	r4, r1
 80070a0:	2101      	movs	r1, #1
 80070a2:	f7ff ff07 	bl	8006eb4 <_Balloc>
 80070a6:	4602      	mov	r2, r0
 80070a8:	b928      	cbnz	r0, 80070b6 <__i2b+0x1a>
 80070aa:	f240 1145 	movw	r1, #325	@ 0x145
 80070ae:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <__i2b+0x24>)
 80070b0:	4804      	ldr	r0, [pc, #16]	@ (80070c4 <__i2b+0x28>)
 80070b2:	f000 fd09 	bl	8007ac8 <__assert_func>
 80070b6:	2301      	movs	r3, #1
 80070b8:	6144      	str	r4, [r0, #20]
 80070ba:	6103      	str	r3, [r0, #16]
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	bf00      	nop
 80070c0:	080080e8 	.word	0x080080e8
 80070c4:	080080f9 	.word	0x080080f9

080070c8 <__multiply>:
 80070c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	4614      	mov	r4, r2
 80070ce:	690a      	ldr	r2, [r1, #16]
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	460f      	mov	r7, r1
 80070d4:	429a      	cmp	r2, r3
 80070d6:	bfa2      	ittt	ge
 80070d8:	4623      	movge	r3, r4
 80070da:	460c      	movge	r4, r1
 80070dc:	461f      	movge	r7, r3
 80070de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80070e2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070e6:	68a3      	ldr	r3, [r4, #8]
 80070e8:	6861      	ldr	r1, [r4, #4]
 80070ea:	eb0a 0609 	add.w	r6, sl, r9
 80070ee:	42b3      	cmp	r3, r6
 80070f0:	b085      	sub	sp, #20
 80070f2:	bfb8      	it	lt
 80070f4:	3101      	addlt	r1, #1
 80070f6:	f7ff fedd 	bl	8006eb4 <_Balloc>
 80070fa:	b930      	cbnz	r0, 800710a <__multiply+0x42>
 80070fc:	4602      	mov	r2, r0
 80070fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007102:	4b43      	ldr	r3, [pc, #268]	@ (8007210 <__multiply+0x148>)
 8007104:	4843      	ldr	r0, [pc, #268]	@ (8007214 <__multiply+0x14c>)
 8007106:	f000 fcdf 	bl	8007ac8 <__assert_func>
 800710a:	f100 0514 	add.w	r5, r0, #20
 800710e:	462b      	mov	r3, r5
 8007110:	2200      	movs	r2, #0
 8007112:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007116:	4543      	cmp	r3, r8
 8007118:	d321      	bcc.n	800715e <__multiply+0x96>
 800711a:	f107 0114 	add.w	r1, r7, #20
 800711e:	f104 0214 	add.w	r2, r4, #20
 8007122:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007126:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	1b13      	subs	r3, r2, r4
 800712e:	3b15      	subs	r3, #21
 8007130:	f023 0303 	bic.w	r3, r3, #3
 8007134:	3304      	adds	r3, #4
 8007136:	f104 0715 	add.w	r7, r4, #21
 800713a:	42ba      	cmp	r2, r7
 800713c:	bf38      	it	cc
 800713e:	2304      	movcc	r3, #4
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	9b02      	ldr	r3, [sp, #8]
 8007144:	9103      	str	r1, [sp, #12]
 8007146:	428b      	cmp	r3, r1
 8007148:	d80c      	bhi.n	8007164 <__multiply+0x9c>
 800714a:	2e00      	cmp	r6, #0
 800714c:	dd03      	ble.n	8007156 <__multiply+0x8e>
 800714e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007152:	2b00      	cmp	r3, #0
 8007154:	d05a      	beq.n	800720c <__multiply+0x144>
 8007156:	6106      	str	r6, [r0, #16]
 8007158:	b005      	add	sp, #20
 800715a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715e:	f843 2b04 	str.w	r2, [r3], #4
 8007162:	e7d8      	b.n	8007116 <__multiply+0x4e>
 8007164:	f8b1 a000 	ldrh.w	sl, [r1]
 8007168:	f1ba 0f00 	cmp.w	sl, #0
 800716c:	d023      	beq.n	80071b6 <__multiply+0xee>
 800716e:	46a9      	mov	r9, r5
 8007170:	f04f 0c00 	mov.w	ip, #0
 8007174:	f104 0e14 	add.w	lr, r4, #20
 8007178:	f85e 7b04 	ldr.w	r7, [lr], #4
 800717c:	f8d9 3000 	ldr.w	r3, [r9]
 8007180:	fa1f fb87 	uxth.w	fp, r7
 8007184:	b29b      	uxth	r3, r3
 8007186:	fb0a 330b 	mla	r3, sl, fp, r3
 800718a:	4463      	add	r3, ip
 800718c:	f8d9 c000 	ldr.w	ip, [r9]
 8007190:	0c3f      	lsrs	r7, r7, #16
 8007192:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007196:	fb0a c707 	mla	r7, sl, r7, ip
 800719a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800719e:	b29b      	uxth	r3, r3
 80071a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071a4:	4572      	cmp	r2, lr
 80071a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80071aa:	f849 3b04 	str.w	r3, [r9], #4
 80071ae:	d8e3      	bhi.n	8007178 <__multiply+0xb0>
 80071b0:	9b01      	ldr	r3, [sp, #4]
 80071b2:	f845 c003 	str.w	ip, [r5, r3]
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	3104      	adds	r1, #4
 80071ba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071be:	f1b9 0f00 	cmp.w	r9, #0
 80071c2:	d021      	beq.n	8007208 <__multiply+0x140>
 80071c4:	46ae      	mov	lr, r5
 80071c6:	f04f 0a00 	mov.w	sl, #0
 80071ca:	682b      	ldr	r3, [r5, #0]
 80071cc:	f104 0c14 	add.w	ip, r4, #20
 80071d0:	f8bc b000 	ldrh.w	fp, [ip]
 80071d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	fb09 770b 	mla	r7, r9, fp, r7
 80071de:	4457      	add	r7, sl
 80071e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071e4:	f84e 3b04 	str.w	r3, [lr], #4
 80071e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f0:	f8be 3000 	ldrh.w	r3, [lr]
 80071f4:	4562      	cmp	r2, ip
 80071f6:	fb09 330a 	mla	r3, r9, sl, r3
 80071fa:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007202:	d8e5      	bhi.n	80071d0 <__multiply+0x108>
 8007204:	9f01      	ldr	r7, [sp, #4]
 8007206:	51eb      	str	r3, [r5, r7]
 8007208:	3504      	adds	r5, #4
 800720a:	e79a      	b.n	8007142 <__multiply+0x7a>
 800720c:	3e01      	subs	r6, #1
 800720e:	e79c      	b.n	800714a <__multiply+0x82>
 8007210:	080080e8 	.word	0x080080e8
 8007214:	080080f9 	.word	0x080080f9

08007218 <__pow5mult>:
 8007218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800721c:	4615      	mov	r5, r2
 800721e:	f012 0203 	ands.w	r2, r2, #3
 8007222:	4607      	mov	r7, r0
 8007224:	460e      	mov	r6, r1
 8007226:	d007      	beq.n	8007238 <__pow5mult+0x20>
 8007228:	4c25      	ldr	r4, [pc, #148]	@ (80072c0 <__pow5mult+0xa8>)
 800722a:	3a01      	subs	r2, #1
 800722c:	2300      	movs	r3, #0
 800722e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007232:	f7ff fea1 	bl	8006f78 <__multadd>
 8007236:	4606      	mov	r6, r0
 8007238:	10ad      	asrs	r5, r5, #2
 800723a:	d03d      	beq.n	80072b8 <__pow5mult+0xa0>
 800723c:	69fc      	ldr	r4, [r7, #28]
 800723e:	b97c      	cbnz	r4, 8007260 <__pow5mult+0x48>
 8007240:	2010      	movs	r0, #16
 8007242:	f7ff fd81 	bl	8006d48 <malloc>
 8007246:	4602      	mov	r2, r0
 8007248:	61f8      	str	r0, [r7, #28]
 800724a:	b928      	cbnz	r0, 8007258 <__pow5mult+0x40>
 800724c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007250:	4b1c      	ldr	r3, [pc, #112]	@ (80072c4 <__pow5mult+0xac>)
 8007252:	481d      	ldr	r0, [pc, #116]	@ (80072c8 <__pow5mult+0xb0>)
 8007254:	f000 fc38 	bl	8007ac8 <__assert_func>
 8007258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800725c:	6004      	str	r4, [r0, #0]
 800725e:	60c4      	str	r4, [r0, #12]
 8007260:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007268:	b94c      	cbnz	r4, 800727e <__pow5mult+0x66>
 800726a:	f240 2171 	movw	r1, #625	@ 0x271
 800726e:	4638      	mov	r0, r7
 8007270:	f7ff ff14 	bl	800709c <__i2b>
 8007274:	2300      	movs	r3, #0
 8007276:	4604      	mov	r4, r0
 8007278:	f8c8 0008 	str.w	r0, [r8, #8]
 800727c:	6003      	str	r3, [r0, #0]
 800727e:	f04f 0900 	mov.w	r9, #0
 8007282:	07eb      	lsls	r3, r5, #31
 8007284:	d50a      	bpl.n	800729c <__pow5mult+0x84>
 8007286:	4631      	mov	r1, r6
 8007288:	4622      	mov	r2, r4
 800728a:	4638      	mov	r0, r7
 800728c:	f7ff ff1c 	bl	80070c8 <__multiply>
 8007290:	4680      	mov	r8, r0
 8007292:	4631      	mov	r1, r6
 8007294:	4638      	mov	r0, r7
 8007296:	f7ff fe4d 	bl	8006f34 <_Bfree>
 800729a:	4646      	mov	r6, r8
 800729c:	106d      	asrs	r5, r5, #1
 800729e:	d00b      	beq.n	80072b8 <__pow5mult+0xa0>
 80072a0:	6820      	ldr	r0, [r4, #0]
 80072a2:	b938      	cbnz	r0, 80072b4 <__pow5mult+0x9c>
 80072a4:	4622      	mov	r2, r4
 80072a6:	4621      	mov	r1, r4
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ff0d 	bl	80070c8 <__multiply>
 80072ae:	6020      	str	r0, [r4, #0]
 80072b0:	f8c0 9000 	str.w	r9, [r0]
 80072b4:	4604      	mov	r4, r0
 80072b6:	e7e4      	b.n	8007282 <__pow5mult+0x6a>
 80072b8:	4630      	mov	r0, r6
 80072ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072be:	bf00      	nop
 80072c0:	08008154 	.word	0x08008154
 80072c4:	08008079 	.word	0x08008079
 80072c8:	080080f9 	.word	0x080080f9

080072cc <__lshift>:
 80072cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d0:	460c      	mov	r4, r1
 80072d2:	4607      	mov	r7, r0
 80072d4:	4691      	mov	r9, r2
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	6849      	ldr	r1, [r1, #4]
 80072da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072e4:	f108 0601 	add.w	r6, r8, #1
 80072e8:	42b3      	cmp	r3, r6
 80072ea:	db0b      	blt.n	8007304 <__lshift+0x38>
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff fde1 	bl	8006eb4 <_Balloc>
 80072f2:	4605      	mov	r5, r0
 80072f4:	b948      	cbnz	r0, 800730a <__lshift+0x3e>
 80072f6:	4602      	mov	r2, r0
 80072f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072fc:	4b27      	ldr	r3, [pc, #156]	@ (800739c <__lshift+0xd0>)
 80072fe:	4828      	ldr	r0, [pc, #160]	@ (80073a0 <__lshift+0xd4>)
 8007300:	f000 fbe2 	bl	8007ac8 <__assert_func>
 8007304:	3101      	adds	r1, #1
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	e7ee      	b.n	80072e8 <__lshift+0x1c>
 800730a:	2300      	movs	r3, #0
 800730c:	f100 0114 	add.w	r1, r0, #20
 8007310:	f100 0210 	add.w	r2, r0, #16
 8007314:	4618      	mov	r0, r3
 8007316:	4553      	cmp	r3, sl
 8007318:	db33      	blt.n	8007382 <__lshift+0xb6>
 800731a:	6920      	ldr	r0, [r4, #16]
 800731c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007320:	f104 0314 	add.w	r3, r4, #20
 8007324:	f019 091f 	ands.w	r9, r9, #31
 8007328:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800732c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007330:	d02b      	beq.n	800738a <__lshift+0xbe>
 8007332:	468a      	mov	sl, r1
 8007334:	2200      	movs	r2, #0
 8007336:	f1c9 0e20 	rsb	lr, r9, #32
 800733a:	6818      	ldr	r0, [r3, #0]
 800733c:	fa00 f009 	lsl.w	r0, r0, r9
 8007340:	4310      	orrs	r0, r2
 8007342:	f84a 0b04 	str.w	r0, [sl], #4
 8007346:	f853 2b04 	ldr.w	r2, [r3], #4
 800734a:	459c      	cmp	ip, r3
 800734c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007350:	d8f3      	bhi.n	800733a <__lshift+0x6e>
 8007352:	ebac 0304 	sub.w	r3, ip, r4
 8007356:	3b15      	subs	r3, #21
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	3304      	adds	r3, #4
 800735e:	f104 0015 	add.w	r0, r4, #21
 8007362:	4584      	cmp	ip, r0
 8007364:	bf38      	it	cc
 8007366:	2304      	movcc	r3, #4
 8007368:	50ca      	str	r2, [r1, r3]
 800736a:	b10a      	cbz	r2, 8007370 <__lshift+0xa4>
 800736c:	f108 0602 	add.w	r6, r8, #2
 8007370:	3e01      	subs	r6, #1
 8007372:	4638      	mov	r0, r7
 8007374:	4621      	mov	r1, r4
 8007376:	612e      	str	r6, [r5, #16]
 8007378:	f7ff fddc 	bl	8006f34 <_Bfree>
 800737c:	4628      	mov	r0, r5
 800737e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007382:	f842 0f04 	str.w	r0, [r2, #4]!
 8007386:	3301      	adds	r3, #1
 8007388:	e7c5      	b.n	8007316 <__lshift+0x4a>
 800738a:	3904      	subs	r1, #4
 800738c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007390:	459c      	cmp	ip, r3
 8007392:	f841 2f04 	str.w	r2, [r1, #4]!
 8007396:	d8f9      	bhi.n	800738c <__lshift+0xc0>
 8007398:	e7ea      	b.n	8007370 <__lshift+0xa4>
 800739a:	bf00      	nop
 800739c:	080080e8 	.word	0x080080e8
 80073a0:	080080f9 	.word	0x080080f9

080073a4 <__mcmp>:
 80073a4:	4603      	mov	r3, r0
 80073a6:	690a      	ldr	r2, [r1, #16]
 80073a8:	6900      	ldr	r0, [r0, #16]
 80073aa:	b530      	push	{r4, r5, lr}
 80073ac:	1a80      	subs	r0, r0, r2
 80073ae:	d10e      	bne.n	80073ce <__mcmp+0x2a>
 80073b0:	3314      	adds	r3, #20
 80073b2:	3114      	adds	r1, #20
 80073b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073c4:	4295      	cmp	r5, r2
 80073c6:	d003      	beq.n	80073d0 <__mcmp+0x2c>
 80073c8:	d205      	bcs.n	80073d6 <__mcmp+0x32>
 80073ca:	f04f 30ff 	mov.w	r0, #4294967295
 80073ce:	bd30      	pop	{r4, r5, pc}
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	d3f3      	bcc.n	80073bc <__mcmp+0x18>
 80073d4:	e7fb      	b.n	80073ce <__mcmp+0x2a>
 80073d6:	2001      	movs	r0, #1
 80073d8:	e7f9      	b.n	80073ce <__mcmp+0x2a>
	...

080073dc <__mdiff>:
 80073dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e0:	4689      	mov	r9, r1
 80073e2:	4606      	mov	r6, r0
 80073e4:	4611      	mov	r1, r2
 80073e6:	4648      	mov	r0, r9
 80073e8:	4614      	mov	r4, r2
 80073ea:	f7ff ffdb 	bl	80073a4 <__mcmp>
 80073ee:	1e05      	subs	r5, r0, #0
 80073f0:	d112      	bne.n	8007418 <__mdiff+0x3c>
 80073f2:	4629      	mov	r1, r5
 80073f4:	4630      	mov	r0, r6
 80073f6:	f7ff fd5d 	bl	8006eb4 <_Balloc>
 80073fa:	4602      	mov	r2, r0
 80073fc:	b928      	cbnz	r0, 800740a <__mdiff+0x2e>
 80073fe:	f240 2137 	movw	r1, #567	@ 0x237
 8007402:	4b3e      	ldr	r3, [pc, #248]	@ (80074fc <__mdiff+0x120>)
 8007404:	483e      	ldr	r0, [pc, #248]	@ (8007500 <__mdiff+0x124>)
 8007406:	f000 fb5f 	bl	8007ac8 <__assert_func>
 800740a:	2301      	movs	r3, #1
 800740c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007410:	4610      	mov	r0, r2
 8007412:	b003      	add	sp, #12
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007418:	bfbc      	itt	lt
 800741a:	464b      	movlt	r3, r9
 800741c:	46a1      	movlt	r9, r4
 800741e:	4630      	mov	r0, r6
 8007420:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007424:	bfba      	itte	lt
 8007426:	461c      	movlt	r4, r3
 8007428:	2501      	movlt	r5, #1
 800742a:	2500      	movge	r5, #0
 800742c:	f7ff fd42 	bl	8006eb4 <_Balloc>
 8007430:	4602      	mov	r2, r0
 8007432:	b918      	cbnz	r0, 800743c <__mdiff+0x60>
 8007434:	f240 2145 	movw	r1, #581	@ 0x245
 8007438:	4b30      	ldr	r3, [pc, #192]	@ (80074fc <__mdiff+0x120>)
 800743a:	e7e3      	b.n	8007404 <__mdiff+0x28>
 800743c:	f100 0b14 	add.w	fp, r0, #20
 8007440:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007444:	f109 0310 	add.w	r3, r9, #16
 8007448:	60c5      	str	r5, [r0, #12]
 800744a:	f04f 0c00 	mov.w	ip, #0
 800744e:	f109 0514 	add.w	r5, r9, #20
 8007452:	46d9      	mov	r9, fp
 8007454:	6926      	ldr	r6, [r4, #16]
 8007456:	f104 0e14 	add.w	lr, r4, #20
 800745a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800745e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007462:	9301      	str	r3, [sp, #4]
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	f85e 0b04 	ldr.w	r0, [lr], #4
 800746a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800746e:	b281      	uxth	r1, r0
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	fa1f f38a 	uxth.w	r3, sl
 8007476:	1a5b      	subs	r3, r3, r1
 8007478:	0c00      	lsrs	r0, r0, #16
 800747a:	4463      	add	r3, ip
 800747c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007480:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007484:	b29b      	uxth	r3, r3
 8007486:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800748a:	4576      	cmp	r6, lr
 800748c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007490:	f849 3b04 	str.w	r3, [r9], #4
 8007494:	d8e6      	bhi.n	8007464 <__mdiff+0x88>
 8007496:	1b33      	subs	r3, r6, r4
 8007498:	3b15      	subs	r3, #21
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	3415      	adds	r4, #21
 80074a0:	3304      	adds	r3, #4
 80074a2:	42a6      	cmp	r6, r4
 80074a4:	bf38      	it	cc
 80074a6:	2304      	movcc	r3, #4
 80074a8:	441d      	add	r5, r3
 80074aa:	445b      	add	r3, fp
 80074ac:	461e      	mov	r6, r3
 80074ae:	462c      	mov	r4, r5
 80074b0:	4544      	cmp	r4, r8
 80074b2:	d30e      	bcc.n	80074d2 <__mdiff+0xf6>
 80074b4:	f108 0103 	add.w	r1, r8, #3
 80074b8:	1b49      	subs	r1, r1, r5
 80074ba:	f021 0103 	bic.w	r1, r1, #3
 80074be:	3d03      	subs	r5, #3
 80074c0:	45a8      	cmp	r8, r5
 80074c2:	bf38      	it	cc
 80074c4:	2100      	movcc	r1, #0
 80074c6:	440b      	add	r3, r1
 80074c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074cc:	b199      	cbz	r1, 80074f6 <__mdiff+0x11a>
 80074ce:	6117      	str	r7, [r2, #16]
 80074d0:	e79e      	b.n	8007410 <__mdiff+0x34>
 80074d2:	46e6      	mov	lr, ip
 80074d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80074d8:	fa1f fc81 	uxth.w	ip, r1
 80074dc:	44f4      	add	ip, lr
 80074de:	0c08      	lsrs	r0, r1, #16
 80074e0:	4471      	add	r1, lr
 80074e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074e6:	b289      	uxth	r1, r1
 80074e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074f0:	f846 1b04 	str.w	r1, [r6], #4
 80074f4:	e7dc      	b.n	80074b0 <__mdiff+0xd4>
 80074f6:	3f01      	subs	r7, #1
 80074f8:	e7e6      	b.n	80074c8 <__mdiff+0xec>
 80074fa:	bf00      	nop
 80074fc:	080080e8 	.word	0x080080e8
 8007500:	080080f9 	.word	0x080080f9

08007504 <__d2b>:
 8007504:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007508:	2101      	movs	r1, #1
 800750a:	4690      	mov	r8, r2
 800750c:	4699      	mov	r9, r3
 800750e:	9e08      	ldr	r6, [sp, #32]
 8007510:	f7ff fcd0 	bl	8006eb4 <_Balloc>
 8007514:	4604      	mov	r4, r0
 8007516:	b930      	cbnz	r0, 8007526 <__d2b+0x22>
 8007518:	4602      	mov	r2, r0
 800751a:	f240 310f 	movw	r1, #783	@ 0x30f
 800751e:	4b23      	ldr	r3, [pc, #140]	@ (80075ac <__d2b+0xa8>)
 8007520:	4823      	ldr	r0, [pc, #140]	@ (80075b0 <__d2b+0xac>)
 8007522:	f000 fad1 	bl	8007ac8 <__assert_func>
 8007526:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800752a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800752e:	b10d      	cbz	r5, 8007534 <__d2b+0x30>
 8007530:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	f1b8 0300 	subs.w	r3, r8, #0
 800753a:	d024      	beq.n	8007586 <__d2b+0x82>
 800753c:	4668      	mov	r0, sp
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	f7ff fd7f 	bl	8007042 <__lo0bits>
 8007544:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007548:	b1d8      	cbz	r0, 8007582 <__d2b+0x7e>
 800754a:	f1c0 0320 	rsb	r3, r0, #32
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	430b      	orrs	r3, r1
 8007554:	40c2      	lsrs	r2, r0
 8007556:	6163      	str	r3, [r4, #20]
 8007558:	9201      	str	r2, [sp, #4]
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	bf0c      	ite	eq
 8007560:	2201      	moveq	r2, #1
 8007562:	2202      	movne	r2, #2
 8007564:	61a3      	str	r3, [r4, #24]
 8007566:	6122      	str	r2, [r4, #16]
 8007568:	b1ad      	cbz	r5, 8007596 <__d2b+0x92>
 800756a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800756e:	4405      	add	r5, r0
 8007570:	6035      	str	r5, [r6, #0]
 8007572:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007578:	6018      	str	r0, [r3, #0]
 800757a:	4620      	mov	r0, r4
 800757c:	b002      	add	sp, #8
 800757e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007582:	6161      	str	r1, [r4, #20]
 8007584:	e7e9      	b.n	800755a <__d2b+0x56>
 8007586:	a801      	add	r0, sp, #4
 8007588:	f7ff fd5b 	bl	8007042 <__lo0bits>
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	6163      	str	r3, [r4, #20]
 8007592:	3020      	adds	r0, #32
 8007594:	e7e7      	b.n	8007566 <__d2b+0x62>
 8007596:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800759a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800759e:	6030      	str	r0, [r6, #0]
 80075a0:	6918      	ldr	r0, [r3, #16]
 80075a2:	f7ff fd2f 	bl	8007004 <__hi0bits>
 80075a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075aa:	e7e4      	b.n	8007576 <__d2b+0x72>
 80075ac:	080080e8 	.word	0x080080e8
 80075b0:	080080f9 	.word	0x080080f9

080075b4 <__sfputc_r>:
 80075b4:	6893      	ldr	r3, [r2, #8]
 80075b6:	b410      	push	{r4}
 80075b8:	3b01      	subs	r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	6093      	str	r3, [r2, #8]
 80075be:	da07      	bge.n	80075d0 <__sfputc_r+0x1c>
 80075c0:	6994      	ldr	r4, [r2, #24]
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	db01      	blt.n	80075ca <__sfputc_r+0x16>
 80075c6:	290a      	cmp	r1, #10
 80075c8:	d102      	bne.n	80075d0 <__sfputc_r+0x1c>
 80075ca:	bc10      	pop	{r4}
 80075cc:	f7fe bbff 	b.w	8005dce <__swbuf_r>
 80075d0:	6813      	ldr	r3, [r2, #0]
 80075d2:	1c58      	adds	r0, r3, #1
 80075d4:	6010      	str	r0, [r2, #0]
 80075d6:	7019      	strb	r1, [r3, #0]
 80075d8:	4608      	mov	r0, r1
 80075da:	bc10      	pop	{r4}
 80075dc:	4770      	bx	lr

080075de <__sfputs_r>:
 80075de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e0:	4606      	mov	r6, r0
 80075e2:	460f      	mov	r7, r1
 80075e4:	4614      	mov	r4, r2
 80075e6:	18d5      	adds	r5, r2, r3
 80075e8:	42ac      	cmp	r4, r5
 80075ea:	d101      	bne.n	80075f0 <__sfputs_r+0x12>
 80075ec:	2000      	movs	r0, #0
 80075ee:	e007      	b.n	8007600 <__sfputs_r+0x22>
 80075f0:	463a      	mov	r2, r7
 80075f2:	4630      	mov	r0, r6
 80075f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f8:	f7ff ffdc 	bl	80075b4 <__sfputc_r>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d1f3      	bne.n	80075e8 <__sfputs_r+0xa>
 8007600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007604 <_vfiprintf_r>:
 8007604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	460d      	mov	r5, r1
 800760a:	4614      	mov	r4, r2
 800760c:	4698      	mov	r8, r3
 800760e:	4606      	mov	r6, r0
 8007610:	b09d      	sub	sp, #116	@ 0x74
 8007612:	b118      	cbz	r0, 800761c <_vfiprintf_r+0x18>
 8007614:	6a03      	ldr	r3, [r0, #32]
 8007616:	b90b      	cbnz	r3, 800761c <_vfiprintf_r+0x18>
 8007618:	f7fe faf0 	bl	8005bfc <__sinit>
 800761c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800761e:	07d9      	lsls	r1, r3, #31
 8007620:	d405      	bmi.n	800762e <_vfiprintf_r+0x2a>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	059a      	lsls	r2, r3, #22
 8007626:	d402      	bmi.n	800762e <_vfiprintf_r+0x2a>
 8007628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800762a:	f7fe fce2 	bl	8005ff2 <__retarget_lock_acquire_recursive>
 800762e:	89ab      	ldrh	r3, [r5, #12]
 8007630:	071b      	lsls	r3, r3, #28
 8007632:	d501      	bpl.n	8007638 <_vfiprintf_r+0x34>
 8007634:	692b      	ldr	r3, [r5, #16]
 8007636:	b99b      	cbnz	r3, 8007660 <_vfiprintf_r+0x5c>
 8007638:	4629      	mov	r1, r5
 800763a:	4630      	mov	r0, r6
 800763c:	f7fe fc06 	bl	8005e4c <__swsetup_r>
 8007640:	b170      	cbz	r0, 8007660 <_vfiprintf_r+0x5c>
 8007642:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007644:	07dc      	lsls	r4, r3, #31
 8007646:	d504      	bpl.n	8007652 <_vfiprintf_r+0x4e>
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	b01d      	add	sp, #116	@ 0x74
 800764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007652:	89ab      	ldrh	r3, [r5, #12]
 8007654:	0598      	lsls	r0, r3, #22
 8007656:	d4f7      	bmi.n	8007648 <_vfiprintf_r+0x44>
 8007658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800765a:	f7fe fccb 	bl	8005ff4 <__retarget_lock_release_recursive>
 800765e:	e7f3      	b.n	8007648 <_vfiprintf_r+0x44>
 8007660:	2300      	movs	r3, #0
 8007662:	9309      	str	r3, [sp, #36]	@ 0x24
 8007664:	2320      	movs	r3, #32
 8007666:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800766a:	2330      	movs	r3, #48	@ 0x30
 800766c:	f04f 0901 	mov.w	r9, #1
 8007670:	f8cd 800c 	str.w	r8, [sp, #12]
 8007674:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007820 <_vfiprintf_r+0x21c>
 8007678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800767c:	4623      	mov	r3, r4
 800767e:	469a      	mov	sl, r3
 8007680:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007684:	b10a      	cbz	r2, 800768a <_vfiprintf_r+0x86>
 8007686:	2a25      	cmp	r2, #37	@ 0x25
 8007688:	d1f9      	bne.n	800767e <_vfiprintf_r+0x7a>
 800768a:	ebba 0b04 	subs.w	fp, sl, r4
 800768e:	d00b      	beq.n	80076a8 <_vfiprintf_r+0xa4>
 8007690:	465b      	mov	r3, fp
 8007692:	4622      	mov	r2, r4
 8007694:	4629      	mov	r1, r5
 8007696:	4630      	mov	r0, r6
 8007698:	f7ff ffa1 	bl	80075de <__sfputs_r>
 800769c:	3001      	adds	r0, #1
 800769e:	f000 80a7 	beq.w	80077f0 <_vfiprintf_r+0x1ec>
 80076a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076a4:	445a      	add	r2, fp
 80076a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80076a8:	f89a 3000 	ldrb.w	r3, [sl]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f000 809f 	beq.w	80077f0 <_vfiprintf_r+0x1ec>
 80076b2:	2300      	movs	r3, #0
 80076b4:	f04f 32ff 	mov.w	r2, #4294967295
 80076b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076bc:	f10a 0a01 	add.w	sl, sl, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	9307      	str	r3, [sp, #28]
 80076c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80076ca:	4654      	mov	r4, sl
 80076cc:	2205      	movs	r2, #5
 80076ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d2:	4853      	ldr	r0, [pc, #332]	@ (8007820 <_vfiprintf_r+0x21c>)
 80076d4:	f7fe fc8f 	bl	8005ff6 <memchr>
 80076d8:	9a04      	ldr	r2, [sp, #16]
 80076da:	b9d8      	cbnz	r0, 8007714 <_vfiprintf_r+0x110>
 80076dc:	06d1      	lsls	r1, r2, #27
 80076de:	bf44      	itt	mi
 80076e0:	2320      	movmi	r3, #32
 80076e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076e6:	0713      	lsls	r3, r2, #28
 80076e8:	bf44      	itt	mi
 80076ea:	232b      	movmi	r3, #43	@ 0x2b
 80076ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076f0:	f89a 3000 	ldrb.w	r3, [sl]
 80076f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f6:	d015      	beq.n	8007724 <_vfiprintf_r+0x120>
 80076f8:	4654      	mov	r4, sl
 80076fa:	2000      	movs	r0, #0
 80076fc:	f04f 0c0a 	mov.w	ip, #10
 8007700:	9a07      	ldr	r2, [sp, #28]
 8007702:	4621      	mov	r1, r4
 8007704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007708:	3b30      	subs	r3, #48	@ 0x30
 800770a:	2b09      	cmp	r3, #9
 800770c:	d94b      	bls.n	80077a6 <_vfiprintf_r+0x1a2>
 800770e:	b1b0      	cbz	r0, 800773e <_vfiprintf_r+0x13a>
 8007710:	9207      	str	r2, [sp, #28]
 8007712:	e014      	b.n	800773e <_vfiprintf_r+0x13a>
 8007714:	eba0 0308 	sub.w	r3, r0, r8
 8007718:	fa09 f303 	lsl.w	r3, r9, r3
 800771c:	4313      	orrs	r3, r2
 800771e:	46a2      	mov	sl, r4
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	e7d2      	b.n	80076ca <_vfiprintf_r+0xc6>
 8007724:	9b03      	ldr	r3, [sp, #12]
 8007726:	1d19      	adds	r1, r3, #4
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	9103      	str	r1, [sp, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	bfbb      	ittet	lt
 8007730:	425b      	neglt	r3, r3
 8007732:	f042 0202 	orrlt.w	r2, r2, #2
 8007736:	9307      	strge	r3, [sp, #28]
 8007738:	9307      	strlt	r3, [sp, #28]
 800773a:	bfb8      	it	lt
 800773c:	9204      	strlt	r2, [sp, #16]
 800773e:	7823      	ldrb	r3, [r4, #0]
 8007740:	2b2e      	cmp	r3, #46	@ 0x2e
 8007742:	d10a      	bne.n	800775a <_vfiprintf_r+0x156>
 8007744:	7863      	ldrb	r3, [r4, #1]
 8007746:	2b2a      	cmp	r3, #42	@ 0x2a
 8007748:	d132      	bne.n	80077b0 <_vfiprintf_r+0x1ac>
 800774a:	9b03      	ldr	r3, [sp, #12]
 800774c:	3402      	adds	r4, #2
 800774e:	1d1a      	adds	r2, r3, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	9203      	str	r2, [sp, #12]
 8007754:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007824 <_vfiprintf_r+0x220>
 800775e:	2203      	movs	r2, #3
 8007760:	4650      	mov	r0, sl
 8007762:	7821      	ldrb	r1, [r4, #0]
 8007764:	f7fe fc47 	bl	8005ff6 <memchr>
 8007768:	b138      	cbz	r0, 800777a <_vfiprintf_r+0x176>
 800776a:	2240      	movs	r2, #64	@ 0x40
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	eba0 000a 	sub.w	r0, r0, sl
 8007772:	4082      	lsls	r2, r0
 8007774:	4313      	orrs	r3, r2
 8007776:	3401      	adds	r4, #1
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777e:	2206      	movs	r2, #6
 8007780:	4829      	ldr	r0, [pc, #164]	@ (8007828 <_vfiprintf_r+0x224>)
 8007782:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007786:	f7fe fc36 	bl	8005ff6 <memchr>
 800778a:	2800      	cmp	r0, #0
 800778c:	d03f      	beq.n	800780e <_vfiprintf_r+0x20a>
 800778e:	4b27      	ldr	r3, [pc, #156]	@ (800782c <_vfiprintf_r+0x228>)
 8007790:	bb1b      	cbnz	r3, 80077da <_vfiprintf_r+0x1d6>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	3307      	adds	r3, #7
 8007796:	f023 0307 	bic.w	r3, r3, #7
 800779a:	3308      	adds	r3, #8
 800779c:	9303      	str	r3, [sp, #12]
 800779e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a0:	443b      	add	r3, r7
 80077a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077a4:	e76a      	b.n	800767c <_vfiprintf_r+0x78>
 80077a6:	460c      	mov	r4, r1
 80077a8:	2001      	movs	r0, #1
 80077aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ae:	e7a8      	b.n	8007702 <_vfiprintf_r+0xfe>
 80077b0:	2300      	movs	r3, #0
 80077b2:	f04f 0c0a 	mov.w	ip, #10
 80077b6:	4619      	mov	r1, r3
 80077b8:	3401      	adds	r4, #1
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	4620      	mov	r0, r4
 80077be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077c2:	3a30      	subs	r2, #48	@ 0x30
 80077c4:	2a09      	cmp	r2, #9
 80077c6:	d903      	bls.n	80077d0 <_vfiprintf_r+0x1cc>
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0c6      	beq.n	800775a <_vfiprintf_r+0x156>
 80077cc:	9105      	str	r1, [sp, #20]
 80077ce:	e7c4      	b.n	800775a <_vfiprintf_r+0x156>
 80077d0:	4604      	mov	r4, r0
 80077d2:	2301      	movs	r3, #1
 80077d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077d8:	e7f0      	b.n	80077bc <_vfiprintf_r+0x1b8>
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	462a      	mov	r2, r5
 80077e0:	4630      	mov	r0, r6
 80077e2:	4b13      	ldr	r3, [pc, #76]	@ (8007830 <_vfiprintf_r+0x22c>)
 80077e4:	a904      	add	r1, sp, #16
 80077e6:	f7fd fdbf 	bl	8005368 <_printf_float>
 80077ea:	4607      	mov	r7, r0
 80077ec:	1c78      	adds	r0, r7, #1
 80077ee:	d1d6      	bne.n	800779e <_vfiprintf_r+0x19a>
 80077f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077f2:	07d9      	lsls	r1, r3, #31
 80077f4:	d405      	bmi.n	8007802 <_vfiprintf_r+0x1fe>
 80077f6:	89ab      	ldrh	r3, [r5, #12]
 80077f8:	059a      	lsls	r2, r3, #22
 80077fa:	d402      	bmi.n	8007802 <_vfiprintf_r+0x1fe>
 80077fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077fe:	f7fe fbf9 	bl	8005ff4 <__retarget_lock_release_recursive>
 8007802:	89ab      	ldrh	r3, [r5, #12]
 8007804:	065b      	lsls	r3, r3, #25
 8007806:	f53f af1f 	bmi.w	8007648 <_vfiprintf_r+0x44>
 800780a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800780c:	e71e      	b.n	800764c <_vfiprintf_r+0x48>
 800780e:	ab03      	add	r3, sp, #12
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	462a      	mov	r2, r5
 8007814:	4630      	mov	r0, r6
 8007816:	4b06      	ldr	r3, [pc, #24]	@ (8007830 <_vfiprintf_r+0x22c>)
 8007818:	a904      	add	r1, sp, #16
 800781a:	f7fe f843 	bl	80058a4 <_printf_i>
 800781e:	e7e4      	b.n	80077ea <_vfiprintf_r+0x1e6>
 8007820:	08008250 	.word	0x08008250
 8007824:	08008256 	.word	0x08008256
 8007828:	0800825a 	.word	0x0800825a
 800782c:	08005369 	.word	0x08005369
 8007830:	080075df 	.word	0x080075df

08007834 <__sflush_r>:
 8007834:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	0716      	lsls	r6, r2, #28
 800783c:	4605      	mov	r5, r0
 800783e:	460c      	mov	r4, r1
 8007840:	d454      	bmi.n	80078ec <__sflush_r+0xb8>
 8007842:	684b      	ldr	r3, [r1, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	dc02      	bgt.n	800784e <__sflush_r+0x1a>
 8007848:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	dd48      	ble.n	80078e0 <__sflush_r+0xac>
 800784e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007850:	2e00      	cmp	r6, #0
 8007852:	d045      	beq.n	80078e0 <__sflush_r+0xac>
 8007854:	2300      	movs	r3, #0
 8007856:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800785a:	682f      	ldr	r7, [r5, #0]
 800785c:	6a21      	ldr	r1, [r4, #32]
 800785e:	602b      	str	r3, [r5, #0]
 8007860:	d030      	beq.n	80078c4 <__sflush_r+0x90>
 8007862:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007864:	89a3      	ldrh	r3, [r4, #12]
 8007866:	0759      	lsls	r1, r3, #29
 8007868:	d505      	bpl.n	8007876 <__sflush_r+0x42>
 800786a:	6863      	ldr	r3, [r4, #4]
 800786c:	1ad2      	subs	r2, r2, r3
 800786e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007870:	b10b      	cbz	r3, 8007876 <__sflush_r+0x42>
 8007872:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007874:	1ad2      	subs	r2, r2, r3
 8007876:	2300      	movs	r3, #0
 8007878:	4628      	mov	r0, r5
 800787a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800787c:	6a21      	ldr	r1, [r4, #32]
 800787e:	47b0      	blx	r6
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	d106      	bne.n	8007894 <__sflush_r+0x60>
 8007886:	6829      	ldr	r1, [r5, #0]
 8007888:	291d      	cmp	r1, #29
 800788a:	d82b      	bhi.n	80078e4 <__sflush_r+0xb0>
 800788c:	4a28      	ldr	r2, [pc, #160]	@ (8007930 <__sflush_r+0xfc>)
 800788e:	410a      	asrs	r2, r1
 8007890:	07d6      	lsls	r6, r2, #31
 8007892:	d427      	bmi.n	80078e4 <__sflush_r+0xb0>
 8007894:	2200      	movs	r2, #0
 8007896:	6062      	str	r2, [r4, #4]
 8007898:	6922      	ldr	r2, [r4, #16]
 800789a:	04d9      	lsls	r1, r3, #19
 800789c:	6022      	str	r2, [r4, #0]
 800789e:	d504      	bpl.n	80078aa <__sflush_r+0x76>
 80078a0:	1c42      	adds	r2, r0, #1
 80078a2:	d101      	bne.n	80078a8 <__sflush_r+0x74>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b903      	cbnz	r3, 80078aa <__sflush_r+0x76>
 80078a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80078aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ac:	602f      	str	r7, [r5, #0]
 80078ae:	b1b9      	cbz	r1, 80078e0 <__sflush_r+0xac>
 80078b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078b4:	4299      	cmp	r1, r3
 80078b6:	d002      	beq.n	80078be <__sflush_r+0x8a>
 80078b8:	4628      	mov	r0, r5
 80078ba:	f7ff f9fd 	bl	8006cb8 <_free_r>
 80078be:	2300      	movs	r3, #0
 80078c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80078c2:	e00d      	b.n	80078e0 <__sflush_r+0xac>
 80078c4:	2301      	movs	r3, #1
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b0      	blx	r6
 80078ca:	4602      	mov	r2, r0
 80078cc:	1c50      	adds	r0, r2, #1
 80078ce:	d1c9      	bne.n	8007864 <__sflush_r+0x30>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0c6      	beq.n	8007864 <__sflush_r+0x30>
 80078d6:	2b1d      	cmp	r3, #29
 80078d8:	d001      	beq.n	80078de <__sflush_r+0xaa>
 80078da:	2b16      	cmp	r3, #22
 80078dc:	d11d      	bne.n	800791a <__sflush_r+0xe6>
 80078de:	602f      	str	r7, [r5, #0]
 80078e0:	2000      	movs	r0, #0
 80078e2:	e021      	b.n	8007928 <__sflush_r+0xf4>
 80078e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078e8:	b21b      	sxth	r3, r3
 80078ea:	e01a      	b.n	8007922 <__sflush_r+0xee>
 80078ec:	690f      	ldr	r7, [r1, #16]
 80078ee:	2f00      	cmp	r7, #0
 80078f0:	d0f6      	beq.n	80078e0 <__sflush_r+0xac>
 80078f2:	0793      	lsls	r3, r2, #30
 80078f4:	bf18      	it	ne
 80078f6:	2300      	movne	r3, #0
 80078f8:	680e      	ldr	r6, [r1, #0]
 80078fa:	bf08      	it	eq
 80078fc:	694b      	ldreq	r3, [r1, #20]
 80078fe:	1bf6      	subs	r6, r6, r7
 8007900:	600f      	str	r7, [r1, #0]
 8007902:	608b      	str	r3, [r1, #8]
 8007904:	2e00      	cmp	r6, #0
 8007906:	ddeb      	ble.n	80078e0 <__sflush_r+0xac>
 8007908:	4633      	mov	r3, r6
 800790a:	463a      	mov	r2, r7
 800790c:	4628      	mov	r0, r5
 800790e:	6a21      	ldr	r1, [r4, #32]
 8007910:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007914:	47e0      	blx	ip
 8007916:	2800      	cmp	r0, #0
 8007918:	dc07      	bgt.n	800792a <__sflush_r+0xf6>
 800791a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007922:	f04f 30ff 	mov.w	r0, #4294967295
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800792a:	4407      	add	r7, r0
 800792c:	1a36      	subs	r6, r6, r0
 800792e:	e7e9      	b.n	8007904 <__sflush_r+0xd0>
 8007930:	dfbffffe 	.word	0xdfbffffe

08007934 <_fflush_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	4605      	mov	r5, r0
 800793a:	460c      	mov	r4, r1
 800793c:	b913      	cbnz	r3, 8007944 <_fflush_r+0x10>
 800793e:	2500      	movs	r5, #0
 8007940:	4628      	mov	r0, r5
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	b118      	cbz	r0, 800794e <_fflush_r+0x1a>
 8007946:	6a03      	ldr	r3, [r0, #32]
 8007948:	b90b      	cbnz	r3, 800794e <_fflush_r+0x1a>
 800794a:	f7fe f957 	bl	8005bfc <__sinit>
 800794e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f3      	beq.n	800793e <_fflush_r+0xa>
 8007956:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007958:	07d0      	lsls	r0, r2, #31
 800795a:	d404      	bmi.n	8007966 <_fflush_r+0x32>
 800795c:	0599      	lsls	r1, r3, #22
 800795e:	d402      	bmi.n	8007966 <_fflush_r+0x32>
 8007960:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007962:	f7fe fb46 	bl	8005ff2 <__retarget_lock_acquire_recursive>
 8007966:	4628      	mov	r0, r5
 8007968:	4621      	mov	r1, r4
 800796a:	f7ff ff63 	bl	8007834 <__sflush_r>
 800796e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007970:	4605      	mov	r5, r0
 8007972:	07da      	lsls	r2, r3, #31
 8007974:	d4e4      	bmi.n	8007940 <_fflush_r+0xc>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	059b      	lsls	r3, r3, #22
 800797a:	d4e1      	bmi.n	8007940 <_fflush_r+0xc>
 800797c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800797e:	f7fe fb39 	bl	8005ff4 <__retarget_lock_release_recursive>
 8007982:	e7dd      	b.n	8007940 <_fflush_r+0xc>

08007984 <__swhatbuf_r>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	460c      	mov	r4, r1
 8007988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798c:	4615      	mov	r5, r2
 800798e:	2900      	cmp	r1, #0
 8007990:	461e      	mov	r6, r3
 8007992:	b096      	sub	sp, #88	@ 0x58
 8007994:	da0c      	bge.n	80079b0 <__swhatbuf_r+0x2c>
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	2100      	movs	r1, #0
 800799a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800799e:	bf14      	ite	ne
 80079a0:	2340      	movne	r3, #64	@ 0x40
 80079a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079a6:	2000      	movs	r0, #0
 80079a8:	6031      	str	r1, [r6, #0]
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	b016      	add	sp, #88	@ 0x58
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	466a      	mov	r2, sp
 80079b2:	f000 f849 	bl	8007a48 <_fstat_r>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	dbed      	blt.n	8007996 <__swhatbuf_r+0x12>
 80079ba:	9901      	ldr	r1, [sp, #4]
 80079bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079c4:	4259      	negs	r1, r3
 80079c6:	4159      	adcs	r1, r3
 80079c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079cc:	e7eb      	b.n	80079a6 <__swhatbuf_r+0x22>

080079ce <__smakebuf_r>:
 80079ce:	898b      	ldrh	r3, [r1, #12]
 80079d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d2:	079d      	lsls	r5, r3, #30
 80079d4:	4606      	mov	r6, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	d507      	bpl.n	80079ea <__smakebuf_r+0x1c>
 80079da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079de:	6023      	str	r3, [r4, #0]
 80079e0:	6123      	str	r3, [r4, #16]
 80079e2:	2301      	movs	r3, #1
 80079e4:	6163      	str	r3, [r4, #20]
 80079e6:	b003      	add	sp, #12
 80079e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ea:	466a      	mov	r2, sp
 80079ec:	ab01      	add	r3, sp, #4
 80079ee:	f7ff ffc9 	bl	8007984 <__swhatbuf_r>
 80079f2:	9f00      	ldr	r7, [sp, #0]
 80079f4:	4605      	mov	r5, r0
 80079f6:	4639      	mov	r1, r7
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7ff f9cf 	bl	8006d9c <_malloc_r>
 80079fe:	b948      	cbnz	r0, 8007a14 <__smakebuf_r+0x46>
 8007a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a04:	059a      	lsls	r2, r3, #22
 8007a06:	d4ee      	bmi.n	80079e6 <__smakebuf_r+0x18>
 8007a08:	f023 0303 	bic.w	r3, r3, #3
 8007a0c:	f043 0302 	orr.w	r3, r3, #2
 8007a10:	81a3      	strh	r3, [r4, #12]
 8007a12:	e7e2      	b.n	80079da <__smakebuf_r+0xc>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	6020      	str	r0, [r4, #0]
 8007a24:	b15b      	cbz	r3, 8007a3e <__smakebuf_r+0x70>
 8007a26:	4630      	mov	r0, r6
 8007a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a2c:	f000 f81e 	bl	8007a6c <_isatty_r>
 8007a30:	b128      	cbz	r0, 8007a3e <__smakebuf_r+0x70>
 8007a32:	89a3      	ldrh	r3, [r4, #12]
 8007a34:	f023 0303 	bic.w	r3, r3, #3
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	81a3      	strh	r3, [r4, #12]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	431d      	orrs	r5, r3
 8007a42:	81a5      	strh	r5, [r4, #12]
 8007a44:	e7cf      	b.n	80079e6 <__smakebuf_r+0x18>
	...

08007a48 <_fstat_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4d06      	ldr	r5, [pc, #24]	@ (8007a68 <_fstat_r+0x20>)
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	4611      	mov	r1, r2
 8007a54:	602b      	str	r3, [r5, #0]
 8007a56:	f7fa fce1 	bl	800241c <_fstat>
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	d102      	bne.n	8007a64 <_fstat_r+0x1c>
 8007a5e:	682b      	ldr	r3, [r5, #0]
 8007a60:	b103      	cbz	r3, 8007a64 <_fstat_r+0x1c>
 8007a62:	6023      	str	r3, [r4, #0]
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
 8007a66:	bf00      	nop
 8007a68:	20000590 	.word	0x20000590

08007a6c <_isatty_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4d05      	ldr	r5, [pc, #20]	@ (8007a88 <_isatty_r+0x1c>)
 8007a72:	4604      	mov	r4, r0
 8007a74:	4608      	mov	r0, r1
 8007a76:	602b      	str	r3, [r5, #0]
 8007a78:	f7fa fcdf 	bl	800243a <_isatty>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_isatty_r+0x1a>
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_isatty_r+0x1a>
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	20000590 	.word	0x20000590

08007a8c <_sbrk_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	2300      	movs	r3, #0
 8007a90:	4d05      	ldr	r5, [pc, #20]	@ (8007aa8 <_sbrk_r+0x1c>)
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	f7fa fce6 	bl	8002468 <_sbrk>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_sbrk_r+0x1a>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_sbrk_r+0x1a>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	20000590 	.word	0x20000590

08007aac <memcpy>:
 8007aac:	440a      	add	r2, r1
 8007aae:	4291      	cmp	r1, r2
 8007ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab4:	d100      	bne.n	8007ab8 <memcpy+0xc>
 8007ab6:	4770      	bx	lr
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007abe:	4291      	cmp	r1, r2
 8007ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac4:	d1f9      	bne.n	8007aba <memcpy+0xe>
 8007ac6:	bd10      	pop	{r4, pc}

08007ac8 <__assert_func>:
 8007ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007aca:	4614      	mov	r4, r2
 8007acc:	461a      	mov	r2, r3
 8007ace:	4b09      	ldr	r3, [pc, #36]	@ (8007af4 <__assert_func+0x2c>)
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68d8      	ldr	r0, [r3, #12]
 8007ad6:	b954      	cbnz	r4, 8007aee <__assert_func+0x26>
 8007ad8:	4b07      	ldr	r3, [pc, #28]	@ (8007af8 <__assert_func+0x30>)
 8007ada:	461c      	mov	r4, r3
 8007adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ae0:	9100      	str	r1, [sp, #0]
 8007ae2:	462b      	mov	r3, r5
 8007ae4:	4905      	ldr	r1, [pc, #20]	@ (8007afc <__assert_func+0x34>)
 8007ae6:	f000 f841 	bl	8007b6c <fiprintf>
 8007aea:	f000 f851 	bl	8007b90 <abort>
 8007aee:	4b04      	ldr	r3, [pc, #16]	@ (8007b00 <__assert_func+0x38>)
 8007af0:	e7f4      	b.n	8007adc <__assert_func+0x14>
 8007af2:	bf00      	nop
 8007af4:	20000018 	.word	0x20000018
 8007af8:	080082a6 	.word	0x080082a6
 8007afc:	08008278 	.word	0x08008278
 8007b00:	0800826b 	.word	0x0800826b

08007b04 <_calloc_r>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	fba1 5402 	umull	r5, r4, r1, r2
 8007b0a:	b93c      	cbnz	r4, 8007b1c <_calloc_r+0x18>
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	f7ff f945 	bl	8006d9c <_malloc_r>
 8007b12:	4606      	mov	r6, r0
 8007b14:	b928      	cbnz	r0, 8007b22 <_calloc_r+0x1e>
 8007b16:	2600      	movs	r6, #0
 8007b18:	4630      	mov	r0, r6
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	220c      	movs	r2, #12
 8007b1e:	6002      	str	r2, [r0, #0]
 8007b20:	e7f9      	b.n	8007b16 <_calloc_r+0x12>
 8007b22:	462a      	mov	r2, r5
 8007b24:	4621      	mov	r1, r4
 8007b26:	f7fe f9e7 	bl	8005ef8 <memset>
 8007b2a:	e7f5      	b.n	8007b18 <_calloc_r+0x14>

08007b2c <__ascii_mbtowc>:
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	b901      	cbnz	r1, 8007b32 <__ascii_mbtowc+0x6>
 8007b30:	a901      	add	r1, sp, #4
 8007b32:	b142      	cbz	r2, 8007b46 <__ascii_mbtowc+0x1a>
 8007b34:	b14b      	cbz	r3, 8007b4a <__ascii_mbtowc+0x1e>
 8007b36:	7813      	ldrb	r3, [r2, #0]
 8007b38:	600b      	str	r3, [r1, #0]
 8007b3a:	7812      	ldrb	r2, [r2, #0]
 8007b3c:	1e10      	subs	r0, r2, #0
 8007b3e:	bf18      	it	ne
 8007b40:	2001      	movne	r0, #1
 8007b42:	b002      	add	sp, #8
 8007b44:	4770      	bx	lr
 8007b46:	4610      	mov	r0, r2
 8007b48:	e7fb      	b.n	8007b42 <__ascii_mbtowc+0x16>
 8007b4a:	f06f 0001 	mvn.w	r0, #1
 8007b4e:	e7f8      	b.n	8007b42 <__ascii_mbtowc+0x16>

08007b50 <__ascii_wctomb>:
 8007b50:	4603      	mov	r3, r0
 8007b52:	4608      	mov	r0, r1
 8007b54:	b141      	cbz	r1, 8007b68 <__ascii_wctomb+0x18>
 8007b56:	2aff      	cmp	r2, #255	@ 0xff
 8007b58:	d904      	bls.n	8007b64 <__ascii_wctomb+0x14>
 8007b5a:	228a      	movs	r2, #138	@ 0x8a
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	4770      	bx	lr
 8007b64:	2001      	movs	r0, #1
 8007b66:	700a      	strb	r2, [r1, #0]
 8007b68:	4770      	bx	lr
	...

08007b6c <fiprintf>:
 8007b6c:	b40e      	push	{r1, r2, r3}
 8007b6e:	b503      	push	{r0, r1, lr}
 8007b70:	4601      	mov	r1, r0
 8007b72:	ab03      	add	r3, sp, #12
 8007b74:	4805      	ldr	r0, [pc, #20]	@ (8007b8c <fiprintf+0x20>)
 8007b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	f7ff fd41 	bl	8007604 <_vfiprintf_r>
 8007b82:	b002      	add	sp, #8
 8007b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b88:	b003      	add	sp, #12
 8007b8a:	4770      	bx	lr
 8007b8c:	20000018 	.word	0x20000018

08007b90 <abort>:
 8007b90:	2006      	movs	r0, #6
 8007b92:	b508      	push	{r3, lr}
 8007b94:	f000 f82c 	bl	8007bf0 <raise>
 8007b98:	2001      	movs	r0, #1
 8007b9a:	f7fa fc0c 	bl	80023b6 <_exit>

08007b9e <_raise_r>:
 8007b9e:	291f      	cmp	r1, #31
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	d904      	bls.n	8007bb2 <_raise_r+0x14>
 8007ba8:	2316      	movs	r3, #22
 8007baa:	6003      	str	r3, [r0, #0]
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007bb4:	b112      	cbz	r2, 8007bbc <_raise_r+0x1e>
 8007bb6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bba:	b94b      	cbnz	r3, 8007bd0 <_raise_r+0x32>
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	f000 f831 	bl	8007c24 <_getpid_r>
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	4601      	mov	r1, r0
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bcc:	f000 b818 	b.w	8007c00 <_kill_r>
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d00a      	beq.n	8007bea <_raise_r+0x4c>
 8007bd4:	1c59      	adds	r1, r3, #1
 8007bd6:	d103      	bne.n	8007be0 <_raise_r+0x42>
 8007bd8:	2316      	movs	r3, #22
 8007bda:	6003      	str	r3, [r0, #0]
 8007bdc:	2001      	movs	r0, #1
 8007bde:	e7e7      	b.n	8007bb0 <_raise_r+0x12>
 8007be0:	2100      	movs	r1, #0
 8007be2:	4620      	mov	r0, r4
 8007be4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007be8:	4798      	blx	r3
 8007bea:	2000      	movs	r0, #0
 8007bec:	e7e0      	b.n	8007bb0 <_raise_r+0x12>
	...

08007bf0 <raise>:
 8007bf0:	4b02      	ldr	r3, [pc, #8]	@ (8007bfc <raise+0xc>)
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	f7ff bfd2 	b.w	8007b9e <_raise_r>
 8007bfa:	bf00      	nop
 8007bfc:	20000018 	.word	0x20000018

08007c00 <_kill_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	2300      	movs	r3, #0
 8007c04:	4d06      	ldr	r5, [pc, #24]	@ (8007c20 <_kill_r+0x20>)
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	f7fa fbc2 	bl	8002396 <_kill>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d102      	bne.n	8007c1c <_kill_r+0x1c>
 8007c16:	682b      	ldr	r3, [r5, #0]
 8007c18:	b103      	cbz	r3, 8007c1c <_kill_r+0x1c>
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000590 	.word	0x20000590

08007c24 <_getpid_r>:
 8007c24:	f7fa bbb0 	b.w	8002388 <_getpid>

08007c28 <_init>:
 8007c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c2a:	bf00      	nop
 8007c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c2e:	bc08      	pop	{r3}
 8007c30:	469e      	mov	lr, r3
 8007c32:	4770      	bx	lr

08007c34 <_fini>:
 8007c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c36:	bf00      	nop
 8007c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c3a:	bc08      	pop	{r3}
 8007c3c:	469e      	mov	lr, r3
 8007c3e:	4770      	bx	lr
