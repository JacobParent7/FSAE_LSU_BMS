
Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002684  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002808  08002808  00003808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002820  08002820  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002820  08002820  00003820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002828  08002828  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002828  08002828  00003828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800282c  0800282c  0000382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002830  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  0800283c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800283c  000041b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd1a  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4b  00000000  00000000  0000fd4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  000118a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000816  00000000  00000000  00012320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e175  00000000  00000000  00012b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c272  00000000  00000000  00030cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9496  00000000  00000000  0003cf1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f63b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc0  00000000  00000000  000f63f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000f8fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080027f0 	.word	0x080027f0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	080027f0 	.word	0x080027f0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fc82 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f824 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f9ac 	bl	8000818 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004c0:	f000 f8b8 	bl	8000634 <MX_CAN1_Init>
  MX_CAN2_Init();
 80004c4:	f000 f8ea 	bl	800069c <MX_CAN2_Init>
  //MX_SDIO_SD_Init();
  MX_SPI1_Init();
 80004c8:	f000 f91c 	bl	8000704 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f97a 	bl	80007c4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80004d0:	f000 f94e 	bl	8000770 <MX_UART4_Init>
  MX_ADC1_Init();
 80004d4:	f000 f85c 	bl	8000590 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2104      	movs	r1, #4
 80004dc:	4808      	ldr	r0, [pc, #32]	@ (8000500 <main+0x50>)
 80004de:	f001 fae7 	bl	8001ab0 <HAL_GPIO_WritePin>
	    // Delay for 500ms
	  HAL_Delay(500);
 80004e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004e6:	f000 fcd7 	bl	8000e98 <HAL_Delay>

	    // Turn the LED OFF
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2104      	movs	r1, #4
 80004ee:	4804      	ldr	r0, [pc, #16]	@ (8000500 <main+0x50>)
 80004f0:	f001 fade 	bl	8001ab0 <HAL_GPIO_WritePin>
	    // Delay for 500ms
	  HAL_Delay(500);
 80004f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004f8:	f000 fcce 	bl	8000e98 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80004fc:	bf00      	nop
 80004fe:	e7eb      	b.n	80004d8 <main+0x28>
 8000500:	40020800 	.word	0x40020800

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b092      	sub	sp, #72	@ 0x48
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	2230      	movs	r2, #48	@ 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f002 f940 	bl	8002798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000526:	2301      	movs	r3, #1
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052a:	2301      	movs	r3, #1
 800052c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000532:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000536:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000538:	230d      	movs	r3, #13
 800053a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 800053c:	23c3      	movs	r3, #195	@ 0xc3
 800053e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000540:	2302      	movs	r3, #2
 8000542:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000544:	2305      	movs	r3, #5
 8000546:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0318 	add.w	r3, r7, #24
 800054c:	4618      	mov	r0, r3
 800054e:	f001 fac7 	bl	8001ae0 <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000558:	f000 f9fe 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000560:	2302      	movs	r3, #2
 8000562:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000568:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800056e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000572:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2103      	movs	r1, #3
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fd05 	bl	8001f88 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000584:	f000 f9e8 	bl	8000958 <Error_Handler>
  }
}
 8000588:	bf00      	nop
 800058a:	3748      	adds	r7, #72	@ 0x48
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a2:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <MX_ADC1_Init+0x9c>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005bc:	2200      	movs	r2, #0
 80005be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c8:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ce:	4b16      	ldr	r3, [pc, #88]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005d0:	4a17      	ldr	r2, [pc, #92]	@ (8000630 <MX_ADC1_Init+0xa0>)
 80005d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005dc:	2201      	movs	r2, #1
 80005de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ee:	480e      	ldr	r0, [pc, #56]	@ (8000628 <MX_ADC1_Init+0x98>)
 80005f0:	f000 fc76 	bl	8000ee0 <HAL_ADC_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f000 f9ad 	bl	8000958 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005fe:	230b      	movs	r3, #11
 8000600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	@ (8000628 <MX_ADC1_Init+0x98>)
 8000610:	f000 fcaa 	bl	8000f68 <HAL_ADC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800061a:	f000 f99d 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000028 	.word	0x20000028
 800062c:	40012000 	.word	0x40012000
 8000630:	0f000001 	.word	0x0f000001

08000634 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000638:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <MX_CAN1_Init+0x60>)
 800063a:	4a17      	ldr	r2, [pc, #92]	@ (8000698 <MX_CAN1_Init+0x64>)
 800063c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800063e:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000640:	2210      	movs	r2, #16
 8000642:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000644:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_CAN1_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <MX_CAN1_Init+0x60>)
 800065e:	2200      	movs	r2, #0
 8000660:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_CAN1_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_CAN1_Init+0x60>)
 800067c:	2200      	movs	r2, #0
 800067e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_CAN1_Init+0x60>)
 8000682:	f000 fe97 	bl	80013b4 <HAL_CAN_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800068c:	f000 f964 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000070 	.word	0x20000070
 8000698:	40006400 	.word	0x40006400

0800069c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <MX_CAN2_Init+0x64>)
 80006a4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006a8:	2210      	movs	r2, #16
 80006aa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006b8:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_CAN2_Init+0x60>)
 80006ea:	f000 fe63 	bl	80013b4 <HAL_CAN_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f000 f930 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000098 	.word	0x20000098
 8000700:	40006800 	.word	0x40006800

08000704 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_SPI1_Init+0x64>)
 800070a:	4a18      	ldr	r2, [pc, #96]	@ (800076c <MX_SPI1_Init+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800070e:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000710:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000730:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073c:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000750:	220a      	movs	r2, #10
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_SPI1_Init+0x64>)
 8000756:	f001 fe5b 	bl	8002410 <HAL_SPI_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f8fa 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000c0 	.word	0x200000c0
 800076c:	40013000 	.word	0x40013000

08000770 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_UART4_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	@ (80007c0 <MX_UART4_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800077a:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_UART4_Init+0x4c>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_UART4_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_UART4_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_UART4_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_UART4_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_UART4_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_UART4_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_UART4_Init+0x4c>)
 80007a8:	f001 febb 	bl	8002522 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f8d1 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000118 	.word	0x20000118
 80007c0:	40004c00 	.word	0x40004c00

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_USART2_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USART2_UART_Init+0x4c>)
 80007fc:	f001 fe91 	bl	8002522 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 f8a7 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000160 	.word	0x20000160
 8000814:	40004400 	.word	0x40004400

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b45      	ldr	r3, [pc, #276]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a44      	ldr	r2, [pc, #272]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b42      	ldr	r3, [pc, #264]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b3e      	ldr	r3, [pc, #248]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a3d      	ldr	r2, [pc, #244]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b3b      	ldr	r3, [pc, #236]	@ (8000948 <MX_GPIO_Init+0x130>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	4b37      	ldr	r3, [pc, #220]	@ (8000948 <MX_GPIO_Init+0x130>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a36      	ldr	r2, [pc, #216]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a2f      	ldr	r2, [pc, #188]	@ (8000948 <MX_GPIO_Init+0x130>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <MX_GPIO_Init+0x130>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b29      	ldr	r3, [pc, #164]	@ (8000948 <MX_GPIO_Init+0x130>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a28      	ldr	r2, [pc, #160]	@ (8000948 <MX_GPIO_Init+0x130>)
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b26      	ldr	r3, [pc, #152]	@ (8000948 <MX_GPIO_Init+0x130>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0308 	and.w	r3, r3, #8
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2134      	movs	r1, #52	@ 0x34
 80008be:	4823      	ldr	r0, [pc, #140]	@ (800094c <MX_GPIO_Init+0x134>)
 80008c0:	f001 f8f6 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f240 4101 	movw	r1, #1025	@ 0x401
 80008ca:	4821      	ldr	r0, [pc, #132]	@ (8000950 <MX_GPIO_Init+0x138>)
 80008cc:	f001 f8f0 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 CHARGE_EN_LV_Pin DISCHARGE_EN_LV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin;
 80008d0:	2334      	movs	r3, #52	@ 0x34
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4819      	ldr	r0, [pc, #100]	@ (800094c <MX_GPIO_Init+0x134>)
 80008e8:	f000 ff44 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_SAFE_LV_Pin FAN_EN_LV_Pin */
  GPIO_InitStruct.Pin = CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin;
 80008ec:	f240 4301 	movw	r3, #1025	@ 0x401
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4812      	ldr	r0, [pc, #72]	@ (8000950 <MX_GPIO_Init+0x138>)
 8000906:	f000 ff35 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_PWR_LV_ISO_Pin READY_PWR_LV_ISO_Pin BQ_NFAULT_Pin BQ_SPI_RDY_Pin */
  GPIO_InitStruct.Pin = CHARGE_PWR_LV_ISO_Pin|READY_PWR_LV_ISO_Pin|BQ_NFAULT_Pin|BQ_SPI_RDY_Pin;
 800090a:	f644 0306 	movw	r3, #18438	@ 0x4806
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_GPIO_Init+0x138>)
 8000920:	f000 ff28 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DET_Pin */
  GPIO_InitStruct.Pin = SDIO_DET_Pin;
 8000924:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <MX_GPIO_Init+0x13c>)
 800093a:	f000 ff1b 	bl	8001774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	@ 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40020800 	.word	0x40020800
 8000950:	40020400 	.word	0x40020400
 8000954:	40020000 	.word	0x40020000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <Error_Handler+0x8>

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_MspInit+0x48>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	4a0e      	ldr	r2, [pc, #56]	@ (80009ac <HAL_MspInit+0x48>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000978:	6453      	str	r3, [r2, #68]	@ 0x44
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <HAL_MspInit+0x48>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <HAL_MspInit+0x48>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <HAL_MspInit+0x48>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	@ 0x40
 8000996:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_MspInit+0x48>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <HAL_ADC_MspInit+0x7c>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d127      	bne.n	8000a22 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <HAL_ADC_MspInit+0x80>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <HAL_ADC_MspInit+0x80>)
 80009dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <HAL_ADC_MspInit+0x80>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_ADC_MspInit+0x80>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <HAL_ADC_MspInit+0x80>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <HAL_ADC_MspInit+0x80>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <HAL_ADC_MspInit+0x84>)
 8000a1e:	f000 fea9 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	@ 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020800 	.word	0x40020800

08000a38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	@ 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a43      	ldr	r2, [pc, #268]	@ (8000b64 <HAL_CAN_MspInit+0x12c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d136      	bne.n	8000ac8 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a5a:	4b43      	ldr	r3, [pc, #268]	@ (8000b68 <HAL_CAN_MspInit+0x130>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a41      	ldr	r2, [pc, #260]	@ (8000b68 <HAL_CAN_MspInit+0x130>)
 8000a62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a64:	4b40      	ldr	r3, [pc, #256]	@ (8000b68 <HAL_CAN_MspInit+0x130>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10d      	bne.n	8000a88 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
 8000a70:	4b3e      	ldr	r3, [pc, #248]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	4a3d      	ldr	r2, [pc, #244]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	4b37      	ldr	r3, [pc, #220]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a36      	ldr	r2, [pc, #216]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aa4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ab6:	2309      	movs	r3, #9
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482b      	ldr	r0, [pc, #172]	@ (8000b70 <HAL_CAN_MspInit+0x138>)
 8000ac2:	f000 fe57 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000ac6:	e048      	b.n	8000b5a <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a29      	ldr	r2, [pc, #164]	@ (8000b74 <HAL_CAN_MspInit+0x13c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d143      	bne.n	8000b5a <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b25      	ldr	r3, [pc, #148]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a24      	ldr	r2, [pc, #144]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000adc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	@ (8000b68 <HAL_CAN_MspInit+0x130>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	4a1c      	ldr	r2, [pc, #112]	@ (8000b68 <HAL_CAN_MspInit+0x130>)
 8000af6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <HAL_CAN_MspInit+0x130>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d10d      	bne.n	8000b1c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a18      	ldr	r2, [pc, #96]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_CAN_MspInit+0x134>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	f003 0302 	and.w	r3, r3, #2
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b38:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <HAL_CAN_MspInit+0x140>)
 8000b56:	f000 fe0d 	bl	8001774 <HAL_GPIO_Init>
}
 8000b5a:	bf00      	nop
 8000b5c:	3730      	adds	r7, #48	@ 0x30
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40006400 	.word	0x40006400
 8000b68:	200001a8 	.word	0x200001a8
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40006800 	.word	0x40006800
 8000b78:	40020400 	.word	0x40020400

08000b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	@ (8000c00 <HAL_SPI_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12b      	bne.n	8000bf6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba6:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000ba8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <HAL_SPI_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bd6:	23f0      	movs	r3, #240	@ 0xf0
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000be6:	2305      	movs	r3, #5
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <HAL_SPI_MspInit+0x8c>)
 8000bf2:	f000 fdbf 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	@ 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40013000 	.word	0x40013000
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	@ 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a32      	ldr	r2, [pc, #200]	@ (8000cf4 <HAL_UART_MspInit+0xe8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d12c      	bne.n	8000c88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
 8000c32:	4b31      	ldr	r3, [pc, #196]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a30      	ldr	r2, [pc, #192]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000c38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c46:	61bb      	str	r3, [r7, #24]
 8000c48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a29      	ldr	r2, [pc, #164]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c76:	2308      	movs	r3, #8
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481e      	ldr	r0, [pc, #120]	@ (8000cfc <HAL_UART_MspInit+0xf0>)
 8000c82:	f000 fd77 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c86:	e030      	b.n	8000cea <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000d00 <HAL_UART_MspInit+0xf4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d12b      	bne.n	8000cea <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	4a17      	ldr	r2, [pc, #92]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_UART_MspInit+0xec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cca:	230c      	movs	r3, #12
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <HAL_UART_MspInit+0xf0>)
 8000ce6:	f000 fd45 	bl	8001774 <HAL_GPIO_Init>
}
 8000cea:	bf00      	nop
 8000cec:	3730      	adds	r7, #48	@ 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004c00 	.word	0x40004c00
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40004400 	.word	0x40004400

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <NMI_Handler+0x4>

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f884 	bl	8000e60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000d6c:	f7ff fff6 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f001 fd07 	bl	80027a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fb89 	bl	80004b0 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dac:	08002830 	.word	0x08002830
  ldr r2, =_sbss
 8000db0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000db4:	200001b0 	.word	0x200001b0

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>
	...

08000dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dfc <HAL_Init+0x40>)
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_Init+0x40>)
 8000dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_Init+0x40>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_Init+0x40>)
 8000dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 fc91 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dea:	200f      	movs	r0, #15
 8000dec:	f000 f808 	bl	8000e00 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fdb8 	bl	8000964 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023c00 	.word	0x40023c00

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b12      	ldr	r3, [pc, #72]	@ (8000e54 <HAL_InitTick+0x54>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_InitTick+0x58>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4619      	mov	r1, r3
 8000e12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fc9b 	bl	800175a <HAL_SYSTICK_Config>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00e      	b.n	8000e4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b0f      	cmp	r3, #15
 8000e32:	d80a      	bhi.n	8000e4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e34:	2200      	movs	r2, #0
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f000 fc71 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e40:	4a06      	ldr	r2, [pc, #24]	@ (8000e5c <HAL_InitTick+0x5c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_IncTick+0x1c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	4a03      	ldr	r2, [pc, #12]	@ (8000e80 <HAL_IncTick+0x20>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200001ac 	.word	0x200001ac

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b02      	ldr	r3, [pc, #8]	@ (8000e94 <HAL_GetTick+0x10>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	200001ac 	.word	0x200001ac

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff fff0 	bl	8000e84 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffe0 	bl	8000e84 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d101      	bne.n	8000ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e033      	b.n	8000f5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d109      	bne.n	8000f12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fd56 	bl	80009b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d118      	bne.n	8000f50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f26:	f023 0302 	bic.w	r3, r3, #2
 8000f2a:	f043 0202 	orr.w	r2, r3, #2
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 f938 	bl	80011a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f023 0303 	bic.w	r3, r3, #3
 8000f46:	f043 0201 	orr.w	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f4e:	e001      	b.n	8000f54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1c>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e103      	b.n	800118c <HAL_ADC_ConfigChannel+0x224>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d925      	bls.n	8000fe0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68d9      	ldr	r1, [r3, #12]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3b1e      	subs	r3, #30
 8000faa:	2207      	movs	r2, #7
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43da      	mvns	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	400a      	ands	r2, r1
 8000fb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68d9      	ldr	r1, [r3, #12]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	4603      	mov	r3, r0
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4403      	add	r3, r0
 8000fd2:	3b1e      	subs	r3, #30
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	e022      	b.n	8001026 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6919      	ldr	r1, [r3, #16]
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	400a      	ands	r2, r1
 8001002:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6919      	ldr	r1, [r3, #16]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	4618      	mov	r0, r3
 8001016:	4603      	mov	r3, r0
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4403      	add	r3, r0
 800101c:	409a      	lsls	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b06      	cmp	r3, #6
 800102c:	d824      	bhi.n	8001078 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	3b05      	subs	r3, #5
 8001040:	221f      	movs	r2, #31
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	400a      	ands	r2, r1
 800104e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	3b05      	subs	r3, #5
 800106a:	fa00 f203 	lsl.w	r2, r0, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
 8001076:	e04c      	b.n	8001112 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d824      	bhi.n	80010ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	3b23      	subs	r3, #35	@ 0x23
 8001092:	221f      	movs	r2, #31
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43da      	mvns	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	400a      	ands	r2, r1
 80010a0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	3b23      	subs	r3, #35	@ 0x23
 80010bc:	fa00 f203 	lsl.w	r2, r0, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80010c8:	e023      	b.n	8001112 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	3b41      	subs	r3, #65	@ 0x41
 80010dc:	221f      	movs	r2, #31
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	400a      	ands	r2, r1
 80010ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4413      	add	r3, r2
 8001104:	3b41      	subs	r3, #65	@ 0x41
 8001106:	fa00 f203 	lsl.w	r2, r0, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a20      	ldr	r2, [pc, #128]	@ (8001198 <HAL_ADC_ConfigChannel+0x230>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d109      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1c8>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d105      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001124:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <HAL_ADC_ConfigChannel+0x234>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <HAL_ADC_ConfigChannel+0x234>)
 800112a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800112e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <HAL_ADC_ConfigChannel+0x230>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d123      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x21a>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b10      	cmp	r3, #16
 8001140:	d003      	beq.n	800114a <HAL_ADC_ConfigChannel+0x1e2>
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b11      	cmp	r3, #17
 8001148:	d11b      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <HAL_ADC_ConfigChannel+0x234>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a13      	ldr	r2, [pc, #76]	@ (800119c <HAL_ADC_ConfigChannel+0x234>)
 8001150:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001154:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b10      	cmp	r3, #16
 800115c:	d111      	bne.n	8001182 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <HAL_ADC_ConfigChannel+0x238>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <HAL_ADC_ConfigChannel+0x23c>)
 8001164:	fba2 2303 	umull	r2, r3, r2, r3
 8001168:	0c9a      	lsrs	r2, r3, #18
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001174:	e002      	b.n	800117c <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3b01      	subs	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40012000 	.word	0x40012000
 800119c:	40012300 	.word	0x40012300
 80011a0:	20000000 	.word	0x20000000
 80011a4:	431bde83 	.word	0x431bde83

080011a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80011b0:	4b7e      	ldr	r3, [pc, #504]	@ (80013ac <ADC_Init+0x204>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a7d      	ldr	r2, [pc, #500]	@ (80013ac <ADC_Init+0x204>)
 80011b6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80011ba:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80011bc:	4b7b      	ldr	r3, [pc, #492]	@ (80013ac <ADC_Init+0x204>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	4979      	ldr	r1, [pc, #484]	@ (80013ac <ADC_Init+0x204>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6859      	ldr	r1, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	021a      	lsls	r2, r3, #8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80011fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6859      	ldr	r1, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800121e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6899      	ldr	r1, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001236:	4a5e      	ldr	r2, [pc, #376]	@ (80013b0 <ADC_Init+0x208>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d022      	beq.n	8001282 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800124a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6899      	ldr	r1, [r3, #8]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800126c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6899      	ldr	r1, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	e00f      	b.n	80012a2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001290:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0202 	bic.w	r2, r2, #2
 80012b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6899      	ldr	r1, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7e1b      	ldrb	r3, [r3, #24]
 80012bc:	005a      	lsls	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d027      	beq.n	8001320 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80012ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	3b01      	subs	r3, #1
 80012f6:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80012fa:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	fa92 f2a2 	rbit	r2, r2
 8001302:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	fab2 f282 	clz	r2, r2
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	fa03 f102 	lsl.w	r1, r3, r2
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	e007      	b.n	8001330 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800132e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800133e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	3b01      	subs	r3, #1
 800134c:	051a      	lsls	r2, r3, #20
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001372:	025a      	lsls	r2, r3, #9
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800138a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6899      	ldr	r1, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	029a      	lsls	r2, r3, #10
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40012300 	.word	0x40012300
 80013b0:	0f000001 	.word	0x0f000001

080013b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0ed      	b.n	80015a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fb30 	bl	8000a38 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0201 	orr.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff fd4c 	bl	8000e84 <HAL_GetTick>
 80013ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ee:	e012      	b.n	8001416 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013f0:	f7ff fd48 	bl	8000e84 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b0a      	cmp	r3, #10
 80013fc:	d90b      	bls.n	8001416 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001402:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2205      	movs	r2, #5
 800140e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e0c5      	b.n	80015a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0e5      	beq.n	80013f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0202 	bic.w	r2, r2, #2
 8001432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001434:	f7ff fd26 	bl	8000e84 <HAL_GetTick>
 8001438:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800143a:	e012      	b.n	8001462 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800143c:	f7ff fd22 	bl	8000e84 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b0a      	cmp	r3, #10
 8001448:	d90b      	bls.n	8001462 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2205      	movs	r2, #5
 800145a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e09f      	b.n	80015a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1e5      	bne.n	800143c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7e1b      	ldrb	r3, [r3, #24]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d108      	bne.n	800148a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e007      	b.n	800149a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001498:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7e5b      	ldrb	r3, [r3, #25]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d108      	bne.n	80014b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e007      	b.n	80014c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7e9b      	ldrb	r3, [r3, #26]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d108      	bne.n	80014de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0220 	orr.w	r2, r2, #32
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	e007      	b.n	80014ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0220 	bic.w	r2, r2, #32
 80014ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7edb      	ldrb	r3, [r3, #27]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0210 	bic.w	r2, r2, #16
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	e007      	b.n	8001518 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0210 	orr.w	r2, r2, #16
 8001516:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7f1b      	ldrb	r3, [r3, #28]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d108      	bne.n	8001532 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0208 	orr.w	r2, r2, #8
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e007      	b.n	8001542 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0208 	bic.w	r2, r2, #8
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7f5b      	ldrb	r3, [r3, #29]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d108      	bne.n	800155c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0204 	orr.w	r2, r2, #4
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	e007      	b.n	800156c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0204 	bic.w	r2, r2, #4
 800156a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	ea42 0103 	orr.w	r1, r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015de:	4a04      	ldr	r2, [pc, #16]	@ (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	@ (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	@ (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	@ (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff90 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff49 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff5e 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff90 	bl	8001664 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5f 	bl	8001610 <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffb0 	bl	80016c8 <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e16f      	b.n	8001a64 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8161 	beq.w	8001a5e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d005      	beq.n	80017b4 <HAL_GPIO_Init+0x40>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d130      	bne.n	8001816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ea:	2201      	movs	r2, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	f003 0201 	and.w	r2, r3, #1
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b03      	cmp	r3, #3
 8001820:	d017      	beq.n	8001852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d123      	bne.n	80018a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	08da      	lsrs	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3208      	adds	r2, #8
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0203 	and.w	r2, r3, #3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80bb 	beq.w	8001a5e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	4b64      	ldr	r3, [pc, #400]	@ (8001a80 <HAL_GPIO_Init+0x30c>)
 80018ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f0:	4a63      	ldr	r2, [pc, #396]	@ (8001a80 <HAL_GPIO_Init+0x30c>)
 80018f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f8:	4b61      	ldr	r3, [pc, #388]	@ (8001a80 <HAL_GPIO_Init+0x30c>)
 80018fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001904:	4a5f      	ldr	r2, [pc, #380]	@ (8001a84 <HAL_GPIO_Init+0x310>)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a57      	ldr	r2, [pc, #348]	@ (8001a88 <HAL_GPIO_Init+0x314>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d031      	beq.n	8001994 <HAL_GPIO_Init+0x220>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a56      	ldr	r2, [pc, #344]	@ (8001a8c <HAL_GPIO_Init+0x318>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d02b      	beq.n	8001990 <HAL_GPIO_Init+0x21c>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a55      	ldr	r2, [pc, #340]	@ (8001a90 <HAL_GPIO_Init+0x31c>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d025      	beq.n	800198c <HAL_GPIO_Init+0x218>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a54      	ldr	r2, [pc, #336]	@ (8001a94 <HAL_GPIO_Init+0x320>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d01f      	beq.n	8001988 <HAL_GPIO_Init+0x214>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a53      	ldr	r2, [pc, #332]	@ (8001a98 <HAL_GPIO_Init+0x324>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d019      	beq.n	8001984 <HAL_GPIO_Init+0x210>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a52      	ldr	r2, [pc, #328]	@ (8001a9c <HAL_GPIO_Init+0x328>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d013      	beq.n	8001980 <HAL_GPIO_Init+0x20c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a51      	ldr	r2, [pc, #324]	@ (8001aa0 <HAL_GPIO_Init+0x32c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_GPIO_Init+0x208>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a50      	ldr	r2, [pc, #320]	@ (8001aa4 <HAL_GPIO_Init+0x330>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x204>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa8 <HAL_GPIO_Init+0x334>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_GPIO_Init+0x200>
 8001970:	2308      	movs	r3, #8
 8001972:	e010      	b.n	8001996 <HAL_GPIO_Init+0x222>
 8001974:	2309      	movs	r3, #9
 8001976:	e00e      	b.n	8001996 <HAL_GPIO_Init+0x222>
 8001978:	2307      	movs	r3, #7
 800197a:	e00c      	b.n	8001996 <HAL_GPIO_Init+0x222>
 800197c:	2306      	movs	r3, #6
 800197e:	e00a      	b.n	8001996 <HAL_GPIO_Init+0x222>
 8001980:	2305      	movs	r3, #5
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0x222>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x222>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x222>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x222>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x222>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a8:	4936      	ldr	r1, [pc, #216]	@ (8001a84 <HAL_GPIO_Init+0x310>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <HAL_GPIO_Init+0x338>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019da:	4a34      	ldr	r2, [pc, #208]	@ (8001aac <HAL_GPIO_Init+0x338>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <HAL_GPIO_Init+0x338>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a04:	4a29      	ldr	r2, [pc, #164]	@ (8001aac <HAL_GPIO_Init+0x338>)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a0a:	4b28      	ldr	r3, [pc, #160]	@ (8001aac <HAL_GPIO_Init+0x338>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	43db      	mvns	r3, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001aac <HAL_GPIO_Init+0x338>)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a34:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_GPIO_Init+0x338>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a58:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <HAL_GPIO_Init+0x338>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f47f ae88 	bne.w	8001784 <HAL_GPIO_Init+0x10>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020c00 	.word	0x40020c00
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40021400 	.word	0x40021400
 8001aa0:	40021800 	.word	0x40021800
 8001aa4:	40021c00 	.word	0x40021c00
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40013c00 	.word	0x40013c00

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001acc:	e003      	b.n	8001ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	619a      	str	r2, [r3, #24]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	@ 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e23b      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d050      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afe:	4b9e      	ldr	r3, [pc, #632]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d00c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0a:	4b9b      	ldr	r3, [pc, #620]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d112      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b98      	ldr	r3, [pc, #608]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b22:	d10b      	bne.n	8001b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	4b94      	ldr	r3, [pc, #592]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d036      	beq.n	8001b9e <HAL_RCC_OscConfig+0xbe>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d132      	bne.n	8001b9e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e216      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4b8e      	ldr	r3, [pc, #568]	@ (8001d7c <HAL_RCC_OscConfig+0x29c>)
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d013      	beq.n	8001b76 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4e:	f7ff f999 	bl	8000e84 <HAL_GetTick>
 8001b52:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b56:	f7ff f995 	bl	8000e84 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b64      	cmp	r3, #100	@ 0x64
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e200      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b68:	4b83      	ldr	r3, [pc, #524]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x76>
 8001b74:	e014      	b.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff f985 	bl	8000e84 <HAL_GetTick>
 8001b7a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7e:	f7ff f981 	bl	8000e84 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	@ 0x64
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1ec      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b90:	4b79      	ldr	r3, [pc, #484]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f0      	bne.n	8001b7e <HAL_RCC_OscConfig+0x9e>
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d077      	beq.n	8001c9c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bac:	4b72      	ldr	r3, [pc, #456]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 030c 	and.w	r3, r3, #12
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d126      	bne.n	8001c12 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d120      	bne.n	8001c12 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd0:	4b69      	ldr	r3, [pc, #420]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d005      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e1c0      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b63      	ldr	r3, [pc, #396]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	21f8      	movs	r1, #248	@ 0xf8
 8001bf6:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	69b9      	ldr	r1, [r7, #24]
 8001bfa:	fa91 f1a1 	rbit	r1, r1
 8001bfe:	6179      	str	r1, [r7, #20]
  return result;
 8001c00:	6979      	ldr	r1, [r7, #20]
 8001c02:	fab1 f181 	clz	r1, r1
 8001c06:	b2c9      	uxtb	r1, r1
 8001c08:	408b      	lsls	r3, r1
 8001c0a:	495b      	ldr	r1, [pc, #364]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c10:	e044      	b.n	8001c9c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d02a      	beq.n	8001c70 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1a:	4b59      	ldr	r3, [pc, #356]	@ (8001d80 <HAL_RCC_OscConfig+0x2a0>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f930 	bl	8000e84 <HAL_GetTick>
 8001c24:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff f92c 	bl	8000e84 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e197      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b4c      	ldr	r3, [pc, #304]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	21f8      	movs	r1, #248	@ 0xf8
 8001c54:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6939      	ldr	r1, [r7, #16]
 8001c58:	fa91 f1a1 	rbit	r1, r1
 8001c5c:	60f9      	str	r1, [r7, #12]
  return result;
 8001c5e:	68f9      	ldr	r1, [r7, #12]
 8001c60:	fab1 f181 	clz	r1, r1
 8001c64:	b2c9      	uxtb	r1, r1
 8001c66:	408b      	lsls	r3, r1
 8001c68:	4943      	ldr	r1, [pc, #268]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
 8001c6e:	e015      	b.n	8001c9c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c70:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <HAL_RCC_OscConfig+0x2a0>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff f905 	bl	8000e84 <HAL_GetTick>
 8001c7a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f901 	bl	8000e84 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e16c      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c90:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f0      	bne.n	8001c7e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d030      	beq.n	8001d0a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d016      	beq.n	8001cde <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb0:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <HAL_RCC_OscConfig+0x2a4>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f8e5 	bl	8000e84 <HAL_GetTick>
 8001cba:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cbe:	f7ff f8e1 	bl	8000e84 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e14c      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd0:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1de>
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b29      	ldr	r3, [pc, #164]	@ (8001d84 <HAL_RCC_OscConfig+0x2a4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f8ce 	bl	8000e84 <HAL_GetTick>
 8001ce8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff f8ca 	bl	8000e84 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e135      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8087 	beq.w	8001e26 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1e:	4b16      	ldr	r3, [pc, #88]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d110      	bne.n	8001d4c <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b12      	ldr	r3, [pc, #72]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <HAL_RCC_OscConfig+0x298>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_RCC_OscConfig+0x2a8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <HAL_RCC_OscConfig+0x2a8>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_RCC_OscConfig+0x2a8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d122      	bne.n	8001daa <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_RCC_OscConfig+0x2a8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <HAL_RCC_OscConfig+0x2a8>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d70:	f7ff f888 	bl	8000e84 <HAL_GetTick>
 8001d74:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	e012      	b.n	8001d9e <HAL_RCC_OscConfig+0x2be>
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40023802 	.word	0x40023802
 8001d80:	42470000 	.word	0x42470000
 8001d84:	42470e80 	.word	0x42470e80
 8001d88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8c:	f7ff f87a 	bl	8000e84 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0e5      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b75      	ldr	r3, [pc, #468]	@ (8001f74 <HAL_RCC_OscConfig+0x494>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	4b72      	ldr	r3, [pc, #456]	@ (8001f78 <HAL_RCC_OscConfig+0x498>)
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d015      	beq.n	8001de8 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f862 	bl	8000e84 <HAL_GetTick>
 8001dc0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc4:	f7ff f85e 	bl	8000e84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e0c7      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	4b68      	ldr	r3, [pc, #416]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0ee      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x2e4>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de8:	f7ff f84c 	bl	8000e84 <HAL_GetTick>
 8001dec:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f7ff f848 	bl	8000e84 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0b1      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	4b5d      	ldr	r3, [pc, #372]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ee      	bne.n	8001df0 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b58      	ldr	r3, [pc, #352]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 809c 	beq.w	8001f68 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e30:	4b52      	ldr	r3, [pc, #328]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d061      	beq.n	8001f00 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d146      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e44:	4b4e      	ldr	r3, [pc, #312]	@ (8001f80 <HAL_RCC_OscConfig+0x4a0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f81b 	bl	8000e84 <HAL_GetTick>
 8001e4e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f817 	bl	8000e84 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	@ 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e082      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e64:	4b45      	ldr	r3, [pc, #276]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e70:	4b42      	ldr	r3, [pc, #264]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4b43      	ldr	r3, [pc, #268]	@ (8001f84 <HAL_RCC_OscConfig+0x4a4>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	69d1      	ldr	r1, [r2, #28]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6a12      	ldr	r2, [r2, #32]
 8001e80:	4311      	orrs	r1, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e86:	0192      	lsls	r2, r2, #6
 8001e88:	4311      	orrs	r1, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e8e:	0612      	lsls	r2, r2, #24
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001e96:	0852      	lsrs	r2, r2, #1
 8001e98:	3a01      	subs	r2, #1
 8001e9a:	0412      	lsls	r2, r2, #16
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	4937      	ldr	r1, [pc, #220]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b36      	ldr	r3, [pc, #216]	@ (8001f80 <HAL_RCC_OscConfig+0x4a0>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7fe ffeb 	bl	8000e84 <HAL_GetTick>
 8001eae:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7fe ffe7 	bl	8000e84 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	@ 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e052      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x3d2>
 8001ed0:	e04a      	b.n	8001f68 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f80 <HAL_RCC_OscConfig+0x4a0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ffd4 	bl	8000e84 <HAL_GetTick>
 8001edc:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe ffd0 	bl	8000e84 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	@ 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e03b      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x400>
 8001efe:	e033      	b.n	8001f68 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e02e      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_RCC_OscConfig+0x49c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d121      	bne.n	8001f64 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d11a      	bne.n	8001f64 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f3a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d111      	bne.n	8001f64 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	085b      	lsrs	r3, r3, #1
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3728      	adds	r7, #40	@ 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40007000 	.word	0x40007000
 8001f78:	40023870 	.word	0x40023870
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	42470060 	.word	0x42470060
 8001f84:	f0bc8000 	.word	0xf0bc8000

08001f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0d2      	b.n	8002142 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d90c      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b68      	ldr	r3, [pc, #416]	@ (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b66      	ldr	r3, [pc, #408]	@ (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0be      	b.n	8002142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b5c      	ldr	r3, [pc, #368]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a5b      	ldr	r2, [pc, #364]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001ff4:	4b56      	ldr	r3, [pc, #344]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a55      	ldr	r2, [pc, #340]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ffe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4950      	ldr	r1, [pc, #320]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d040      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b4a      	ldr	r3, [pc, #296]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e085      	b.n	8002142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b44      	ldr	r3, [pc, #272]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e079      	b.n	8002142 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e071      	b.n	8002142 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b3c      	ldr	r3, [pc, #240]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4939      	ldr	r1, [pc, #228]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7fe ff08 	bl	8000e84 <HAL_GetTick>
 8002074:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7fe ff04 	bl	8000e84 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e059      	b.n	8002142 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d20c      	bcs.n	80020c8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b27      	ldr	r3, [pc, #156]	@ (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b25      	ldr	r3, [pc, #148]	@ (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e03c      	b.n	8002142 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	491b      	ldr	r1, [pc, #108]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f2:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4913      	ldr	r1, [pc, #76]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002106:	f000 f82b 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800210a:	4601      	mov	r1, r0
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002114:	22f0      	movs	r2, #240	@ 0xf0
 8002116:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	60fa      	str	r2, [r7, #12]
  return result;
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	fab2 f282 	clz	r2, r2
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	40d3      	lsrs	r3, r2
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_RCC_ClockConfig+0x1cc>)
 800212c:	5cd3      	ldrb	r3, [r2, r3]
 800212e:	fa21 f303 	lsr.w	r3, r1, r3
 8002132:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <HAL_RCC_ClockConfig+0x1d0>)
 8002134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_RCC_ClockConfig+0x1d4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fe60 	bl	8000e00 <HAL_InitTick>

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023c00 	.word	0x40023c00
 8002150:	40023800 	.word	0x40023800
 8002154:	08002808 	.word	0x08002808
 8002158:	20000000 	.word	0x20000000
 800215c:	20000004 	.word	0x20000004

08002160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002164:	b094      	sub	sp, #80	@ 0x50
 8002166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	647b      	str	r3, [r7, #68]	@ 0x44
 800216c:	2300      	movs	r3, #0
 800216e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002170:	2300      	movs	r3, #0
 8002172:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002178:	4b7c      	ldr	r3, [pc, #496]	@ (800236c <HAL_RCC_GetSysClockFreq+0x20c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b08      	cmp	r3, #8
 8002182:	d00d      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002184:	2b08      	cmp	r3, #8
 8002186:	f200 80e7 	bhi.w	8002358 <HAL_RCC_GetSysClockFreq+0x1f8>
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x34>
 800218e:	2b04      	cmp	r3, #4
 8002190:	d003      	beq.n	800219a <HAL_RCC_GetSysClockFreq+0x3a>
 8002192:	e0e1      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002194:	4b76      	ldr	r3, [pc, #472]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x210>)
 8002196:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002198:	e0e1      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800219a:	4b75      	ldr	r3, [pc, #468]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x210>)
 800219c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800219e:	e0de      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a0:	4b72      	ldr	r3, [pc, #456]	@ (800236c <HAL_RCC_GetSysClockFreq+0x20c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021aa:	4b70      	ldr	r3, [pc, #448]	@ (800236c <HAL_RCC_GetSysClockFreq+0x20c>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d065      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b6:	4b6d      	ldr	r3, [pc, #436]	@ (800236c <HAL_RCC_GetSysClockFreq+0x20c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	099b      	lsrs	r3, r3, #6
 80021bc:	2200      	movs	r2, #0
 80021be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80021ca:	2300      	movs	r3, #0
 80021cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80021ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021d2:	4622      	mov	r2, r4
 80021d4:	462b      	mov	r3, r5
 80021d6:	f04f 0000 	mov.w	r0, #0
 80021da:	f04f 0100 	mov.w	r1, #0
 80021de:	0159      	lsls	r1, r3, #5
 80021e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e4:	0150      	lsls	r0, r2, #5
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4621      	mov	r1, r4
 80021ec:	1a51      	subs	r1, r2, r1
 80021ee:	6139      	str	r1, [r7, #16]
 80021f0:	4629      	mov	r1, r5
 80021f2:	eb63 0301 	sbc.w	r3, r3, r1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002204:	4659      	mov	r1, fp
 8002206:	018b      	lsls	r3, r1, #6
 8002208:	4651      	mov	r1, sl
 800220a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800220e:	4651      	mov	r1, sl
 8002210:	018a      	lsls	r2, r1, #6
 8002212:	46d4      	mov	ip, sl
 8002214:	ebb2 080c 	subs.w	r8, r2, ip
 8002218:	4659      	mov	r1, fp
 800221a:	eb63 0901 	sbc.w	r9, r3, r1
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800222a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800222e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002232:	4690      	mov	r8, r2
 8002234:	4699      	mov	r9, r3
 8002236:	4623      	mov	r3, r4
 8002238:	eb18 0303 	adds.w	r3, r8, r3
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	462b      	mov	r3, r5
 8002240:	eb49 0303 	adc.w	r3, r9, r3
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002252:	4629      	mov	r1, r5
 8002254:	028b      	lsls	r3, r1, #10
 8002256:	4620      	mov	r0, r4
 8002258:	4629      	mov	r1, r5
 800225a:	4604      	mov	r4, r0
 800225c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002260:	4601      	mov	r1, r0
 8002262:	028a      	lsls	r2, r1, #10
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800226a:	2200      	movs	r2, #0
 800226c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800226e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002274:	f7fd ffa6 	bl	80001c4 <__aeabi_uldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4613      	mov	r3, r2
 800227e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002280:	e05c      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002282:	4b3a      	ldr	r3, [pc, #232]	@ (800236c <HAL_RCC_GetSysClockFreq+0x20c>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	2200      	movs	r2, #0
 800228a:	4618      	mov	r0, r3
 800228c:	4611      	mov	r1, r2
 800228e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
 8002298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800229c:	4642      	mov	r2, r8
 800229e:	464b      	mov	r3, r9
 80022a0:	f04f 0000 	mov.w	r0, #0
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	0159      	lsls	r1, r3, #5
 80022aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ae:	0150      	lsls	r0, r2, #5
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	46c4      	mov	ip, r8
 80022b6:	ebb2 0a0c 	subs.w	sl, r2, ip
 80022ba:	4640      	mov	r0, r8
 80022bc:	4649      	mov	r1, r9
 80022be:	468c      	mov	ip, r1
 80022c0:	eb63 0b0c 	sbc.w	fp, r3, ip
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022d8:	ebb2 040a 	subs.w	r4, r2, sl
 80022dc:	eb63 050b 	sbc.w	r5, r3, fp
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	00eb      	lsls	r3, r5, #3
 80022ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ee:	00e2      	lsls	r2, r4, #3
 80022f0:	4614      	mov	r4, r2
 80022f2:	461d      	mov	r5, r3
 80022f4:	4603      	mov	r3, r0
 80022f6:	18e3      	adds	r3, r4, r3
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	460b      	mov	r3, r1
 80022fc:	eb45 0303 	adc.w	r3, r5, r3
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800230e:	4629      	mov	r1, r5
 8002310:	028b      	lsls	r3, r1, #10
 8002312:	4620      	mov	r0, r4
 8002314:	4629      	mov	r1, r5
 8002316:	4604      	mov	r4, r0
 8002318:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800231c:	4601      	mov	r1, r0
 800231e:	028a      	lsls	r2, r1, #10
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002326:	2200      	movs	r2, #0
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	61fa      	str	r2, [r7, #28]
 800232c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002330:	f7fd ff48 	bl	80001c4 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4613      	mov	r3, r2
 800233a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_RCC_GetSysClockFreq+0x20c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	3301      	adds	r3, #1
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800234c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800234e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002356:	e002      	b.n	800235e <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002358:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x210>)
 800235a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800235c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002360:	4618      	mov	r0, r3
 8002362:	3750      	adds	r7, #80	@ 0x50
 8002364:	46bd      	mov	sp, r7
 8002366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	00f42400 	.word	0x00f42400

08002374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002378:	4b02      	ldr	r3, [pc, #8]	@ (8002384 <HAL_RCC_GetHCLKFreq+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	20000000 	.word	0x20000000

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800238e:	f7ff fff1 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 8002392:	4601      	mov	r1, r0
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800239c:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 80023a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	fa92 f2a2 	rbit	r2, r2
 80023a8:	603a      	str	r2, [r7, #0]
  return result;
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	fab2 f282 	clz	r2, r2
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	40d3      	lsrs	r3, r2
 80023b4:	4a04      	ldr	r2, [pc, #16]	@ (80023c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	08002818 	.word	0x08002818

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80023d2:	f7ff ffcf 	bl	8002374 <HAL_RCC_GetHCLKFreq>
 80023d6:	4601      	mov	r1, r0
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80023e0:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80023e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	fa92 f2a2 	rbit	r2, r2
 80023ec:	603a      	str	r2, [r7, #0]
  return result;
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	fab2 f282 	clz	r2, r2
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	40d3      	lsrs	r3, r2
 80023f8:	4a04      	ldr	r2, [pc, #16]	@ (800240c <HAL_RCC_GetPCLK2Freq+0x40>)
 80023fa:	5cd3      	ldrb	r3, [r2, r3]
 80023fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	08002818 	.word	0x08002818

08002410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e07b      	b.n	800251a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d108      	bne.n	800243c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002432:	d009      	beq.n	8002448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
 800243a:	e005      	b.n	8002448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fb8a 	bl	8000b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800247e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024cc:	ea42 0103 	orr.w	r1, r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	f003 0104 	and.w	r1, r3, #4
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	f003 0210 	and.w	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	69da      	ldr	r2, [r3, #28]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e042      	b.n	80025ba <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7fe fb5f 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2224      	movs	r2, #36	@ 0x24
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002564:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f82c 	bl	80025c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691a      	ldr	r2, [r3, #16]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800257a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800258a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800259a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2220      	movs	r2, #32
 80025ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002604:	f023 030c 	bic.w	r3, r3, #12
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	430b      	orrs	r3, r1
 8002610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699a      	ldr	r2, [r3, #24]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a57      	ldr	r2, [pc, #348]	@ (800278c <UART_SetConfig+0x1c8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d004      	beq.n	800263c <UART_SetConfig+0x78>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a56      	ldr	r2, [pc, #344]	@ (8002790 <UART_SetConfig+0x1cc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d103      	bne.n	8002644 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800263c:	f7ff fec6 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	e002      	b.n	800264a <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002644:	f7ff fea0 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002648:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002652:	d14c      	bne.n	80026ee <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009a      	lsls	r2, r3, #2
 800265e:	441a      	add	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <UART_SetConfig+0x1d0>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	0119      	lsls	r1, r3, #4
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009a      	lsls	r2, r3, #2
 800267e:	441a      	add	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fbb2 f2f3 	udiv	r2, r2, r3
 800268a:	4b42      	ldr	r3, [pc, #264]	@ (8002794 <UART_SetConfig+0x1d0>)
 800268c:	fba3 0302 	umull	r0, r3, r3, r2
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	2064      	movs	r0, #100	@ 0x64
 8002694:	fb00 f303 	mul.w	r3, r0, r3
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	3332      	adds	r3, #50	@ 0x32
 800269e:	4a3d      	ldr	r2, [pc, #244]	@ (8002794 <UART_SetConfig+0x1d0>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026ac:	4419      	add	r1, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	009a      	lsls	r2, r3, #2
 80026b8:	441a      	add	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c4:	4b33      	ldr	r3, [pc, #204]	@ (8002794 <UART_SetConfig+0x1d0>)
 80026c6:	fba3 0302 	umull	r0, r3, r3, r2
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2064      	movs	r0, #100	@ 0x64
 80026ce:	fb00 f303 	mul.w	r3, r0, r3
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	3332      	adds	r3, #50	@ 0x32
 80026d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002794 <UART_SetConfig+0x1d0>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	f003 0207 	and.w	r2, r3, #7
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	440a      	add	r2, r1
 80026ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026ec:	e04a      	b.n	8002784 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009a      	lsls	r2, r3, #2
 80026f8:	441a      	add	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	4a23      	ldr	r2, [pc, #140]	@ (8002794 <UART_SetConfig+0x1d0>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	0119      	lsls	r1, r3, #4
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fbb2 f2f3 	udiv	r2, r2, r3
 8002724:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <UART_SetConfig+0x1d0>)
 8002726:	fba3 0302 	umull	r0, r3, r3, r2
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2064      	movs	r0, #100	@ 0x64
 800272e:	fb00 f303 	mul.w	r3, r0, r3
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	3332      	adds	r3, #50	@ 0x32
 8002738:	4a16      	ldr	r2, [pc, #88]	@ (8002794 <UART_SetConfig+0x1d0>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002744:	4419      	add	r1, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009a      	lsls	r2, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fbb2 f2f3 	udiv	r2, r2, r3
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <UART_SetConfig+0x1d0>)
 800275e:	fba3 0302 	umull	r0, r3, r3, r2
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2064      	movs	r0, #100	@ 0x64
 8002766:	fb00 f303 	mul.w	r3, r0, r3
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	3332      	adds	r3, #50	@ 0x32
 8002770:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <UART_SetConfig+0x1d0>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	f003 020f 	and.w	r2, r3, #15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	440a      	add	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40011000 	.word	0x40011000
 8002790:	40011400 	.word	0x40011400
 8002794:	51eb851f 	.word	0x51eb851f

08002798 <memset>:
 8002798:	4603      	mov	r3, r0
 800279a:	4402      	add	r2, r0
 800279c:	4293      	cmp	r3, r2
 800279e:	d100      	bne.n	80027a2 <memset+0xa>
 80027a0:	4770      	bx	lr
 80027a2:	f803 1b01 	strb.w	r1, [r3], #1
 80027a6:	e7f9      	b.n	800279c <memset+0x4>

080027a8 <__libc_init_array>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	2600      	movs	r6, #0
 80027ac:	4d0c      	ldr	r5, [pc, #48]	@ (80027e0 <__libc_init_array+0x38>)
 80027ae:	4c0d      	ldr	r4, [pc, #52]	@ (80027e4 <__libc_init_array+0x3c>)
 80027b0:	1b64      	subs	r4, r4, r5
 80027b2:	10a4      	asrs	r4, r4, #2
 80027b4:	42a6      	cmp	r6, r4
 80027b6:	d109      	bne.n	80027cc <__libc_init_array+0x24>
 80027b8:	f000 f81a 	bl	80027f0 <_init>
 80027bc:	2600      	movs	r6, #0
 80027be:	4d0a      	ldr	r5, [pc, #40]	@ (80027e8 <__libc_init_array+0x40>)
 80027c0:	4c0a      	ldr	r4, [pc, #40]	@ (80027ec <__libc_init_array+0x44>)
 80027c2:	1b64      	subs	r4, r4, r5
 80027c4:	10a4      	asrs	r4, r4, #2
 80027c6:	42a6      	cmp	r6, r4
 80027c8:	d105      	bne.n	80027d6 <__libc_init_array+0x2e>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d0:	4798      	blx	r3
 80027d2:	3601      	adds	r6, #1
 80027d4:	e7ee      	b.n	80027b4 <__libc_init_array+0xc>
 80027d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027da:	4798      	blx	r3
 80027dc:	3601      	adds	r6, #1
 80027de:	e7f2      	b.n	80027c6 <__libc_init_array+0x1e>
 80027e0:	08002828 	.word	0x08002828
 80027e4:	08002828 	.word	0x08002828
 80027e8:	08002828 	.word	0x08002828
 80027ec:	0800282c 	.word	0x0800282c

080027f0 <_init>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	bf00      	nop
 80027f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f6:	bc08      	pop	{r3}
 80027f8:	469e      	mov	lr, r3
 80027fa:	4770      	bx	lr

080027fc <_fini>:
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fe:	bf00      	nop
 8002800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002802:	bc08      	pop	{r3}
 8002804:	469e      	mov	lr, r3
 8002806:	4770      	bx	lr
