
Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b4  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004638  08004638  00005638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d8  080046d8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080046e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  08004748  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08004748  000063a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001232a  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277f  00000000  00000000  000183bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0001ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d55  00000000  00000000  0001bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021654  00000000  00000000  0001c9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136d8  00000000  00000000  0003e001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8f73  00000000  00000000  000516d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a64c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f4c  00000000  00000000  0011a690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0011f5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000068 	.word	0x20000068
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08004620 	.word	0x08004620

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000006c 	.word	0x2000006c
 80001c0:	08004620 	.word	0x08004620

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <SPI1_DisableForGPIO>:
/**
 * @brief  Temporarily disable SPI1 to control MOSI pin as GPIO
 * @retval None
 */
void SPI1_DisableForGPIO(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
  // Disable SPI1
  __HAL_SPI_DISABLE(&hspi1);
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <SPI1_DisableForGPIO+0x48>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <SPI1_DisableForGPIO+0x48>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80004c4:	601a      	str	r2, [r3, #0]

  // Configure MOSI pin (PA7) as GPIO output
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	1d3b      	adds	r3, r7, #4
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_7;        // PA7 is SPI1_MOSI on most STM32F4 boards
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	2301      	movs	r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e0:	2302      	movs	r3, #2
 80004e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	4619      	mov	r1, r3
 80004e8:	4804      	ldr	r0, [pc, #16]	@ (80004fc <SPI1_DisableForGPIO+0x4c>)
 80004ea:	f001 fe95 	bl	8002218 <HAL_GPIO_Init>
}
 80004ee:	bf00      	nop
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	2000011c 	.word	0x2000011c
 80004fc:	40020000 	.word	0x40020000

08000500 <SPI1_RestoreFromGPIO>:
/**
 * @brief  Restore SPI1 configuration for normal operation
 * @retval None
 */
void SPI1_RestoreFromGPIO(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
  // Re-initialize SPI1 pins to their original function
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	1d3b      	adds	r3, r7, #4
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  // SCK pin (PA5)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000514:	2320      	movs	r3, #32
 8000516:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000518:	2302      	movs	r3, #2
 800051a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000520:	2303      	movs	r3, #3
 8000522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000524:	2305      	movs	r3, #5
 8000526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	4619      	mov	r1, r3
 800052c:	480e      	ldr	r0, [pc, #56]	@ (8000568 <SPI1_RestoreFromGPIO+0x68>)
 800052e:	f001 fe73 	bl	8002218 <HAL_GPIO_Init>

  // MISO pin (PA6)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000532:	2340      	movs	r3, #64	@ 0x40
 8000534:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	4619      	mov	r1, r3
 800053a:	480b      	ldr	r0, [pc, #44]	@ (8000568 <SPI1_RestoreFromGPIO+0x68>)
 800053c:	f001 fe6c 	bl	8002218 <HAL_GPIO_Init>

  // MOSI pin (PA7)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000540:	2380      	movs	r3, #128	@ 0x80
 8000542:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4619      	mov	r1, r3
 8000548:	4807      	ldr	r0, [pc, #28]	@ (8000568 <SPI1_RestoreFromGPIO+0x68>)
 800054a:	f001 fe65 	bl	8002218 <HAL_GPIO_Init>

  // Re-enable SPI1
  __HAL_SPI_ENABLE(&hspi1);
 800054e:	4b07      	ldr	r3, [pc, #28]	@ (800056c <SPI1_RestoreFromGPIO+0x6c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <SPI1_RestoreFromGPIO+0x6c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800055c:	601a      	str	r2, [r3, #0]
}
 800055e:	bf00      	nop
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40020000 	.word	0x40020000
 800056c:	2000011c 	.word	0x2000011c

08000570 <BQ79600_WakeUp>:
 * @param  need_double_wake: Set to true if device was previously shut down using SHUTDOWN ping
 * @retval HAL status
*/

HAL_StatusTypeDef BQ79600_WakeUp(uint8_t num_stacked_devices, bool need_double_wake)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	460a      	mov	r2, r1
 800057a:	71fb      	strb	r3, [r7, #7]
 800057c:	4613      	mov	r3, r2
 800057e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint8_t tx_data[7];
  uint32_t timeout;

  // 1. Send WAKE ping - begin by disabling SPI to control NSS and MOSI directly
  SPI1_DisableForGPIO();
 8000580:	f7ff ff96 	bl	80004b0 <SPI1_DisableForGPIO>

  // Configure NSS pin (PA4) as GPIO output
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_4;  // NSS pin
 8000594:	2310      	movs	r3, #16
 8000596:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	4619      	mov	r1, r3
 80005aa:	4853      	ldr	r0, [pc, #332]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 80005ac:	f001 fe34 	bl	8002218 <HAL_GPIO_Init>

  // If device was shut down with SHUTDOWN ping, we need two WAKE pings
  if (need_double_wake) {
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d021      	beq.n	80005fa <BQ79600_WakeUp+0x8a>
    // First WAKE ping
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 80005b6:	2200      	movs	r2, #0
 80005b8:	2110      	movs	r1, #16
 80005ba:	484f      	ldr	r0, [pc, #316]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 80005bc:	f001 ffe1 	bl	8002582 <HAL_GPIO_WritePin>
    Delay_us(2);  // Wait 2us
 80005c0:	2002      	movs	r0, #2
 80005c2:	f000 fba1 	bl	8000d08 <Delay_us>

    // Pull MOSI low for 2.75ms (tHLD_WAKE)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	484b      	ldr	r0, [pc, #300]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 80005cc:	f001 ffd9 	bl	8002582 <HAL_GPIO_WritePin>
    Delay_us(BQ79600_WAKE_PING_TIME_US);  // 2.75ms
 80005d0:	f640 20be 	movw	r0, #2750	@ 0xabe
 80005d4:	f000 fb98 	bl	8000d08 <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2180      	movs	r1, #128	@ 0x80
 80005dc:	4846      	ldr	r0, [pc, #280]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 80005de:	f001 ffd0 	bl	8002582 <HAL_GPIO_WritePin>

    Delay_us(2);  // Wait 2us
 80005e2:	2002      	movs	r0, #2
 80005e4:	f000 fb90 	bl	8000d08 <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Bring nCS back high
 80005e8:	2201      	movs	r2, #1
 80005ea:	2110      	movs	r1, #16
 80005ec:	4842      	ldr	r0, [pc, #264]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 80005ee:	f001 ffc8 	bl	8002582 <HAL_GPIO_WritePin>

    // Wait for first wake ping to process (3.5ms)
    Delay_us(BQ79600_WAKE_SETUP_TIME_US);  // 3.5ms
 80005f2:	f640 50ac 	movw	r0, #3500	@ 0xdac
 80005f6:	f000 fb87 	bl	8000d08 <Delay_us>
  }

  // Send (second) WAKE ping
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 80005fa:	2200      	movs	r2, #0
 80005fc:	2110      	movs	r1, #16
 80005fe:	483e      	ldr	r0, [pc, #248]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 8000600:	f001 ffbf 	bl	8002582 <HAL_GPIO_WritePin>
  Delay_us(2);  // Wait 2us
 8000604:	2002      	movs	r0, #2
 8000606:	f000 fb7f 	bl	8000d08 <Delay_us>

  // Pull MOSI low for 2.75ms (tHLD_WAKE)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	483a      	ldr	r0, [pc, #232]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 8000610:	f001 ffb7 	bl	8002582 <HAL_GPIO_WritePin>
  Delay_us(BQ79600_WAKE_PING_TIME_US);  // 2.75ms
 8000614:	f640 20be 	movw	r0, #2750	@ 0xabe
 8000618:	f000 fb76 	bl	8000d08 <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2180      	movs	r1, #128	@ 0x80
 8000620:	4835      	ldr	r0, [pc, #212]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 8000622:	f001 ffae 	bl	8002582 <HAL_GPIO_WritePin>

  Delay_us(2);  // Wait 2us
 8000626:	2002      	movs	r0, #2
 8000628:	f000 fb6e 	bl	8000d08 <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Bring nCS back high
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4831      	ldr	r0, [pc, #196]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 8000632:	f001 ffa6 	bl	8002582 <HAL_GPIO_WritePin>

  // Restore SPI configuration
  SPI1_RestoreFromGPIO();
 8000636:	f7ff ff63 	bl	8000500 <SPI1_RestoreFromGPIO>

  // 2. Wait for tSU(WAKE_SHUT) to allow BQ79600-Q1 to enter ACTIVE mode (3.5ms)
  HAL_Delay(4);
 800063a:	2004      	movs	r0, #4
 800063c:	f000 fee4 	bl	8001408 <HAL_Delay>

  // 4. Send a single device write to set CONTROL1[SEND_WAKE]=1, which wakes up all stacked devices
  tx_data[0] = 0x90;  // Single device 1 byte write
 8000640:	2390      	movs	r3, #144	@ 0x90
 8000642:	773b      	strb	r3, [r7, #28]
  tx_data[1] = 0x00;  // Device address
 8000644:	2300      	movs	r3, #0
 8000646:	777b      	strb	r3, [r7, #29]
  tx_data[2] = 0x03;  // MSB register address
 8000648:	2303      	movs	r3, #3
 800064a:	77bb      	strb	r3, [r7, #30]
  tx_data[3] = 0x09;  // LSB register address
 800064c:	2309      	movs	r3, #9
 800064e:	77fb      	strb	r3, [r7, #31]
  tx_data[4] = 0x20;  // 00100000 (enable SEND_WAKE)
 8000650:	2320      	movs	r3, #32
 8000652:	f887 3020 	strb.w	r3, [r7, #32]
  tx_data[5] = 0x13;
 8000656:	2313      	movs	r3, #19
 8000658:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  tx_data[6] = 0x95;
 800065c:	2395      	movs	r3, #149	@ 0x95
 800065e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  // 3. Check if SPI_READY is high, with timeout
  timeout = HAL_GetTick() + 100;  // 100ms timeout
 8000662:	f000 fec7 	bl	80013f4 <HAL_GetTick>
 8000666:	4603      	mov	r3, r0
 8000668:	3364      	adds	r3, #100	@ 0x64
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 800066c:	e00a      	b.n	8000684 <BQ79600_WakeUp+0x114>
    if (HAL_GetTick() >= timeout) {
 800066e:	f000 fec1 	bl	80013f4 <HAL_GetTick>
 8000672:	4602      	mov	r2, r0
 8000674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000676:	4293      	cmp	r3, r2
 8000678:	d801      	bhi.n	800067e <BQ79600_WakeUp+0x10e>
      return HAL_TIMEOUT;
 800067a:	2303      	movs	r3, #3
 800067c:	e038      	b.n	80006f0 <BQ79600_WakeUp+0x180>
    }
    Delay_us(100);
 800067e:	2064      	movs	r0, #100	@ 0x64
 8000680:	f000 fb42 	bl	8000d08 <Delay_us>
  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 8000684:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000688:	481c      	ldr	r0, [pc, #112]	@ (80006fc <BQ79600_WakeUp+0x18c>)
 800068a:	f001 ff63 	bl	8002554 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b01      	cmp	r3, #1
 8000692:	d1ec      	bne.n	800066e <BQ79600_WakeUp+0xfe>
  }

  Delay_us(0.5);
 8000694:	2000      	movs	r0, #0
 8000696:	f000 fb37 	bl	8000d08 <Delay_us>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2110      	movs	r1, #16
 800069e:	4816      	ldr	r0, [pc, #88]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 80006a0:	f001 ff6f 	bl	8002582 <HAL_GPIO_WritePin>

  Delay_us(0.5); //t9
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 fb2f 	bl	8000d08 <Delay_us>

  // Send the command
  status = HAL_SPI_Transmit(&hspi1, tx_data, 7, 100);
 80006aa:	f107 011c 	add.w	r1, r7, #28
 80006ae:	2364      	movs	r3, #100	@ 0x64
 80006b0:	2207      	movs	r2, #7
 80006b2:	4813      	ldr	r0, [pc, #76]	@ (8000700 <BQ79600_WakeUp+0x190>)
 80006b4:	f002 fc9f 	bl	8002ff6 <HAL_SPI_Transmit>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  // Pull nCS high
  Delay_us(0.5); //t10
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fb22 	bl	8000d08 <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	480b      	ldr	r0, [pc, #44]	@ (80006f8 <BQ79600_WakeUp+0x188>)
 80006ca:	f001 ff5a 	bl	8002582 <HAL_GPIO_WritePin>

  if (status != HAL_OK) {
 80006ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <BQ79600_WakeUp+0x16c>
    return status;
 80006d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80006da:	e009      	b.n	80006f0 <BQ79600_WakeUp+0x180>
  }

  // 5. Wait for appropriate time for all devices to wake up
  // WAKE tone (~1.6ms) + time to enter ACTIVE mode (~10ms) * number of stacked devices
  uint32_t wait_time_us = ((BQ79600_WAKE_TONE_TIME_US + BQ79600_ACTIVE_MODE_TIME_US) * num_stacked_devices);
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f642 5250 	movw	r2, #11600	@ 0x2d50
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	627b      	str	r3, [r7, #36]	@ 0x24

  // Wait using HAL_Delay
  Delay_us(wait_time_us);
 80006e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80006ea:	f000 fb0d 	bl	8000d08 <Delay_us>

  return HAL_OK;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3730      	adds	r7, #48	@ 0x30
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40020000 	.word	0x40020000
 80006fc:	40020400 	.word	0x40020400
 8000700:	2000011c 	.word	0x2000011c

08000704 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800070c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000710:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	2b00      	cmp	r3, #0
 800071a:	d013      	beq.n	8000744 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800071c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000720:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000724:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00b      	beq.n	8000744 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800072c:	e000      	b.n	8000730 <ITM_SendChar+0x2c>
    {
      __NOP();
 800072e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000730:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d0f9      	beq.n	800072e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800073a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000744:	687b      	ldr	r3, [r7, #4]
}
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <_write>:
void Delay_us(uint32_t us);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  int i = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  for(i = 0; i<len; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	e009      	b.n	800077a <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	1c5a      	adds	r2, r3, #1
 800076a:	60ba      	str	r2, [r7, #8]
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff ffc8 	bl	8000704 <ITM_SendChar>
  for(i = 0; i<len; i++)
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	3301      	adds	r3, #1
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	429a      	cmp	r2, r3
 8000780:	dbf1      	blt.n	8000766 <_write+0x16>
  return len;
 8000782:	687b      	ldr	r3, [r7, #4]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 fdcb 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f83d 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800079a:	f000 fa15 	bl	8000bc8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800079e:	f000 f8d1 	bl	8000944 <MX_CAN1_Init>
  MX_CAN2_Init();
 80007a2:	f000 f905 	bl	80009b0 <MX_CAN2_Init>
  // MX_SDIO_SD_Init();
  MX_SPI1_Init();
 80007a6:	f000 f937 	bl	8000a18 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80007aa:	f000 f9e3 	bl	8000b74 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80007ae:	f000 f9b7 	bl	8000b20 <MX_UART4_Init>
  MX_ADC1_Init();
 80007b2:	f000 f875 	bl	80008a0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80007b6:	f000 f965 	bl	8000a84 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80007ba:	4810      	ldr	r0, [pc, #64]	@ (80007fc <main+0x70>)
 80007bc:	f001 f9ad 	bl	8001b1a <HAL_CAN_Start>
  HAL_TIM_Base_Start(&htim4);
 80007c0:	480f      	ldr	r0, [pc, #60]	@ (8000800 <main+0x74>)
 80007c2:	f002 fe65 	bl	8003490 <HAL_TIM_Base_Start>

  printf("BQ79600 Battery Monitor System Starting...\r\n");
 80007c6:	480f      	ldr	r0, [pc, #60]	@ (8000804 <main+0x78>)
 80007c8:	f003 fb9c 	bl	8003f04 <puts>
  // Initialize the BQ79600 with 1 stacked device (BQ79616)
  //HAL_StatusTypeDef status;

  // Step 2: Wake up and initialize the BQ79600 and BQ79616

  printf("Waking up BQ79600...\r\n");
 80007cc:	480e      	ldr	r0, [pc, #56]	@ (8000808 <main+0x7c>)
 80007ce:	f003 fb99 	bl	8003f04 <puts>
  //void SpiWake79600(void);
  bool wake = false;
 80007d2:	2300      	movs	r3, #0
 80007d4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status;
  status = BQ79600_WakeUp(2,wake);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4619      	mov	r1, r3
 80007da:	2002      	movs	r0, #2
 80007dc:	f7ff fec8 	bl	8000570 <BQ79600_WakeUp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71bb      	strb	r3, [r7, #6]
  if(status == HAL_OK){
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d102      	bne.n	80007f0 <main+0x64>
	  printf("Wake GOOD\r\n");
 80007ea:	4808      	ldr	r0, [pc, #32]	@ (800080c <main+0x80>)
 80007ec:	f003 fb8a 	bl	8003f04 <puts>
    printf("Fault Comm1: 0x%02X\r\n", fault_comm1);
    printf("Fault Comm2: 0x%02X\r\n", fault_comm2);
	*/


  printf("Initialization complete, starting main loop...\r\n");
 80007f0:	4807      	ldr	r0, [pc, #28]	@ (8000810 <main+0x84>)
 80007f2:	f003 fb87 	bl	8003f04 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f6:	bf00      	nop
 80007f8:	e7fd      	b.n	80007f6 <main+0x6a>
 80007fa:	bf00      	nop
 80007fc:	200000cc 	.word	0x200000cc
 8000800:	20000174 	.word	0x20000174
 8000804:	08004638 	.word	0x08004638
 8000808:	08004664 	.word	0x08004664
 800080c:	0800467c 	.word	0x0800467c
 8000810:	08004688 	.word	0x08004688

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b092      	sub	sp, #72	@ 0x48
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2230      	movs	r2, #48	@ 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fc4e 	bl	80040c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000836:	2301      	movs	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000848:	230d      	movs	r3, #13
 800084a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 800084c:	23c3      	movs	r3, #195	@ 0xc3
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000854:	2305      	movs	r3, #5
 8000856:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fea9 	bl	80025b4 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000868:	f000 fa66 	bl	8000d38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000878:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000882:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2103      	movs	r1, #3
 8000888:	4618      	mov	r0, r3
 800088a:	f002 f8e7 	bl	8002a5c <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000894:	f000 fa50 	bl	8000d38 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3748      	adds	r7, #72	@ 0x48
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	463b      	mov	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008b4:	4a21      	ldr	r2, [pc, #132]	@ (800093c <MX_ADC1_Init+0x9c>)
 80008b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d8:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008de:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008e0:	4a17      	ldr	r2, [pc, #92]	@ (8000940 <MX_ADC1_Init+0xa0>)
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008ea:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_ADC1_Init+0x98>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_ADC1_Init+0x98>)
 8000900:	f000 fda6 	bl	8001450 <HAL_ADC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 fa15 	bl	8000d38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800090e:	230b      	movs	r3, #11
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_ADC1_Init+0x98>)
 8000920:	f000 fdda 	bl	80014d8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800092a:	f000 fa05 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000084 	.word	0x20000084
 800093c:	40012000 	.word	0x40012000
 8000940:	0f000001 	.word	0x0f000001

08000944 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800094a:	4a18      	ldr	r2, [pc, #96]	@ (80009ac <MX_CAN1_Init+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 800094e:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000950:	220f      	movs	r2, #15
 8000952:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000962:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000966:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_CAN1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_CAN1_Init+0x64>)
 8000994:	f000 ffc6 	bl	8001924 <HAL_CAN_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800099e:	f000 f9cb 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000cc 	.word	0x200000cc
 80009ac:	40006400 	.word	0x40006400

080009b0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <MX_CAN2_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009bc:	220a      	movs	r2, #10
 80009be:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80009c6:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80009cc:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80009f0:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	@ (8000a10 <MX_CAN2_Init+0x60>)
 80009fe:	f000 ff91 	bl	8001924 <HAL_CAN_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 f996 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000f4 	.word	0x200000f4
 8000a14:	40006800 	.word	0x40006800

08000a18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a1e:	4a18      	ldr	r2, [pc, #96]	@ (8000a80 <MX_SPI1_Init+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; // 60MHz/16 = 3.75MHz
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a4c:	2218      	movs	r2, #24
 8000a4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a64:	220a      	movs	r2, #10
 8000a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_SPI1_Init+0x64>)
 8000a6a:	f002 fa3b 	bl	8002ee4 <HAL_SPI_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a74:	f000 f960 	bl	8000d38 <Error_Handler>
  }
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000011c 	.word	0x2000011c
 8000a80:	40013000 	.word	0x40013000

08000a84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b1c <MX_TIM4_Init+0x98>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000aa8:	223c      	movs	r2, #60	@ 0x3c
 8000aaa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ab8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ac6:	4814      	ldr	r0, [pc, #80]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000ac8:	f002 fc93 	bl	80033f2 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 f931 	bl	8000d38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480d      	ldr	r0, [pc, #52]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000ae4:	f002 fd3a 	bl	800355c <HAL_TIM_ConfigClockSource>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000aee:	f000 f923 	bl	8000d38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000afa:	463b      	mov	r3, r7
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <MX_TIM4_Init+0x94>)
 8000b00:	f002 ff34 	bl	800396c <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b0a:	f000 f915 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000174 	.word	0x20000174
 8000b1c:	40000800 	.word	0x40000800

08000b20 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <MX_UART4_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b44:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b50:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_UART4_Init+0x4c>)
 8000b58:	f002 ff82 	bl	8003a60 <HAL_UART_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b62:	f000 f8e9 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001bc 	.word	0x200001bc
 8000b70:	40004c00 	.word	0x40004c00

08000b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <MX_USART2_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000bac:	f002 ff58 	bl	8003a60 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f8bf 	bl	8000d38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000204 	.word	0x20000204
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	4b45      	ldr	r3, [pc, #276]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a44      	ldr	r2, [pc, #272]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	4b37      	ldr	r3, [pc, #220]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a36      	ldr	r2, [pc, #216]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
 8000c52:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a28      	ldr	r2, [pc, #160]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <MX_GPIO_Init+0x130>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2134      	movs	r1, #52	@ 0x34
 8000c6e:	4823      	ldr	r0, [pc, #140]	@ (8000cfc <MX_GPIO_Init+0x134>)
 8000c70:	f001 fc87 	bl	8002582 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f240 4101 	movw	r1, #1025	@ 0x401
 8000c7a:	4821      	ldr	r0, [pc, #132]	@ (8000d00 <MX_GPIO_Init+0x138>)
 8000c7c:	f001 fc81 	bl	8002582 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 CHARGE_EN_LV_Pin DISCHARGE_EN_LV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin;
 8000c80:	2334      	movs	r3, #52	@ 0x34
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4819      	ldr	r0, [pc, #100]	@ (8000cfc <MX_GPIO_Init+0x134>)
 8000c98:	f001 fabe 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_SAFE_LV_Pin FAN_EN_LV_Pin */
  GPIO_InitStruct.Pin = CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin;
 8000c9c:	f240 4301 	movw	r3, #1025	@ 0x401
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4812      	ldr	r0, [pc, #72]	@ (8000d00 <MX_GPIO_Init+0x138>)
 8000cb6:	f001 faaf 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_PWR_LV_ISO_Pin READY_PWR_LV_ISO_Pin BQ_NFAULT_Pin BQ_SPI_RDY_Pin */
  GPIO_InitStruct.Pin = CHARGE_PWR_LV_ISO_Pin|READY_PWR_LV_ISO_Pin|BQ_NFAULT_Pin|BQ_SPI_RDY_Pin;
 8000cba:	f644 0306 	movw	r3, #18438	@ 0x4806
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <MX_GPIO_Init+0x138>)
 8000cd0:	f001 faa2 	bl	8002218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DET_Pin */
  GPIO_InitStruct.Pin = SDIO_DET_Pin;
 8000cd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <MX_GPIO_Init+0x13c>)
 8000cea:	f001 fa95 	bl	8002218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	@ 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40020000 	.word	0x40020000

08000d08 <Delay_us>:
 * @param  us: Number of microseconds to delay
 * @retval None
 * @note   This is a placeholder - implement using a timer peripheral
 */
void Delay_us(uint32_t us)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <Delay_us+0x2c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8000d18:	bf00      	nop
 8000d1a:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <Delay_us+0x2c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d8f9      	bhi.n	8000d1a <Delay_us+0x12>
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000174 	.word	0x20000174

08000d38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <Error_Handler+0x8>

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <HAL_MspInit+0x48>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	4a0e      	ldr	r2, [pc, #56]	@ (8000d8c <HAL_MspInit+0x48>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <HAL_MspInit+0x48>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <HAL_MspInit+0x48>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <HAL_MspInit+0x48>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d76:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <HAL_MspInit+0x48>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_ADC_MspInit+0x7c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d127      	bne.n	8000e02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	4a15      	ldr	r2, [pc, #84]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc2:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <HAL_ADC_MspInit+0x80>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dea:	2302      	movs	r3, #2
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dee:	2303      	movs	r3, #3
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <HAL_ADC_MspInit+0x84>)
 8000dfe:	f001 fa0b 	bl	8002218 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40012000 	.word	0x40012000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020800 	.word	0x40020800

08000e18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a4b      	ldr	r2, [pc, #300]	@ (8000f64 <HAL_CAN_MspInit+0x14c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d13e      	bne.n	8000eb8 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f68 <HAL_CAN_MspInit+0x150>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a49      	ldr	r2, [pc, #292]	@ (8000f68 <HAL_CAN_MspInit+0x150>)
 8000e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000e44:	4b48      	ldr	r3, [pc, #288]	@ (8000f68 <HAL_CAN_MspInit+0x150>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d10d      	bne.n	8000e68 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	4b46      	ldr	r3, [pc, #280]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	4a45      	ldr	r2, [pc, #276]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000e56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e5c:	4b43      	ldr	r3, [pc, #268]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e64:	61bb      	str	r3, [r7, #24]
 8000e66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e70:	4a3e      	ldr	r2, [pc, #248]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e78:	4b3c      	ldr	r3, [pc, #240]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e96:	2309      	movs	r3, #9
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4833      	ldr	r0, [pc, #204]	@ (8000f70 <HAL_CAN_MspInit+0x158>)
 8000ea2:	f001 f9b9 	bl	8002218 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2014      	movs	r0, #20
 8000eac:	f001 f97d 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000eb0:	2014      	movs	r0, #20
 8000eb2:	f001 f996 	bl	80021e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000eb6:	e050      	b.n	8000f5a <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8000f74 <HAL_CAN_MspInit+0x15c>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d14b      	bne.n	8000f5a <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b29      	ldr	r3, [pc, #164]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	4a28      	ldr	r2, [pc, #160]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed2:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <HAL_CAN_MspInit+0x150>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a20      	ldr	r2, [pc, #128]	@ (8000f68 <HAL_CAN_MspInit+0x150>)
 8000ee6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <HAL_CAN_MspInit+0x150>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d10d      	bne.n	8000f0c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000efa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <HAL_CAN_MspInit+0x154>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f28:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000f3a:	2309      	movs	r3, #9
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <HAL_CAN_MspInit+0x160>)
 8000f46:	f001 f967 	bl	8002218 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2040      	movs	r0, #64	@ 0x40
 8000f50:	f001 f92b 	bl	80021aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000f54:	2040      	movs	r0, #64	@ 0x40
 8000f56:	f001 f944 	bl	80021e2 <HAL_NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3730      	adds	r7, #48	@ 0x30
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40006400 	.word	0x40006400
 8000f68:	2000024c 	.word	0x2000024c
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40006800 	.word	0x40006800
 8000f78:	40020400 	.word	0x40020400

08000f7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a19      	ldr	r2, [pc, #100]	@ (8001000 <HAL_SPI_MspInit+0x84>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12b      	bne.n	8000ff6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa6:	4a17      	ldr	r2, [pc, #92]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fa8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a10      	ldr	r2, [pc, #64]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_SPI_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fd6:	23f0      	movs	r3, #240	@ 0xf0
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	@ (8001008 <HAL_SPI_MspInit+0x8c>)
 8000ff2:	f001 f911 	bl	8002218 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	@ 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40013000 	.word	0x40013000
 8001004:	40023800 	.word	0x40023800
 8001008:	40020000 	.word	0x40020000

0800100c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <HAL_TIM_Base_MspInit+0x38>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10d      	bne.n	800103a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <HAL_TIM_Base_MspInit+0x3c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	@ (8001048 <HAL_TIM_Base_MspInit+0x3c>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_TIM_Base_MspInit+0x3c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40000800 	.word	0x40000800
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	@ 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a32      	ldr	r2, [pc, #200]	@ (8001134 <HAL_UART_MspInit+0xe8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12c      	bne.n	80010c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	4b31      	ldr	r3, [pc, #196]	@ (8001138 <HAL_UART_MspInit+0xec>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a30      	ldr	r2, [pc, #192]	@ (8001138 <HAL_UART_MspInit+0xec>)
 8001078:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <HAL_UART_MspInit+0xec>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	4b2a      	ldr	r3, [pc, #168]	@ (8001138 <HAL_UART_MspInit+0xec>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	4a29      	ldr	r2, [pc, #164]	@ (8001138 <HAL_UART_MspInit+0xec>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	@ 0x30
 800109a:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <HAL_UART_MspInit+0xec>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010a6:	2303      	movs	r3, #3
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010b6:	2308      	movs	r3, #8
 80010b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	481e      	ldr	r0, [pc, #120]	@ (800113c <HAL_UART_MspInit+0xf0>)
 80010c2:	f001 f8a9 	bl	8002218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010c6:	e030      	b.n	800112a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <HAL_UART_MspInit+0xf4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d12b      	bne.n	800112a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <HAL_UART_MspInit+0xec>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <HAL_UART_MspInit+0xec>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b15      	ldr	r3, [pc, #84]	@ (8001138 <HAL_UART_MspInit+0xec>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b11      	ldr	r3, [pc, #68]	@ (8001138 <HAL_UART_MspInit+0xec>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a10      	ldr	r2, [pc, #64]	@ (8001138 <HAL_UART_MspInit+0xec>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <HAL_UART_MspInit+0xec>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800110a:	230c      	movs	r3, #12
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111a:	2307      	movs	r3, #7
 800111c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <HAL_UART_MspInit+0xf0>)
 8001126:	f001 f877 	bl	8002218 <HAL_GPIO_Init>
}
 800112a:	bf00      	nop
 800112c:	3730      	adds	r7, #48	@ 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40004c00 	.word	0x40004c00
 8001138:	40023800 	.word	0x40023800
 800113c:	40020000 	.word	0x40020000
 8001140:	40004400 	.word	0x40004400

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <NMI_Handler+0x4>

0800114c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <HardFault_Handler+0x4>

08001154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <MemManage_Handler+0x4>

0800115c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <UsageFault_Handler+0x4>

0800116c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 f91c 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <CAN1_RX0_IRQHandler+0x10>)
 80011a2:	f000 fcfe 	bl	8001ba2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200000cc 	.word	0x200000cc

080011b0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <CAN2_RX0_IRQHandler+0x10>)
 80011b6:	f000 fcf4 	bl	8001ba2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000f4 	.word	0x200000f4

080011c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	e00a      	b.n	80011ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d6:	f3af 8000 	nop.w
 80011da:	4601      	mov	r1, r0
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	60ba      	str	r2, [r7, #8]
 80011e2:	b2ca      	uxtb	r2, r1
 80011e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf0      	blt.n	80011d6 <_read+0x12>
  }

  return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_close>:
  }
  return len;
}

int _close(int file)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001224:	605a      	str	r2, [r3, #4]
  return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <_isatty>:

int _isatty(int file)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f002 ff66 	bl	8004160 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000c000 	.word	0x2000c000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	20000250 	.word	0x20000250
 80012c8:	200003a8 	.word	0x200003a8

080012cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001310 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80012dc:	f7ff fff6 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	@ (8001318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001306:	f002 ff31 	bl	800416c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800130a:	f7ff fa3f 	bl	800078c <main>
  bx  lr    
 800130e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001310:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800131c:	080046e0 	.word	0x080046e0
  ldr r2, =_sbss
 8001320:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001324:	200003a4 	.word	0x200003a4

08001328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001330:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <HAL_Init+0x40>)
 8001336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800133a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_Init+0x40>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <HAL_Init+0x40>)
 8001342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a07      	ldr	r2, [pc, #28]	@ (800136c <HAL_Init+0x40>)
 800134e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 ff1d 	bl	8002194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f808 	bl	8001370 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff fcf0 	bl	8000d44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023c00 	.word	0x40023c00

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_InitTick+0x54>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_InitTick+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 ff35 	bl	80021fe <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f000 fefd 	bl	80021aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <HAL_InitTick+0x5c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <HAL_IncTick+0x1c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <HAL_IncTick+0x20>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a03      	ldr	r2, [pc, #12]	@ (80013f0 <HAL_IncTick+0x20>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000254 	.word	0x20000254

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b02      	ldr	r3, [pc, #8]	@ (8001404 <HAL_GetTick+0x10>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	20000254 	.word	0x20000254

08001408 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff fff0 	bl	80013f4 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001420:	d005      	beq.n	800142e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_Delay+0x44>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142e:	bf00      	nop
 8001430:	f7ff ffe0 	bl	80013f4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	429a      	cmp	r2, r3
 800143e:	d8f7      	bhi.n	8001430 <HAL_Delay+0x28>
  {
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e033      	b.n	80014ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fc8e 	bl	8000d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d118      	bne.n	80014c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001496:	f023 0302 	bic.w	r3, r3, #2
 800149a:	f043 0202 	orr.w	r2, r3, #2
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f938 	bl	8001718 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f023 0303 	bic.w	r3, r3, #3
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80014be:	e001      	b.n	80014c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x1c>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e103      	b.n	80016fc <HAL_ADC_ConfigChannel+0x224>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b09      	cmp	r3, #9
 8001502:	d925      	bls.n	8001550 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68d9      	ldr	r1, [r3, #12]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	3b1e      	subs	r3, #30
 800151a:	2207      	movs	r2, #7
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43da      	mvns	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	400a      	ands	r2, r1
 8001528:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68d9      	ldr	r1, [r3, #12]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4618      	mov	r0, r3
 800153c:	4603      	mov	r3, r0
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4403      	add	r3, r0
 8001542:	3b1e      	subs	r3, #30
 8001544:	409a      	lsls	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	e022      	b.n	8001596 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6919      	ldr	r1, [r3, #16]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	2207      	movs	r2, #7
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	400a      	ands	r2, r1
 8001572:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6919      	ldr	r1, [r3, #16]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4618      	mov	r0, r3
 8001586:	4603      	mov	r3, r0
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4403      	add	r3, r0
 800158c:	409a      	lsls	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b06      	cmp	r3, #6
 800159c:	d824      	bhi.n	80015e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b05      	subs	r3, #5
 80015b0:	221f      	movs	r2, #31
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	400a      	ands	r2, r1
 80015be:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	3b05      	subs	r3, #5
 80015da:	fa00 f203 	lsl.w	r2, r0, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80015e6:	e04c      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b0c      	cmp	r3, #12
 80015ee:	d824      	bhi.n	800163a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	3b23      	subs	r3, #35	@ 0x23
 8001602:	221f      	movs	r2, #31
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43da      	mvns	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	400a      	ands	r2, r1
 8001610:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	3b23      	subs	r3, #35	@ 0x23
 800162c:	fa00 f203 	lsl.w	r2, r0, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	631a      	str	r2, [r3, #48]	@ 0x30
 8001638:	e023      	b.n	8001682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	3b41      	subs	r3, #65	@ 0x41
 800164c:	221f      	movs	r2, #31
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43da      	mvns	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	400a      	ands	r2, r1
 800165a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
 8001668:	4618      	mov	r0, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	3b41      	subs	r3, #65	@ 0x41
 8001676:	fa00 f203 	lsl.w	r2, r0, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a20      	ldr	r2, [pc, #128]	@ (8001708 <HAL_ADC_ConfigChannel+0x230>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d109      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x1c8>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b12      	cmp	r3, #18
 8001692:	d105      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_ADC_ConfigChannel+0x234>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a1c      	ldr	r2, [pc, #112]	@ (800170c <HAL_ADC_ConfigChannel+0x234>)
 800169a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800169e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <HAL_ADC_ConfigChannel+0x230>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d123      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x21a>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d003      	beq.n	80016ba <HAL_ADC_ConfigChannel+0x1e2>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b11      	cmp	r3, #17
 80016b8:	d11b      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016ba:	4b14      	ldr	r3, [pc, #80]	@ (800170c <HAL_ADC_ConfigChannel+0x234>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a13      	ldr	r2, [pc, #76]	@ (800170c <HAL_ADC_ConfigChannel+0x234>)
 80016c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016c4:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b10      	cmp	r3, #16
 80016cc:	d111      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ce:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <HAL_ADC_ConfigChannel+0x238>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a10      	ldr	r2, [pc, #64]	@ (8001714 <HAL_ADC_ConfigChannel+0x23c>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	0c9a      	lsrs	r2, r3, #18
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80016e4:	e002      	b.n	80016ec <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f9      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40012000 	.word	0x40012000
 800170c:	40012300 	.word	0x40012300
 8001710:	20000000 	.word	0x20000000
 8001714:	431bde83 	.word	0x431bde83

08001718 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001720:	4b7e      	ldr	r3, [pc, #504]	@ (800191c <ADC_Init+0x204>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4a7d      	ldr	r2, [pc, #500]	@ (800191c <ADC_Init+0x204>)
 8001726:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800172a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800172c:	4b7b      	ldr	r3, [pc, #492]	@ (800191c <ADC_Init+0x204>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4979      	ldr	r1, [pc, #484]	@ (800191c <ADC_Init+0x204>)
 8001736:	4313      	orrs	r3, r2
 8001738:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	021a      	lsls	r2, r3, #8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800176c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6859      	ldr	r1, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a6:	4a5e      	ldr	r2, [pc, #376]	@ (8001920 <ADC_Init+0x208>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d022      	beq.n	80017f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6899      	ldr	r1, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80017dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6899      	ldr	r1, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e00f      	b.n	8001812 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001810:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0202 	bic.w	r2, r2, #2
 8001820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e1b      	ldrb	r3, [r3, #24]
 800182c:	005a      	lsls	r2, r3, #1
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d027      	beq.n	8001890 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800184e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800185e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	3b01      	subs	r3, #1
 8001866:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800186a:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	fa92 f2a2 	rbit	r2, r2
 8001872:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	fab2 f282 	clz	r2, r2
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	fa03 f102 	lsl.w	r1, r3, r2
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	e007      	b.n	80018a0 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800189e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	051a      	lsls	r2, r3, #20
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6899      	ldr	r1, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018e2:	025a      	lsls	r2, r3, #9
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	029a      	lsls	r2, r3, #10
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	609a      	str	r2, [r3, #8]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40012300 	.word	0x40012300
 8001920:	0f000001 	.word	0x0f000001

08001924 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e0ed      	b.n	8001b12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fa68 	bl	8000e18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001958:	f7ff fd4c 	bl	80013f4 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800195e:	e012      	b.n	8001986 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001960:	f7ff fd48 	bl	80013f4 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d90b      	bls.n	8001986 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2205      	movs	r2, #5
 800197e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0c5      	b.n	8001b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0e5      	beq.n	8001960 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0202 	bic.w	r2, r2, #2
 80019a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019a4:	f7ff fd26 	bl	80013f4 <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019aa:	e012      	b.n	80019d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ac:	f7ff fd22 	bl	80013f4 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b0a      	cmp	r3, #10
 80019b8:	d90b      	bls.n	80019d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2205      	movs	r2, #5
 80019ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e09f      	b.n	8001b12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e5      	bne.n	80019ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7e1b      	ldrb	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d108      	bne.n	80019fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e007      	b.n	8001a0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7e5b      	ldrb	r3, [r3, #25]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	e007      	b.n	8001a34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7e9b      	ldrb	r3, [r3, #26]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d108      	bne.n	8001a4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0220 	orr.w	r2, r2, #32
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e007      	b.n	8001a5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0220 	bic.w	r2, r2, #32
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7edb      	ldrb	r3, [r3, #27]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d108      	bne.n	8001a78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0210 	bic.w	r2, r2, #16
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e007      	b.n	8001a88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0210 	orr.w	r2, r2, #16
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7f1b      	ldrb	r3, [r3, #28]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d108      	bne.n	8001aa2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0208 	orr.w	r2, r2, #8
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e007      	b.n	8001ab2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0208 	bic.w	r2, r2, #8
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7f5b      	ldrb	r3, [r3, #29]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d108      	bne.n	8001acc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0204 	orr.w	r2, r2, #4
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e007      	b.n	8001adc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0204 	bic.w	r2, r2, #4
 8001ada:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	ea42 0103 	orr.w	r1, r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d12e      	bne.n	8001b8c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b46:	f7ff fc55 	bl	80013f4 <HAL_GetTick>
 8001b4a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b4c:	e012      	b.n	8001b74 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b4e:	f7ff fc51 	bl	80013f4 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b0a      	cmp	r3, #10
 8001b5a:	d90b      	bls.n	8001b74 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2205      	movs	r2, #5
 8001b6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e012      	b.n	8001b9a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e5      	bne.n	8001b4e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e006      	b.n	8001b9a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
  }
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b08a      	sub	sp, #40	@ 0x28
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d07c      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d023      	beq.n	8001c3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f983 	bl	8001f10 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c0a:	e016      	b.n	8001c3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1e:	e00c      	b.n	8001c3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d004      	beq.n	8001c34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c32:	e002      	b.n	8001c3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f986 	bl	8001f46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d024      	beq.n	8001c8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f962 	bl	8001f22 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c5e:	e016      	b.n	8001c8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c72:	e00c      	b.n	8001c8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c86:	e002      	b.n	8001c8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f965 	bl	8001f58 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d024      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ca0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f941 	bl	8001f34 <HAL_CAN_TxMailbox2CompleteCallback>
 8001cb2:	e016      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc6:	e00c      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d004      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cda:	e002      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f944 	bl	8001f6a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00c      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2210      	movs	r2, #16
 8001d04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2208      	movs	r2, #8
 8001d20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f933 	bl	8001f8e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f91b 	bl	8001f7c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00c      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2210      	movs	r2, #16
 8001d68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00b      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2208      	movs	r2, #8
 8001d84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f913 	bl	8001fb2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8fb 	bl	8001fa0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00b      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8fc 	bl	8001fc4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dcc:	6a3b      	ldr	r3, [r7, #32]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2208      	movs	r2, #8
 8001de6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f8f4 	bl	8001fd6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d07b      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d072      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d043      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d03e      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e70:	2b60      	cmp	r3, #96	@ 0x60
 8001e72:	d02b      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x32a>
 8001e74:	2b60      	cmp	r3, #96	@ 0x60
 8001e76:	d82e      	bhi.n	8001ed6 <HAL_CAN_IRQHandler+0x334>
 8001e78:	2b50      	cmp	r3, #80	@ 0x50
 8001e7a:	d022      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x320>
 8001e7c:	2b50      	cmp	r3, #80	@ 0x50
 8001e7e:	d82a      	bhi.n	8001ed6 <HAL_CAN_IRQHandler+0x334>
 8001e80:	2b40      	cmp	r3, #64	@ 0x40
 8001e82:	d019      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x316>
 8001e84:	2b40      	cmp	r3, #64	@ 0x40
 8001e86:	d826      	bhi.n	8001ed6 <HAL_CAN_IRQHandler+0x334>
 8001e88:	2b30      	cmp	r3, #48	@ 0x30
 8001e8a:	d010      	beq.n	8001eae <HAL_CAN_IRQHandler+0x30c>
 8001e8c:	2b30      	cmp	r3, #48	@ 0x30
 8001e8e:	d822      	bhi.n	8001ed6 <HAL_CAN_IRQHandler+0x334>
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d002      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x2f8>
 8001e94:	2b20      	cmp	r3, #32
 8001e96:	d005      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e98:	e01d      	b.n	8001ed6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ea2:	e019      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	f043 0310 	orr.w	r3, r3, #16
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eac:	e014      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	f043 0320 	orr.w	r3, r3, #32
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eb6:	e00f      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ec0:	e00a      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eca:	e005      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ed4:	e000      	b.n	8001ed8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ed6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ee6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2204      	movs	r2, #4
 8001eee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f870 	bl	8001fe8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3728      	adds	r7, #40	@ 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr

08001f34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr

08001f8e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
	...

08001ffc <__NVIC_SetPriorityGrouping>:
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002018:	4013      	ands	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800202c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202e:	4a04      	ldr	r2, [pc, #16]	@ (8002040 <__NVIC_SetPriorityGrouping+0x44>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	60d3      	str	r3, [r2, #12]
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_GetPriorityGrouping>:
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b04      	ldr	r3, [pc, #16]	@ (800205c <__NVIC_GetPriorityGrouping+0x18>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	f003 0307 	and.w	r3, r3, #7
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <__NVIC_EnableIRQ>:
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b00      	cmp	r3, #0
 8002070:	db0b      	blt.n	800208a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	f003 021f 	and.w	r2, r3, #31
 8002078:	4906      	ldr	r1, [pc, #24]	@ (8002094 <__NVIC_EnableIRQ+0x34>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	2001      	movs	r0, #1
 8002082:	fa00 f202 	lsl.w	r2, r0, r2
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	@ (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	@ (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	@ 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <SysTick_Config>:
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002160:	d301      	bcc.n	8002166 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002162:	2301      	movs	r3, #1
 8002164:	e00f      	b.n	8002186 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002166:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <SysTick_Config+0x40>)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216e:	210f      	movs	r1, #15
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f7ff ff90 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <SysTick_Config+0x40>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <SysTick_Config+0x40>)
 8002180:	2207      	movs	r2, #7
 8002182:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	e000e010 	.word	0xe000e010

08002194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff2d 	bl	8001ffc <__NVIC_SetPriorityGrouping>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021bc:	f7ff ff42 	bl	8002044 <__NVIC_GetPriorityGrouping>
 80021c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	f7ff ff90 	bl	80020ec <NVIC_EncodePriority>
 80021cc:	4602      	mov	r2, r0
 80021ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff5f 	bl	8002098 <__NVIC_SetPriority>
}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff35 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ffa2 	bl	8002150 <SysTick_Config>
 800220c:	4603      	mov	r3, r0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e16f      	b.n	8002508 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8161 	beq.w	8002502 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d005      	beq.n	8002258 <HAL_GPIO_Init+0x40>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d130      	bne.n	80022ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4013      	ands	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228e:	2201      	movs	r2, #1
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f003 0201 	and.w	r2, r3, #1
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d017      	beq.n	80022f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d123      	bne.n	800234a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	08da      	lsrs	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3208      	adds	r2, #8
 8002344:	6939      	ldr	r1, [r7, #16]
 8002346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f003 0203 	and.w	r2, r3, #3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80bb 	beq.w	8002502 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	4b64      	ldr	r3, [pc, #400]	@ (8002524 <HAL_GPIO_Init+0x30c>)
 8002392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002394:	4a63      	ldr	r2, [pc, #396]	@ (8002524 <HAL_GPIO_Init+0x30c>)
 8002396:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239a:	6453      	str	r3, [r2, #68]	@ 0x44
 800239c:	4b61      	ldr	r3, [pc, #388]	@ (8002524 <HAL_GPIO_Init+0x30c>)
 800239e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023a8:	4a5f      	ldr	r2, [pc, #380]	@ (8002528 <HAL_GPIO_Init+0x310>)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	3302      	adds	r3, #2
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	220f      	movs	r2, #15
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a57      	ldr	r2, [pc, #348]	@ (800252c <HAL_GPIO_Init+0x314>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d031      	beq.n	8002438 <HAL_GPIO_Init+0x220>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a56      	ldr	r2, [pc, #344]	@ (8002530 <HAL_GPIO_Init+0x318>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d02b      	beq.n	8002434 <HAL_GPIO_Init+0x21c>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a55      	ldr	r2, [pc, #340]	@ (8002534 <HAL_GPIO_Init+0x31c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d025      	beq.n	8002430 <HAL_GPIO_Init+0x218>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a54      	ldr	r2, [pc, #336]	@ (8002538 <HAL_GPIO_Init+0x320>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d01f      	beq.n	800242c <HAL_GPIO_Init+0x214>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a53      	ldr	r2, [pc, #332]	@ (800253c <HAL_GPIO_Init+0x324>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d019      	beq.n	8002428 <HAL_GPIO_Init+0x210>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a52      	ldr	r2, [pc, #328]	@ (8002540 <HAL_GPIO_Init+0x328>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_GPIO_Init+0x20c>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a51      	ldr	r2, [pc, #324]	@ (8002544 <HAL_GPIO_Init+0x32c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00d      	beq.n	8002420 <HAL_GPIO_Init+0x208>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a50      	ldr	r2, [pc, #320]	@ (8002548 <HAL_GPIO_Init+0x330>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d007      	beq.n	800241c <HAL_GPIO_Init+0x204>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4f      	ldr	r2, [pc, #316]	@ (800254c <HAL_GPIO_Init+0x334>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_GPIO_Init+0x200>
 8002414:	2308      	movs	r3, #8
 8002416:	e010      	b.n	800243a <HAL_GPIO_Init+0x222>
 8002418:	2309      	movs	r3, #9
 800241a:	e00e      	b.n	800243a <HAL_GPIO_Init+0x222>
 800241c:	2307      	movs	r3, #7
 800241e:	e00c      	b.n	800243a <HAL_GPIO_Init+0x222>
 8002420:	2306      	movs	r3, #6
 8002422:	e00a      	b.n	800243a <HAL_GPIO_Init+0x222>
 8002424:	2305      	movs	r3, #5
 8002426:	e008      	b.n	800243a <HAL_GPIO_Init+0x222>
 8002428:	2304      	movs	r3, #4
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x222>
 800242c:	2303      	movs	r3, #3
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x222>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x222>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x222>
 8002438:	2300      	movs	r3, #0
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	461a      	mov	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800244c:	4936      	ldr	r1, [pc, #216]	@ (8002528 <HAL_GPIO_Init+0x310>)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	3302      	adds	r3, #2
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	4b3d      	ldr	r3, [pc, #244]	@ (8002550 <HAL_GPIO_Init+0x338>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4313      	orrs	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800247e:	4a34      	ldr	r2, [pc, #208]	@ (8002550 <HAL_GPIO_Init+0x338>)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002484:	4b32      	ldr	r3, [pc, #200]	@ (8002550 <HAL_GPIO_Init+0x338>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024a8:	4a29      	ldr	r2, [pc, #164]	@ (8002550 <HAL_GPIO_Init+0x338>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ae:	4b28      	ldr	r3, [pc, #160]	@ (8002550 <HAL_GPIO_Init+0x338>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002550 <HAL_GPIO_Init+0x338>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002550 <HAL_GPIO_Init+0x338>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024fc:	4a14      	ldr	r2, [pc, #80]	@ (8002550 <HAL_GPIO_Init+0x338>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	f47f ae88 	bne.w	8002228 <HAL_GPIO_Init+0x10>
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	371c      	adds	r7, #28
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40023800 	.word	0x40023800
 8002528:	40013800 	.word	0x40013800
 800252c:	40020000 	.word	0x40020000
 8002530:	40020400 	.word	0x40020400
 8002534:	40020800 	.word	0x40020800
 8002538:	40020c00 	.word	0x40020c00
 800253c:	40021000 	.word	0x40021000
 8002540:	40021400 	.word	0x40021400
 8002544:	40021800 	.word	0x40021800
 8002548:	40021c00 	.word	0x40021c00
 800254c:	40022000 	.word	0x40022000
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
 8002570:	e001      	b.n	8002576 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	807b      	strh	r3, [r7, #2]
 800258e:	4613      	mov	r3, r2
 8002590:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002592:	787b      	ldrb	r3, [r7, #1]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002598:	887a      	ldrh	r2, [r7, #2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800259e:	e003      	b.n	80025a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	041a      	lsls	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	619a      	str	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
	...

080025b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e23b      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d050      	beq.n	8002674 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025d2:	4b9e      	ldr	r3, [pc, #632]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d00c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025de:	4b9b      	ldr	r3, [pc, #620]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d112      	bne.n	8002610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ea:	4b98      	ldr	r3, [pc, #608]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025f6:	d10b      	bne.n	8002610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	4b94      	ldr	r3, [pc, #592]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d036      	beq.n	8002672 <HAL_RCC_OscConfig+0xbe>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d132      	bne.n	8002672 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e216      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	4b8e      	ldr	r3, [pc, #568]	@ (8002850 <HAL_RCC_OscConfig+0x29c>)
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d013      	beq.n	800264a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7fe fee7 	bl	80013f4 <HAL_GetTick>
 8002626:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262a:	f7fe fee3 	bl	80013f4 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b64      	cmp	r3, #100	@ 0x64
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e200      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263c:	4b83      	ldr	r3, [pc, #524]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x76>
 8002648:	e014      	b.n	8002674 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264a:	f7fe fed3 	bl	80013f4 <HAL_GetTick>
 800264e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002652:	f7fe fecf 	bl	80013f4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b64      	cmp	r3, #100	@ 0x64
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1ec      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002664:	4b79      	ldr	r3, [pc, #484]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f0      	bne.n	8002652 <HAL_RCC_OscConfig+0x9e>
 8002670:	e000      	b.n	8002674 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002672:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d077      	beq.n	8002770 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002680:	4b72      	ldr	r3, [pc, #456]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00b      	beq.n	80026a4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268c:	4b6f      	ldr	r3, [pc, #444]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002694:	2b08      	cmp	r3, #8
 8002696:	d126      	bne.n	80026e6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002698:	4b6c      	ldr	r3, [pc, #432]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d120      	bne.n	80026e6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a4:	4b69      	ldr	r3, [pc, #420]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_OscConfig+0x108>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e1c0      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b63      	ldr	r3, [pc, #396]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	21f8      	movs	r1, #248	@ 0xf8
 80026ca:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	69b9      	ldr	r1, [r7, #24]
 80026ce:	fa91 f1a1 	rbit	r1, r1
 80026d2:	6179      	str	r1, [r7, #20]
  return result;
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	fab1 f181 	clz	r1, r1
 80026da:	b2c9      	uxtb	r1, r1
 80026dc:	408b      	lsls	r3, r1
 80026de:	495b      	ldr	r1, [pc, #364]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e4:	e044      	b.n	8002770 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d02a      	beq.n	8002744 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ee:	4b59      	ldr	r3, [pc, #356]	@ (8002854 <HAL_RCC_OscConfig+0x2a0>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe7e 	bl	80013f4 <HAL_GetTick>
 80026f8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fe7a 	bl	80013f4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e197      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b4f      	ldr	r3, [pc, #316]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b4c      	ldr	r3, [pc, #304]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	21f8      	movs	r1, #248	@ 0xf8
 8002728:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6939      	ldr	r1, [r7, #16]
 800272c:	fa91 f1a1 	rbit	r1, r1
 8002730:	60f9      	str	r1, [r7, #12]
  return result;
 8002732:	68f9      	ldr	r1, [r7, #12]
 8002734:	fab1 f181 	clz	r1, r1
 8002738:	b2c9      	uxtb	r1, r1
 800273a:	408b      	lsls	r3, r1
 800273c:	4943      	ldr	r1, [pc, #268]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
 8002742:	e015      	b.n	8002770 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002744:	4b43      	ldr	r3, [pc, #268]	@ (8002854 <HAL_RCC_OscConfig+0x2a0>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fe fe53 	bl	80013f4 <HAL_GetTick>
 800274e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002752:	f7fe fe4f 	bl	80013f4 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e16c      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002764:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d030      	beq.n	80027de <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d016      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002784:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <HAL_RCC_OscConfig+0x2a4>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278a:	f7fe fe33 	bl	80013f4 <HAL_GetTick>
 800278e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002792:	f7fe fe2f 	bl	80013f4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e14c      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a4:	4b29      	ldr	r3, [pc, #164]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x1de>
 80027b0:	e015      	b.n	80027de <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b2:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <HAL_RCC_OscConfig+0x2a4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b8:	f7fe fe1c 	bl	80013f4 <HAL_GetTick>
 80027bc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe fe18 	bl	80013f4 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e135      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d2:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80027d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8087 	beq.w	80028fa <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b16      	ldr	r3, [pc, #88]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d110      	bne.n	8002820 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	4a11      	ldr	r2, [pc, #68]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	@ 0x40
 800280e:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <HAL_RCC_OscConfig+0x298>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002820:	4b0e      	ldr	r3, [pc, #56]	@ (800285c <HAL_RCC_OscConfig+0x2a8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <HAL_RCC_OscConfig+0x2a8>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <HAL_RCC_OscConfig+0x2a8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d122      	bne.n	800287e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <HAL_RCC_OscConfig+0x2a8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_RCC_OscConfig+0x2a8>)
 800283e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002844:	f7fe fdd6 	bl	80013f4 <HAL_GetTick>
 8002848:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284a:	e012      	b.n	8002872 <HAL_RCC_OscConfig+0x2be>
 800284c:	40023800 	.word	0x40023800
 8002850:	40023802 	.word	0x40023802
 8002854:	42470000 	.word	0x42470000
 8002858:	42470e80 	.word	0x42470e80
 800285c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe fdc8 	bl	80013f4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0e5      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b75      	ldr	r3, [pc, #468]	@ (8002a48 <HAL_RCC_OscConfig+0x494>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	4b72      	ldr	r3, [pc, #456]	@ (8002a4c <HAL_RCC_OscConfig+0x498>)
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002890:	f7fe fdb0 	bl	80013f4 <HAL_GetTick>
 8002894:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	e00a      	b.n	80028ae <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe fdac 	bl	80013f4 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0c7      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ae:	4b68      	ldr	r3, [pc, #416]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ee      	beq.n	8002898 <HAL_RCC_OscConfig+0x2e4>
 80028ba:	e014      	b.n	80028e6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028bc:	f7fe fd9a 	bl	80013f4 <HAL_GetTick>
 80028c0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fd96 	bl	80013f4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0b1      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028da:	4b5d      	ldr	r3, [pc, #372]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ee      	bne.n	80028c4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4b58      	ldr	r3, [pc, #352]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4a57      	ldr	r2, [pc, #348]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 809c 	beq.w	8002a3c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002904:	4b52      	ldr	r3, [pc, #328]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d061      	beq.n	80029d4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d146      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b4e      	ldr	r3, [pc, #312]	@ (8002a54 <HAL_RCC_OscConfig+0x4a0>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fd69 	bl	80013f4 <HAL_GetTick>
 8002922:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002926:	f7fe fd65 	bl	80013f4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	@ 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e082      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002938:	4b45      	ldr	r3, [pc, #276]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002944:	4b42      	ldr	r3, [pc, #264]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4b43      	ldr	r3, [pc, #268]	@ (8002a58 <HAL_RCC_OscConfig+0x4a4>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	69d1      	ldr	r1, [r2, #28]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6a12      	ldr	r2, [r2, #32]
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800295a:	0192      	lsls	r2, r2, #6
 800295c:	4311      	orrs	r1, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002962:	0612      	lsls	r2, r2, #24
 8002964:	4311      	orrs	r1, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800296a:	0852      	lsrs	r2, r2, #1
 800296c:	3a01      	subs	r2, #1
 800296e:	0412      	lsls	r2, r2, #16
 8002970:	430a      	orrs	r2, r1
 8002972:	4937      	ldr	r1, [pc, #220]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	4b36      	ldr	r3, [pc, #216]	@ (8002a54 <HAL_RCC_OscConfig+0x4a0>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe fd39 	bl	80013f4 <HAL_GetTick>
 8002982:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe fd35 	bl	80013f4 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b64      	cmp	r3, #100	@ 0x64
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e052      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002998:	4b2d      	ldr	r3, [pc, #180]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x3d2>
 80029a4:	e04a      	b.n	8002a3c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a54 <HAL_RCC_OscConfig+0x4a0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fd22 	bl	80013f4 <HAL_GetTick>
 80029b0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fd1e 	bl	80013f4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e03b      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b22      	ldr	r3, [pc, #136]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x400>
 80029d2:	e033      	b.n	8002a3c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e02e      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RCC_OscConfig+0x49c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d121      	bne.n	8002a38 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3728      	adds	r7, #40	@ 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40007000 	.word	0x40007000
 8002a4c:	40023870 	.word	0x40023870
 8002a50:	40023800 	.word	0x40023800
 8002a54:	42470060 	.word	0x42470060
 8002a58:	f0bc8000 	.word	0xf0bc8000

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d2      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b6b      	ldr	r3, [pc, #428]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d90c      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b68      	ldr	r3, [pc, #416]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b66      	ldr	r3, [pc, #408]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0be      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab0:	4b5c      	ldr	r3, [pc, #368]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a5b      	ldr	r2, [pc, #364]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002ac8:	4b56      	ldr	r3, [pc, #344]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a55      	ldr	r2, [pc, #340]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ad2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad4:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4950      	ldr	r1, [pc, #320]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d040      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d115      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e085      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b44      	ldr	r3, [pc, #272]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e079      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b40      	ldr	r3, [pc, #256]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e071      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b3c      	ldr	r3, [pc, #240]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4939      	ldr	r1, [pc, #228]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b44:	f7fe fc56 	bl	80013f4 <HAL_GetTick>
 8002b48:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7fe fc52 	bl	80013f4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e059      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b30      	ldr	r3, [pc, #192]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b2a      	ldr	r3, [pc, #168]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d20c      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b27      	ldr	r3, [pc, #156]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e03c      	b.n	8002c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	491b      	ldr	r1, [pc, #108]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc6:	4b17      	ldr	r3, [pc, #92]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4913      	ldr	r1, [pc, #76]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002bda:	f000 f82b 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002bde:	4601      	mov	r1, r0
 8002be0:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002be8:	22f0      	movs	r2, #240	@ 0xf0
 8002bea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	60fa      	str	r2, [r7, #12]
  return result;
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	40d3      	lsrs	r3, r2
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <HAL_RCC_ClockConfig+0x1cc>)
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	fa21 f303 	lsr.w	r3, r1, r3
 8002c06:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <HAL_RCC_ClockConfig+0x1d0>)
 8002c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c0a:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1d4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fbae 	bl	8001370 <HAL_InitTick>

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40023c00 	.word	0x40023c00
 8002c24:	40023800 	.word	0x40023800
 8002c28:	080046b8 	.word	0x080046b8
 8002c2c:	20000000 	.word	0x20000000
 8002c30:	20000004 	.word	0x20000004

08002c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b094      	sub	sp, #80	@ 0x50
 8002c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c40:	2300      	movs	r3, #0
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c44:	2300      	movs	r3, #0
 8002c46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d00d      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x40>
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	f200 80e7 	bhi.w	8002e2c <HAL_RCC_GetSysClockFreq+0x1f8>
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x34>
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d003      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c66:	e0e1      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c68:	4b76      	ldr	r3, [pc, #472]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x210>)
 8002c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c6c:	e0e1      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c6e:	4b75      	ldr	r3, [pc, #468]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x210>)
 8002c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c72:	e0de      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c74:	4b72      	ldr	r3, [pc, #456]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c7e:	4b70      	ldr	r3, [pc, #448]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d065      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	099b      	lsrs	r3, r3, #6
 8002c90:	2200      	movs	r2, #0
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	462b      	mov	r3, r5
 8002caa:	f04f 0000 	mov.w	r0, #0
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	0159      	lsls	r1, r3, #5
 8002cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cb8:	0150      	lsls	r0, r2, #5
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	1a51      	subs	r1, r2, r1
 8002cc2:	6139      	str	r1, [r7, #16]
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cd8:	4659      	mov	r1, fp
 8002cda:	018b      	lsls	r3, r1, #6
 8002cdc:	4651      	mov	r1, sl
 8002cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ce2:	4651      	mov	r1, sl
 8002ce4:	018a      	lsls	r2, r1, #6
 8002ce6:	46d4      	mov	ip, sl
 8002ce8:	ebb2 080c 	subs.w	r8, r2, ip
 8002cec:	4659      	mov	r1, fp
 8002cee:	eb63 0901 	sbc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	462b      	mov	r3, r5
 8002d14:	eb49 0303 	adc.w	r3, r9, r3
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d26:	4629      	mov	r1, r5
 8002d28:	028b      	lsls	r3, r1, #10
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	4604      	mov	r4, r0
 8002d30:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002d34:	4601      	mov	r1, r0
 8002d36:	028a      	lsls	r2, r1, #10
 8002d38:	4610      	mov	r0, r2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3e:	2200      	movs	r2, #0
 8002d40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d48:	f7fd fa3c 	bl	80001c4 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4613      	mov	r3, r2
 8002d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d54:	e05c      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d56:	4b3a      	ldr	r3, [pc, #232]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	4618      	mov	r0, r3
 8002d60:	4611      	mov	r1, r2
 8002d62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d66:	623b      	str	r3, [r7, #32]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d70:	4642      	mov	r2, r8
 8002d72:	464b      	mov	r3, r9
 8002d74:	f04f 0000 	mov.w	r0, #0
 8002d78:	f04f 0100 	mov.w	r1, #0
 8002d7c:	0159      	lsls	r1, r3, #5
 8002d7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d82:	0150      	lsls	r0, r2, #5
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	46c4      	mov	ip, r8
 8002d8a:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002d8e:	4640      	mov	r0, r8
 8002d90:	4649      	mov	r1, r9
 8002d92:	468c      	mov	ip, r1
 8002d94:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002da4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002da8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dac:	ebb2 040a 	subs.w	r4, r2, sl
 8002db0:	eb63 050b 	sbc.w	r5, r3, fp
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	00eb      	lsls	r3, r5, #3
 8002dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dc2:	00e2      	lsls	r2, r4, #3
 8002dc4:	4614      	mov	r4, r2
 8002dc6:	461d      	mov	r5, r3
 8002dc8:	4603      	mov	r3, r0
 8002dca:	18e3      	adds	r3, r4, r3
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	eb45 0303 	adc.w	r3, r5, r3
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002de2:	4629      	mov	r1, r5
 8002de4:	028b      	lsls	r3, r1, #10
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	4604      	mov	r4, r0
 8002dec:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002df0:	4601      	mov	r1, r0
 8002df2:	028a      	lsls	r2, r1, #10
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	61fa      	str	r2, [r7, #28]
 8002e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e04:	f7fd f9de 	bl	80001c4 <__aeabi_uldivmod>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002e20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e2a:	e002      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b05      	ldr	r3, [pc, #20]	@ (8002e44 <HAL_RCC_GetSysClockFreq+0x210>)
 8002e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3750      	adds	r7, #80	@ 0x50
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800
 8002e44:	00f42400 	.word	0x00f42400

08002e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e4c:	4b02      	ldr	r3, [pc, #8]	@ (8002e58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr
 8002e58:	20000000 	.word	0x20000000

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002e62:	f7ff fff1 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002e66:	4601      	mov	r1, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002e70:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8002e74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	fa92 f2a2 	rbit	r2, r2
 8002e7c:	603a      	str	r2, [r7, #0]
  return result;
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	fab2 f282 	clz	r2, r2
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	40d3      	lsrs	r3, r2
 8002e88:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e8a:	5cd3      	ldrb	r3, [r2, r3]
 8002e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	080046c8 	.word	0x080046c8

08002ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002ea6:	f7ff ffcf 	bl	8002e48 <HAL_RCC_GetHCLKFreq>
 8002eaa:	4601      	mov	r1, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002eb4:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002eb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	fa92 f2a2 	rbit	r2, r2
 8002ec0:	603a      	str	r2, [r7, #0]
  return result;
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	fab2 f282 	clz	r2, r2
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	40d3      	lsrs	r3, r2
 8002ecc:	4a04      	ldr	r2, [pc, #16]	@ (8002ee0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002ece:	5cd3      	ldrb	r3, [r2, r3]
 8002ed0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	080046c8 	.word	0x080046c8

08002ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07b      	b.n	8002fee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f06:	d009      	beq.n	8002f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
 8002f0e:	e005      	b.n	8002f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe f820 	bl	8000f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa0:	ea42 0103 	orr.w	r1, r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	f003 0104 	and.w	r1, r3, #4
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	f003 0210 	and.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69da      	ldr	r2, [r3, #28]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b088      	sub	sp, #32
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	603b      	str	r3, [r7, #0]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003006:	f7fe f9f5 	bl	80013f4 <HAL_GetTick>
 800300a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
 800301e:	e12a      	b.n	8003276 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_SPI_Transmit+0x36>
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e122      	b.n	8003276 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_SPI_Transmit+0x48>
 800303a:	2302      	movs	r3, #2
 800303c:	e11b      	b.n	8003276 <HAL_SPI_Transmit+0x280>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2203      	movs	r2, #3
 800304a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800308c:	d10f      	bne.n	80030ae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800309c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b8:	2b40      	cmp	r3, #64	@ 0x40
 80030ba:	d007      	beq.n	80030cc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d4:	d152      	bne.n	800317c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_SPI_Transmit+0xee>
 80030de:	8b7b      	ldrh	r3, [r7, #26]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d145      	bne.n	8003170 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003108:	e032      	b.n	8003170 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d112      	bne.n	800313e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800313c:	e018      	b.n	8003170 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313e:	f7fe f959 	bl	80013f4 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d803      	bhi.n	8003156 <HAL_SPI_Transmit+0x160>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d102      	bne.n	800315c <HAL_SPI_Transmit+0x166>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d109      	bne.n	8003170 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e082      	b.n	8003276 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1c7      	bne.n	800310a <HAL_SPI_Transmit+0x114>
 800317a:	e053      	b.n	8003224 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_SPI_Transmit+0x194>
 8003184:	8b7b      	ldrh	r3, [r7, #26]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d147      	bne.n	800321a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031b0:	e033      	b.n	800321a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d113      	bne.n	80031e8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031e6:	e018      	b.n	800321a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e8:	f7fe f904 	bl	80013f4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d803      	bhi.n	8003200 <HAL_SPI_Transmit+0x20a>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d102      	bne.n	8003206 <HAL_SPI_Transmit+0x210>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e02d      	b.n	8003276 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1c6      	bne.n	80031b2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	6839      	ldr	r1, [r7, #0]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f8b1 	bl	8003390 <SPI_EndRxTxTransaction>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003274:	2300      	movs	r3, #0
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003290:	f7fe f8b0 	bl	80013f4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4413      	add	r3, r2
 800329e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032a0:	f7fe f8a8 	bl	80013f4 <HAL_GetTick>
 80032a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032a6:	4b39      	ldr	r3, [pc, #228]	@ (800338c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	015b      	lsls	r3, r3, #5
 80032ac:	0d1b      	lsrs	r3, r3, #20
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032b6:	e054      	b.n	8003362 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d050      	beq.n	8003362 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032c0:	f7fe f898 	bl	80013f4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d13d      	bne.n	8003352 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ee:	d111      	bne.n	8003314 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032f8:	d004      	beq.n	8003304 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003302:	d107      	bne.n	8003314 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003312:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800331c:	d10f      	bne.n	800333e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800333c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e017      	b.n	8003382 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	3b01      	subs	r3, #1
 8003360:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	429a      	cmp	r2, r3
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	429a      	cmp	r2, r3
 800337e:	d19b      	bne.n	80032b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3720      	adds	r7, #32
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000000 	.word	0x20000000

08003390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2201      	movs	r2, #1
 80033a4:	2102      	movs	r1, #2
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7ff ff6a 	bl	8003280 <SPI_WaitFlagStateUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e013      	b.n	80033ea <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2200      	movs	r2, #0
 80033ca:	2180      	movs	r1, #128	@ 0x80
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ff57 	bl	8003280 <SPI_WaitFlagStateUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e000      	b.n	80033ea <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e041      	b.n	8003488 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7fd fdf7 	bl	800100c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4610      	mov	r0, r2
 8003432:	f000 f95b 	bl	80036ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d001      	beq.n	80034a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e046      	b.n	8003536 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a22      	ldr	r2, [pc, #136]	@ (8003540 <HAL_TIM_Base_Start+0xb0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d022      	beq.n	8003500 <HAL_TIM_Base_Start+0x70>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d01d      	beq.n	8003500 <HAL_TIM_Base_Start+0x70>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003544 <HAL_TIM_Base_Start+0xb4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d018      	beq.n	8003500 <HAL_TIM_Base_Start+0x70>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003548 <HAL_TIM_Base_Start+0xb8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d013      	beq.n	8003500 <HAL_TIM_Base_Start+0x70>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1b      	ldr	r2, [pc, #108]	@ (800354c <HAL_TIM_Base_Start+0xbc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_Base_Start+0x70>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1a      	ldr	r2, [pc, #104]	@ (8003550 <HAL_TIM_Base_Start+0xc0>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_Base_Start+0x70>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a18      	ldr	r2, [pc, #96]	@ (8003554 <HAL_TIM_Base_Start+0xc4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_Base_Start+0x70>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a17      	ldr	r2, [pc, #92]	@ (8003558 <HAL_TIM_Base_Start+0xc8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d010      	beq.n	8003534 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e007      	b.n	8003534 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40010400 	.word	0x40010400
 8003554:	40014000 	.word	0x40014000
 8003558:	40001800 	.word	0x40001800

0800355c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003566:	2300      	movs	r3, #0
 8003568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIM_ConfigClockSource+0x1c>
 8003574:	2302      	movs	r3, #2
 8003576:	e0b4      	b.n	80036e2 <HAL_TIM_ConfigClockSource+0x186>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800359e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b0:	d03e      	beq.n	8003630 <HAL_TIM_ConfigClockSource+0xd4>
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b6:	f200 8087 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035be:	f000 8086 	beq.w	80036ce <HAL_TIM_ConfigClockSource+0x172>
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c6:	d87f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b70      	cmp	r3, #112	@ 0x70
 80035ca:	d01a      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xa6>
 80035cc:	2b70      	cmp	r3, #112	@ 0x70
 80035ce:	d87b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b60      	cmp	r3, #96	@ 0x60
 80035d2:	d050      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x11a>
 80035d4:	2b60      	cmp	r3, #96	@ 0x60
 80035d6:	d877      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d8:	2b50      	cmp	r3, #80	@ 0x50
 80035da:	d03c      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0xfa>
 80035dc:	2b50      	cmp	r3, #80	@ 0x50
 80035de:	d873      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d058      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x13a>
 80035e4:	2b40      	cmp	r3, #64	@ 0x40
 80035e6:	d86f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e8:	2b30      	cmp	r3, #48	@ 0x30
 80035ea:	d064      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035ec:	2b30      	cmp	r3, #48	@ 0x30
 80035ee:	d86b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d060      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d867      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d05a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003600:	e062      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003612:	f000 f98c 	bl	800392e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	609a      	str	r2, [r3, #8]
      break;
 800362e:	e04f      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003640:	f000 f975 	bl	800392e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003652:	609a      	str	r2, [r3, #8]
      break;
 8003654:	e03c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003662:	461a      	mov	r2, r3
 8003664:	f000 f8ec 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2150      	movs	r1, #80	@ 0x50
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f943 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 8003674:	e02c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003682:	461a      	mov	r2, r3
 8003684:	f000 f90a 	bl	800389c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2160      	movs	r1, #96	@ 0x60
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f933 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 8003694:	e01c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 f8cc 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2140      	movs	r1, #64	@ 0x40
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f923 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036b4:	e00c      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 f91a 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036c6:	e003      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e000      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a45      	ldr	r2, [pc, #276]	@ (8003814 <TIM_Base_SetConfig+0x128>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800370a:	d00f      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a42      	ldr	r2, [pc, #264]	@ (8003818 <TIM_Base_SetConfig+0x12c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a41      	ldr	r2, [pc, #260]	@ (800381c <TIM_Base_SetConfig+0x130>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a40      	ldr	r2, [pc, #256]	@ (8003820 <TIM_Base_SetConfig+0x134>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3f      	ldr	r2, [pc, #252]	@ (8003824 <TIM_Base_SetConfig+0x138>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a34      	ldr	r2, [pc, #208]	@ (8003814 <TIM_Base_SetConfig+0x128>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d02b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374c:	d027      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a31      	ldr	r2, [pc, #196]	@ (8003818 <TIM_Base_SetConfig+0x12c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d023      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a30      	ldr	r2, [pc, #192]	@ (800381c <TIM_Base_SetConfig+0x130>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01f      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2f      	ldr	r2, [pc, #188]	@ (8003820 <TIM_Base_SetConfig+0x134>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2e      	ldr	r2, [pc, #184]	@ (8003824 <TIM_Base_SetConfig+0x138>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d017      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <TIM_Base_SetConfig+0x13c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2c      	ldr	r2, [pc, #176]	@ (800382c <TIM_Base_SetConfig+0x140>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00f      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2b      	ldr	r2, [pc, #172]	@ (8003830 <TIM_Base_SetConfig+0x144>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2a      	ldr	r2, [pc, #168]	@ (8003834 <TIM_Base_SetConfig+0x148>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a29      	ldr	r2, [pc, #164]	@ (8003838 <TIM_Base_SetConfig+0x14c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a28      	ldr	r2, [pc, #160]	@ (800383c <TIM_Base_SetConfig+0x150>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d108      	bne.n	80037b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003814 <TIM_Base_SetConfig+0x128>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_Base_SetConfig+0xf8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a11      	ldr	r2, [pc, #68]	@ (8003824 <TIM_Base_SetConfig+0x138>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d105      	bne.n	800380a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	f023 0201 	bic.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	611a      	str	r2, [r3, #16]
  }
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40010000 	.word	0x40010000
 8003818:	40000400 	.word	0x40000400
 800381c:	40000800 	.word	0x40000800
 8003820:	40000c00 	.word	0x40000c00
 8003824:	40010400 	.word	0x40010400
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400
 8003830:	40014800 	.word	0x40014800
 8003834:	40001800 	.word	0x40001800
 8003838:	40001c00 	.word	0x40001c00
 800383c:	40002000 	.word	0x40002000

08003840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0201 	bic.w	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800386a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 030a 	bic.w	r3, r3, #10
 800387c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f023 0210 	bic.w	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	031b      	lsls	r3, r3, #12
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	f043 0307 	orr.w	r3, r3, #7
 800391c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003948:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003980:	2302      	movs	r3, #2
 8003982:	e05a      	b.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a20      	ldr	r2, [pc, #128]	@ (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d0:	d01d      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a19      	ldr	r2, [pc, #100]	@ (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a17      	ldr	r2, [pc, #92]	@ (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a16      	ldr	r2, [pc, #88]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a14      	ldr	r2, [pc, #80]	@ (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10c      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40010000 	.word	0x40010000
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40000c00 	.word	0x40000c00
 8003a54:	40010400 	.word	0x40010400
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40001800 	.word	0x40001800

08003a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e042      	b.n	8003af8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d106      	bne.n	8003a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd fae0 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2224      	movs	r2, #36	@ 0x24
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f82b 	bl	8003b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695a      	ldr	r2, [r3, #20]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68da      	ldr	r2, [r3, #12]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003b40:	f023 030c 	bic.w	r3, r3, #12
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a57      	ldr	r2, [pc, #348]	@ (8003cc8 <UART_SetConfig+0x1c8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <UART_SetConfig+0x78>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a56      	ldr	r2, [pc, #344]	@ (8003ccc <UART_SetConfig+0x1cc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d103      	bne.n	8003b80 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b78:	f7ff f992 	bl	8002ea0 <HAL_RCC_GetPCLK2Freq>
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	e002      	b.n	8003b86 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7ff f96c 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8003b84:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b8e:	d14c      	bne.n	8003c2a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009a      	lsls	r2, r3, #2
 8003b9a:	441a      	add	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba6:	4a4a      	ldr	r2, [pc, #296]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	0119      	lsls	r1, r3, #4
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009a      	lsls	r2, r3, #2
 8003bba:	441a      	add	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc6:	4b42      	ldr	r3, [pc, #264]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003bc8:	fba3 0302 	umull	r0, r3, r3, r2
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	2064      	movs	r0, #100	@ 0x64
 8003bd0:	fb00 f303 	mul.w	r3, r0, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	3332      	adds	r3, #50	@ 0x32
 8003bda:	4a3d      	ldr	r2, [pc, #244]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003be8:	4419      	add	r1, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009a      	lsls	r2, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c00:	4b33      	ldr	r3, [pc, #204]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003c02:	fba3 0302 	umull	r0, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2064      	movs	r0, #100	@ 0x64
 8003c0a:	fb00 f303 	mul.w	r3, r0, r3
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	3332      	adds	r3, #50	@ 0x32
 8003c14:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	f003 0207 	and.w	r2, r3, #7
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	440a      	add	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c28:	e04a      	b.n	8003cc0 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009a      	lsls	r2, r3, #2
 8003c34:	441a      	add	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	4a23      	ldr	r2, [pc, #140]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	0119      	lsls	r1, r3, #4
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009a      	lsls	r2, r3, #2
 8003c54:	441a      	add	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c60:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003c62:	fba3 0302 	umull	r0, r3, r3, r2
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2064      	movs	r0, #100	@ 0x64
 8003c6a:	fb00 f303 	mul.w	r3, r0, r3
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	3332      	adds	r3, #50	@ 0x32
 8003c74:	4a16      	ldr	r2, [pc, #88]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003c76:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c80:	4419      	add	r1, r3
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	009a      	lsls	r2, r3, #2
 8003c8c:	441a      	add	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c98:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003c9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c9e:	095b      	lsrs	r3, r3, #5
 8003ca0:	2064      	movs	r0, #100	@ 0x64
 8003ca2:	fb00 f303 	mul.w	r3, r0, r3
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	3332      	adds	r3, #50	@ 0x32
 8003cac:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <UART_SetConfig+0x1d0>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	f003 020f 	and.w	r2, r3, #15
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40011000 	.word	0x40011000
 8003ccc:	40011400 	.word	0x40011400
 8003cd0:	51eb851f 	.word	0x51eb851f

08003cd4 <std>:
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	b510      	push	{r4, lr}
 8003cd8:	4604      	mov	r4, r0
 8003cda:	e9c0 3300 	strd	r3, r3, [r0]
 8003cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ce2:	6083      	str	r3, [r0, #8]
 8003ce4:	8181      	strh	r1, [r0, #12]
 8003ce6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ce8:	81c2      	strh	r2, [r0, #14]
 8003cea:	6183      	str	r3, [r0, #24]
 8003cec:	4619      	mov	r1, r3
 8003cee:	2208      	movs	r2, #8
 8003cf0:	305c      	adds	r0, #92	@ 0x5c
 8003cf2:	f000 f9e7 	bl	80040c4 <memset>
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d2c <std+0x58>)
 8003cf8:	6224      	str	r4, [r4, #32]
 8003cfa:	6263      	str	r3, [r4, #36]	@ 0x24
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d30 <std+0x5c>)
 8003cfe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d00:	4b0c      	ldr	r3, [pc, #48]	@ (8003d34 <std+0x60>)
 8003d02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d04:	4b0c      	ldr	r3, [pc, #48]	@ (8003d38 <std+0x64>)
 8003d06:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d08:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <std+0x68>)
 8003d0a:	429c      	cmp	r4, r3
 8003d0c:	d006      	beq.n	8003d1c <std+0x48>
 8003d0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d12:	4294      	cmp	r4, r2
 8003d14:	d002      	beq.n	8003d1c <std+0x48>
 8003d16:	33d0      	adds	r3, #208	@ 0xd0
 8003d18:	429c      	cmp	r4, r3
 8003d1a:	d105      	bne.n	8003d28 <std+0x54>
 8003d1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d24:	f000 ba46 	b.w	80041b4 <__retarget_lock_init_recursive>
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08003f15 	.word	0x08003f15
 8003d30:	08003f37 	.word	0x08003f37
 8003d34:	08003f6f 	.word	0x08003f6f
 8003d38:	08003f93 	.word	0x08003f93
 8003d3c:	20000258 	.word	0x20000258

08003d40 <stdio_exit_handler>:
 8003d40:	4a02      	ldr	r2, [pc, #8]	@ (8003d4c <stdio_exit_handler+0xc>)
 8003d42:	4903      	ldr	r1, [pc, #12]	@ (8003d50 <stdio_exit_handler+0x10>)
 8003d44:	4803      	ldr	r0, [pc, #12]	@ (8003d54 <stdio_exit_handler+0x14>)
 8003d46:	f000 b869 	b.w	8003e1c <_fwalk_sglue>
 8003d4a:	bf00      	nop
 8003d4c:	2000000c 	.word	0x2000000c
 8003d50:	080044a9 	.word	0x080044a9
 8003d54:	2000001c 	.word	0x2000001c

08003d58 <cleanup_stdio>:
 8003d58:	6841      	ldr	r1, [r0, #4]
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <cleanup_stdio+0x34>)
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	4604      	mov	r4, r0
 8003d62:	d001      	beq.n	8003d68 <cleanup_stdio+0x10>
 8003d64:	f000 fba0 	bl	80044a8 <_fflush_r>
 8003d68:	68a1      	ldr	r1, [r4, #8]
 8003d6a:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <cleanup_stdio+0x38>)
 8003d6c:	4299      	cmp	r1, r3
 8003d6e:	d002      	beq.n	8003d76 <cleanup_stdio+0x1e>
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 fb99 	bl	80044a8 <_fflush_r>
 8003d76:	68e1      	ldr	r1, [r4, #12]
 8003d78:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <cleanup_stdio+0x3c>)
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	d004      	beq.n	8003d88 <cleanup_stdio+0x30>
 8003d7e:	4620      	mov	r0, r4
 8003d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d84:	f000 bb90 	b.w	80044a8 <_fflush_r>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000258 	.word	0x20000258
 8003d90:	200002c0 	.word	0x200002c0
 8003d94:	20000328 	.word	0x20000328

08003d98 <global_stdio_init.part.0>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <global_stdio_init.part.0+0x30>)
 8003d9c:	4c0b      	ldr	r4, [pc, #44]	@ (8003dcc <global_stdio_init.part.0+0x34>)
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd0 <global_stdio_init.part.0+0x38>)
 8003da0:	4620      	mov	r0, r4
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	2104      	movs	r1, #4
 8003da6:	2200      	movs	r2, #0
 8003da8:	f7ff ff94 	bl	8003cd4 <std>
 8003dac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003db0:	2201      	movs	r2, #1
 8003db2:	2109      	movs	r1, #9
 8003db4:	f7ff ff8e 	bl	8003cd4 <std>
 8003db8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc2:	2112      	movs	r1, #18
 8003dc4:	f7ff bf86 	b.w	8003cd4 <std>
 8003dc8:	20000390 	.word	0x20000390
 8003dcc:	20000258 	.word	0x20000258
 8003dd0:	08003d41 	.word	0x08003d41

08003dd4 <__sfp_lock_acquire>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	@ (8003ddc <__sfp_lock_acquire+0x8>)
 8003dd6:	f000 b9ee 	b.w	80041b6 <__retarget_lock_acquire_recursive>
 8003dda:	bf00      	nop
 8003ddc:	20000399 	.word	0x20000399

08003de0 <__sfp_lock_release>:
 8003de0:	4801      	ldr	r0, [pc, #4]	@ (8003de8 <__sfp_lock_release+0x8>)
 8003de2:	f000 b9e9 	b.w	80041b8 <__retarget_lock_release_recursive>
 8003de6:	bf00      	nop
 8003de8:	20000399 	.word	0x20000399

08003dec <__sinit>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	4604      	mov	r4, r0
 8003df0:	f7ff fff0 	bl	8003dd4 <__sfp_lock_acquire>
 8003df4:	6a23      	ldr	r3, [r4, #32]
 8003df6:	b11b      	cbz	r3, 8003e00 <__sinit+0x14>
 8003df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfc:	f7ff bff0 	b.w	8003de0 <__sfp_lock_release>
 8003e00:	4b04      	ldr	r3, [pc, #16]	@ (8003e14 <__sinit+0x28>)
 8003e02:	6223      	str	r3, [r4, #32]
 8003e04:	4b04      	ldr	r3, [pc, #16]	@ (8003e18 <__sinit+0x2c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1f5      	bne.n	8003df8 <__sinit+0xc>
 8003e0c:	f7ff ffc4 	bl	8003d98 <global_stdio_init.part.0>
 8003e10:	e7f2      	b.n	8003df8 <__sinit+0xc>
 8003e12:	bf00      	nop
 8003e14:	08003d59 	.word	0x08003d59
 8003e18:	20000390 	.word	0x20000390

08003e1c <_fwalk_sglue>:
 8003e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e20:	4607      	mov	r7, r0
 8003e22:	4688      	mov	r8, r1
 8003e24:	4614      	mov	r4, r2
 8003e26:	2600      	movs	r6, #0
 8003e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8003e30:	d505      	bpl.n	8003e3e <_fwalk_sglue+0x22>
 8003e32:	6824      	ldr	r4, [r4, #0]
 8003e34:	2c00      	cmp	r4, #0
 8003e36:	d1f7      	bne.n	8003e28 <_fwalk_sglue+0xc>
 8003e38:	4630      	mov	r0, r6
 8003e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e3e:	89ab      	ldrh	r3, [r5, #12]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d907      	bls.n	8003e54 <_fwalk_sglue+0x38>
 8003e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	d003      	beq.n	8003e54 <_fwalk_sglue+0x38>
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4638      	mov	r0, r7
 8003e50:	47c0      	blx	r8
 8003e52:	4306      	orrs	r6, r0
 8003e54:	3568      	adds	r5, #104	@ 0x68
 8003e56:	e7e9      	b.n	8003e2c <_fwalk_sglue+0x10>

08003e58 <_puts_r>:
 8003e58:	6a03      	ldr	r3, [r0, #32]
 8003e5a:	b570      	push	{r4, r5, r6, lr}
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	460e      	mov	r6, r1
 8003e60:	6884      	ldr	r4, [r0, #8]
 8003e62:	b90b      	cbnz	r3, 8003e68 <_puts_r+0x10>
 8003e64:	f7ff ffc2 	bl	8003dec <__sinit>
 8003e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e6a:	07db      	lsls	r3, r3, #31
 8003e6c:	d405      	bmi.n	8003e7a <_puts_r+0x22>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	0598      	lsls	r0, r3, #22
 8003e72:	d402      	bmi.n	8003e7a <_puts_r+0x22>
 8003e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e76:	f000 f99e 	bl	80041b6 <__retarget_lock_acquire_recursive>
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	0719      	lsls	r1, r3, #28
 8003e7e:	d502      	bpl.n	8003e86 <_puts_r+0x2e>
 8003e80:	6923      	ldr	r3, [r4, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d135      	bne.n	8003ef2 <_puts_r+0x9a>
 8003e86:	4621      	mov	r1, r4
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f000 f8c5 	bl	8004018 <__swsetup_r>
 8003e8e:	b380      	cbz	r0, 8003ef2 <_puts_r+0x9a>
 8003e90:	f04f 35ff 	mov.w	r5, #4294967295
 8003e94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e96:	07da      	lsls	r2, r3, #31
 8003e98:	d405      	bmi.n	8003ea6 <_puts_r+0x4e>
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	059b      	lsls	r3, r3, #22
 8003e9e:	d402      	bmi.n	8003ea6 <_puts_r+0x4e>
 8003ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ea2:	f000 f989 	bl	80041b8 <__retarget_lock_release_recursive>
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	bd70      	pop	{r4, r5, r6, pc}
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da04      	bge.n	8003eb8 <_puts_r+0x60>
 8003eae:	69a2      	ldr	r2, [r4, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	dc17      	bgt.n	8003ee4 <_puts_r+0x8c>
 8003eb4:	290a      	cmp	r1, #10
 8003eb6:	d015      	beq.n	8003ee4 <_puts_r+0x8c>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	6022      	str	r2, [r4, #0]
 8003ebe:	7019      	strb	r1, [r3, #0]
 8003ec0:	68a3      	ldr	r3, [r4, #8]
 8003ec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	60a3      	str	r3, [r4, #8]
 8003eca:	2900      	cmp	r1, #0
 8003ecc:	d1ed      	bne.n	8003eaa <_puts_r+0x52>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	da11      	bge.n	8003ef6 <_puts_r+0x9e>
 8003ed2:	4622      	mov	r2, r4
 8003ed4:	210a      	movs	r1, #10
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 f85f 	bl	8003f9a <__swbuf_r>
 8003edc:	3001      	adds	r0, #1
 8003ede:	d0d7      	beq.n	8003e90 <_puts_r+0x38>
 8003ee0:	250a      	movs	r5, #10
 8003ee2:	e7d7      	b.n	8003e94 <_puts_r+0x3c>
 8003ee4:	4622      	mov	r2, r4
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	f000 f857 	bl	8003f9a <__swbuf_r>
 8003eec:	3001      	adds	r0, #1
 8003eee:	d1e7      	bne.n	8003ec0 <_puts_r+0x68>
 8003ef0:	e7ce      	b.n	8003e90 <_puts_r+0x38>
 8003ef2:	3e01      	subs	r6, #1
 8003ef4:	e7e4      	b.n	8003ec0 <_puts_r+0x68>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	6022      	str	r2, [r4, #0]
 8003efc:	220a      	movs	r2, #10
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e7ee      	b.n	8003ee0 <_puts_r+0x88>
	...

08003f04 <puts>:
 8003f04:	4b02      	ldr	r3, [pc, #8]	@ (8003f10 <puts+0xc>)
 8003f06:	4601      	mov	r1, r0
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	f7ff bfa5 	b.w	8003e58 <_puts_r>
 8003f0e:	bf00      	nop
 8003f10:	20000018 	.word	0x20000018

08003f14 <__sread>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	460c      	mov	r4, r1
 8003f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1c:	f000 f8fc 	bl	8004118 <_read_r>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	bfab      	itete	ge
 8003f24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f26:	89a3      	ldrhlt	r3, [r4, #12]
 8003f28:	181b      	addge	r3, r3, r0
 8003f2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f2e:	bfac      	ite	ge
 8003f30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f32:	81a3      	strhlt	r3, [r4, #12]
 8003f34:	bd10      	pop	{r4, pc}

08003f36 <__swrite>:
 8003f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3a:	461f      	mov	r7, r3
 8003f3c:	898b      	ldrh	r3, [r1, #12]
 8003f3e:	4605      	mov	r5, r0
 8003f40:	05db      	lsls	r3, r3, #23
 8003f42:	460c      	mov	r4, r1
 8003f44:	4616      	mov	r6, r2
 8003f46:	d505      	bpl.n	8003f54 <__swrite+0x1e>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f50:	f000 f8d0 	bl	80040f4 <_lseek_r>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	4632      	mov	r2, r6
 8003f58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f5c:	81a3      	strh	r3, [r4, #12]
 8003f5e:	4628      	mov	r0, r5
 8003f60:	463b      	mov	r3, r7
 8003f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	f000 b8e7 	b.w	800413c <_write_r>

08003f6e <__sseek>:
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	460c      	mov	r4, r1
 8003f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f76:	f000 f8bd 	bl	80040f4 <_lseek_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	bf15      	itete	ne
 8003f80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f8a:	81a3      	strheq	r3, [r4, #12]
 8003f8c:	bf18      	it	ne
 8003f8e:	81a3      	strhne	r3, [r4, #12]
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <__sclose>:
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 b89d 	b.w	80040d4 <_close_r>

08003f9a <__swbuf_r>:
 8003f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9c:	460e      	mov	r6, r1
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	b118      	cbz	r0, 8003fac <__swbuf_r+0x12>
 8003fa4:	6a03      	ldr	r3, [r0, #32]
 8003fa6:	b90b      	cbnz	r3, 8003fac <__swbuf_r+0x12>
 8003fa8:	f7ff ff20 	bl	8003dec <__sinit>
 8003fac:	69a3      	ldr	r3, [r4, #24]
 8003fae:	60a3      	str	r3, [r4, #8]
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	071a      	lsls	r2, r3, #28
 8003fb4:	d501      	bpl.n	8003fba <__swbuf_r+0x20>
 8003fb6:	6923      	ldr	r3, [r4, #16]
 8003fb8:	b943      	cbnz	r3, 8003fcc <__swbuf_r+0x32>
 8003fba:	4621      	mov	r1, r4
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	f000 f82b 	bl	8004018 <__swsetup_r>
 8003fc2:	b118      	cbz	r0, 8003fcc <__swbuf_r+0x32>
 8003fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8003fc8:	4638      	mov	r0, r7
 8003fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	6922      	ldr	r2, [r4, #16]
 8003fd0:	b2f6      	uxtb	r6, r6
 8003fd2:	1a98      	subs	r0, r3, r2
 8003fd4:	6963      	ldr	r3, [r4, #20]
 8003fd6:	4637      	mov	r7, r6
 8003fd8:	4283      	cmp	r3, r0
 8003fda:	dc05      	bgt.n	8003fe8 <__swbuf_r+0x4e>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f000 fa62 	bl	80044a8 <_fflush_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d1ed      	bne.n	8003fc4 <__swbuf_r+0x2a>
 8003fe8:	68a3      	ldr	r3, [r4, #8]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	6022      	str	r2, [r4, #0]
 8003ff4:	701e      	strb	r6, [r3, #0]
 8003ff6:	6962      	ldr	r2, [r4, #20]
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d004      	beq.n	8004008 <__swbuf_r+0x6e>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	07db      	lsls	r3, r3, #31
 8004002:	d5e1      	bpl.n	8003fc8 <__swbuf_r+0x2e>
 8004004:	2e0a      	cmp	r6, #10
 8004006:	d1df      	bne.n	8003fc8 <__swbuf_r+0x2e>
 8004008:	4621      	mov	r1, r4
 800400a:	4628      	mov	r0, r5
 800400c:	f000 fa4c 	bl	80044a8 <_fflush_r>
 8004010:	2800      	cmp	r0, #0
 8004012:	d0d9      	beq.n	8003fc8 <__swbuf_r+0x2e>
 8004014:	e7d6      	b.n	8003fc4 <__swbuf_r+0x2a>
	...

08004018 <__swsetup_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4b29      	ldr	r3, [pc, #164]	@ (80040c0 <__swsetup_r+0xa8>)
 800401c:	4605      	mov	r5, r0
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	460c      	mov	r4, r1
 8004022:	b118      	cbz	r0, 800402c <__swsetup_r+0x14>
 8004024:	6a03      	ldr	r3, [r0, #32]
 8004026:	b90b      	cbnz	r3, 800402c <__swsetup_r+0x14>
 8004028:	f7ff fee0 	bl	8003dec <__sinit>
 800402c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004030:	0719      	lsls	r1, r3, #28
 8004032:	d422      	bmi.n	800407a <__swsetup_r+0x62>
 8004034:	06da      	lsls	r2, r3, #27
 8004036:	d407      	bmi.n	8004048 <__swsetup_r+0x30>
 8004038:	2209      	movs	r2, #9
 800403a:	602a      	str	r2, [r5, #0]
 800403c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	e033      	b.n	80040b0 <__swsetup_r+0x98>
 8004048:	0758      	lsls	r0, r3, #29
 800404a:	d512      	bpl.n	8004072 <__swsetup_r+0x5a>
 800404c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800404e:	b141      	cbz	r1, 8004062 <__swsetup_r+0x4a>
 8004050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004054:	4299      	cmp	r1, r3
 8004056:	d002      	beq.n	800405e <__swsetup_r+0x46>
 8004058:	4628      	mov	r0, r5
 800405a:	f000 f8af 	bl	80041bc <_free_r>
 800405e:	2300      	movs	r3, #0
 8004060:	6363      	str	r3, [r4, #52]	@ 0x34
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	2300      	movs	r3, #0
 800406c:	6063      	str	r3, [r4, #4]
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	f043 0308 	orr.w	r3, r3, #8
 8004078:	81a3      	strh	r3, [r4, #12]
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	b94b      	cbnz	r3, 8004092 <__swsetup_r+0x7a>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004088:	d003      	beq.n	8004092 <__swsetup_r+0x7a>
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 fa58 	bl	8004542 <__smakebuf_r>
 8004092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004096:	f013 0201 	ands.w	r2, r3, #1
 800409a:	d00a      	beq.n	80040b2 <__swsetup_r+0x9a>
 800409c:	2200      	movs	r2, #0
 800409e:	60a2      	str	r2, [r4, #8]
 80040a0:	6962      	ldr	r2, [r4, #20]
 80040a2:	4252      	negs	r2, r2
 80040a4:	61a2      	str	r2, [r4, #24]
 80040a6:	6922      	ldr	r2, [r4, #16]
 80040a8:	b942      	cbnz	r2, 80040bc <__swsetup_r+0xa4>
 80040aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80040ae:	d1c5      	bne.n	800403c <__swsetup_r+0x24>
 80040b0:	bd38      	pop	{r3, r4, r5, pc}
 80040b2:	0799      	lsls	r1, r3, #30
 80040b4:	bf58      	it	pl
 80040b6:	6962      	ldrpl	r2, [r4, #20]
 80040b8:	60a2      	str	r2, [r4, #8]
 80040ba:	e7f4      	b.n	80040a6 <__swsetup_r+0x8e>
 80040bc:	2000      	movs	r0, #0
 80040be:	e7f7      	b.n	80040b0 <__swsetup_r+0x98>
 80040c0:	20000018 	.word	0x20000018

080040c4 <memset>:
 80040c4:	4603      	mov	r3, r0
 80040c6:	4402      	add	r2, r0
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d100      	bne.n	80040ce <memset+0xa>
 80040cc:	4770      	bx	lr
 80040ce:	f803 1b01 	strb.w	r1, [r3], #1
 80040d2:	e7f9      	b.n	80040c8 <memset+0x4>

080040d4 <_close_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	2300      	movs	r3, #0
 80040d8:	4d05      	ldr	r5, [pc, #20]	@ (80040f0 <_close_r+0x1c>)
 80040da:	4604      	mov	r4, r0
 80040dc:	4608      	mov	r0, r1
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	f7fd f88d 	bl	80011fe <_close>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_close_r+0x1a>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_close_r+0x1a>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000394 	.word	0x20000394

080040f4 <_lseek_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4604      	mov	r4, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	2200      	movs	r2, #0
 80040fe:	4d05      	ldr	r5, [pc, #20]	@ (8004114 <_lseek_r+0x20>)
 8004100:	602a      	str	r2, [r5, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	f7fd f89f 	bl	8001246 <_lseek>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_lseek_r+0x1e>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_lseek_r+0x1e>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	20000394 	.word	0x20000394

08004118 <_read_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4604      	mov	r4, r0
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	2200      	movs	r2, #0
 8004122:	4d05      	ldr	r5, [pc, #20]	@ (8004138 <_read_r+0x20>)
 8004124:	602a      	str	r2, [r5, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	f7fd f84c 	bl	80011c4 <_read>
 800412c:	1c43      	adds	r3, r0, #1
 800412e:	d102      	bne.n	8004136 <_read_r+0x1e>
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	b103      	cbz	r3, 8004136 <_read_r+0x1e>
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	bd38      	pop	{r3, r4, r5, pc}
 8004138:	20000394 	.word	0x20000394

0800413c <_write_r>:
 800413c:	b538      	push	{r3, r4, r5, lr}
 800413e:	4604      	mov	r4, r0
 8004140:	4608      	mov	r0, r1
 8004142:	4611      	mov	r1, r2
 8004144:	2200      	movs	r2, #0
 8004146:	4d05      	ldr	r5, [pc, #20]	@ (800415c <_write_r+0x20>)
 8004148:	602a      	str	r2, [r5, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	f7fc fb00 	bl	8000750 <_write>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_write_r+0x1e>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_write_r+0x1e>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20000394 	.word	0x20000394

08004160 <__errno>:
 8004160:	4b01      	ldr	r3, [pc, #4]	@ (8004168 <__errno+0x8>)
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000018 	.word	0x20000018

0800416c <__libc_init_array>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	2600      	movs	r6, #0
 8004170:	4d0c      	ldr	r5, [pc, #48]	@ (80041a4 <__libc_init_array+0x38>)
 8004172:	4c0d      	ldr	r4, [pc, #52]	@ (80041a8 <__libc_init_array+0x3c>)
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	42a6      	cmp	r6, r4
 800417a:	d109      	bne.n	8004190 <__libc_init_array+0x24>
 800417c:	f000 fa50 	bl	8004620 <_init>
 8004180:	2600      	movs	r6, #0
 8004182:	4d0a      	ldr	r5, [pc, #40]	@ (80041ac <__libc_init_array+0x40>)
 8004184:	4c0a      	ldr	r4, [pc, #40]	@ (80041b0 <__libc_init_array+0x44>)
 8004186:	1b64      	subs	r4, r4, r5
 8004188:	10a4      	asrs	r4, r4, #2
 800418a:	42a6      	cmp	r6, r4
 800418c:	d105      	bne.n	800419a <__libc_init_array+0x2e>
 800418e:	bd70      	pop	{r4, r5, r6, pc}
 8004190:	f855 3b04 	ldr.w	r3, [r5], #4
 8004194:	4798      	blx	r3
 8004196:	3601      	adds	r6, #1
 8004198:	e7ee      	b.n	8004178 <__libc_init_array+0xc>
 800419a:	f855 3b04 	ldr.w	r3, [r5], #4
 800419e:	4798      	blx	r3
 80041a0:	3601      	adds	r6, #1
 80041a2:	e7f2      	b.n	800418a <__libc_init_array+0x1e>
 80041a4:	080046d8 	.word	0x080046d8
 80041a8:	080046d8 	.word	0x080046d8
 80041ac:	080046d8 	.word	0x080046d8
 80041b0:	080046dc 	.word	0x080046dc

080041b4 <__retarget_lock_init_recursive>:
 80041b4:	4770      	bx	lr

080041b6 <__retarget_lock_acquire_recursive>:
 80041b6:	4770      	bx	lr

080041b8 <__retarget_lock_release_recursive>:
 80041b8:	4770      	bx	lr
	...

080041bc <_free_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	4605      	mov	r5, r0
 80041c0:	2900      	cmp	r1, #0
 80041c2:	d040      	beq.n	8004246 <_free_r+0x8a>
 80041c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c8:	1f0c      	subs	r4, r1, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bfb8      	it	lt
 80041ce:	18e4      	addlt	r4, r4, r3
 80041d0:	f000 f8de 	bl	8004390 <__malloc_lock>
 80041d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004248 <_free_r+0x8c>)
 80041d6:	6813      	ldr	r3, [r2, #0]
 80041d8:	b933      	cbnz	r3, 80041e8 <_free_r+0x2c>
 80041da:	6063      	str	r3, [r4, #4]
 80041dc:	6014      	str	r4, [r2, #0]
 80041de:	4628      	mov	r0, r5
 80041e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041e4:	f000 b8da 	b.w	800439c <__malloc_unlock>
 80041e8:	42a3      	cmp	r3, r4
 80041ea:	d908      	bls.n	80041fe <_free_r+0x42>
 80041ec:	6820      	ldr	r0, [r4, #0]
 80041ee:	1821      	adds	r1, r4, r0
 80041f0:	428b      	cmp	r3, r1
 80041f2:	bf01      	itttt	eq
 80041f4:	6819      	ldreq	r1, [r3, #0]
 80041f6:	685b      	ldreq	r3, [r3, #4]
 80041f8:	1809      	addeq	r1, r1, r0
 80041fa:	6021      	streq	r1, [r4, #0]
 80041fc:	e7ed      	b.n	80041da <_free_r+0x1e>
 80041fe:	461a      	mov	r2, r3
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	b10b      	cbz	r3, 8004208 <_free_r+0x4c>
 8004204:	42a3      	cmp	r3, r4
 8004206:	d9fa      	bls.n	80041fe <_free_r+0x42>
 8004208:	6811      	ldr	r1, [r2, #0]
 800420a:	1850      	adds	r0, r2, r1
 800420c:	42a0      	cmp	r0, r4
 800420e:	d10b      	bne.n	8004228 <_free_r+0x6c>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	4401      	add	r1, r0
 8004214:	1850      	adds	r0, r2, r1
 8004216:	4283      	cmp	r3, r0
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	d1e0      	bne.n	80041de <_free_r+0x22>
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	4408      	add	r0, r1
 8004222:	6010      	str	r0, [r2, #0]
 8004224:	6053      	str	r3, [r2, #4]
 8004226:	e7da      	b.n	80041de <_free_r+0x22>
 8004228:	d902      	bls.n	8004230 <_free_r+0x74>
 800422a:	230c      	movs	r3, #12
 800422c:	602b      	str	r3, [r5, #0]
 800422e:	e7d6      	b.n	80041de <_free_r+0x22>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	1821      	adds	r1, r4, r0
 8004234:	428b      	cmp	r3, r1
 8004236:	bf01      	itttt	eq
 8004238:	6819      	ldreq	r1, [r3, #0]
 800423a:	685b      	ldreq	r3, [r3, #4]
 800423c:	1809      	addeq	r1, r1, r0
 800423e:	6021      	streq	r1, [r4, #0]
 8004240:	6063      	str	r3, [r4, #4]
 8004242:	6054      	str	r4, [r2, #4]
 8004244:	e7cb      	b.n	80041de <_free_r+0x22>
 8004246:	bd38      	pop	{r3, r4, r5, pc}
 8004248:	200003a0 	.word	0x200003a0

0800424c <sbrk_aligned>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	4e0f      	ldr	r6, [pc, #60]	@ (800428c <sbrk_aligned+0x40>)
 8004250:	460c      	mov	r4, r1
 8004252:	6831      	ldr	r1, [r6, #0]
 8004254:	4605      	mov	r5, r0
 8004256:	b911      	cbnz	r1, 800425e <sbrk_aligned+0x12>
 8004258:	f000 f9d2 	bl	8004600 <_sbrk_r>
 800425c:	6030      	str	r0, [r6, #0]
 800425e:	4621      	mov	r1, r4
 8004260:	4628      	mov	r0, r5
 8004262:	f000 f9cd 	bl	8004600 <_sbrk_r>
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	d103      	bne.n	8004272 <sbrk_aligned+0x26>
 800426a:	f04f 34ff 	mov.w	r4, #4294967295
 800426e:	4620      	mov	r0, r4
 8004270:	bd70      	pop	{r4, r5, r6, pc}
 8004272:	1cc4      	adds	r4, r0, #3
 8004274:	f024 0403 	bic.w	r4, r4, #3
 8004278:	42a0      	cmp	r0, r4
 800427a:	d0f8      	beq.n	800426e <sbrk_aligned+0x22>
 800427c:	1a21      	subs	r1, r4, r0
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f9be 	bl	8004600 <_sbrk_r>
 8004284:	3001      	adds	r0, #1
 8004286:	d1f2      	bne.n	800426e <sbrk_aligned+0x22>
 8004288:	e7ef      	b.n	800426a <sbrk_aligned+0x1e>
 800428a:	bf00      	nop
 800428c:	2000039c 	.word	0x2000039c

08004290 <_malloc_r>:
 8004290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004294:	1ccd      	adds	r5, r1, #3
 8004296:	f025 0503 	bic.w	r5, r5, #3
 800429a:	3508      	adds	r5, #8
 800429c:	2d0c      	cmp	r5, #12
 800429e:	bf38      	it	cc
 80042a0:	250c      	movcc	r5, #12
 80042a2:	2d00      	cmp	r5, #0
 80042a4:	4606      	mov	r6, r0
 80042a6:	db01      	blt.n	80042ac <_malloc_r+0x1c>
 80042a8:	42a9      	cmp	r1, r5
 80042aa:	d904      	bls.n	80042b6 <_malloc_r+0x26>
 80042ac:	230c      	movs	r3, #12
 80042ae:	6033      	str	r3, [r6, #0]
 80042b0:	2000      	movs	r0, #0
 80042b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800438c <_malloc_r+0xfc>
 80042ba:	f000 f869 	bl	8004390 <__malloc_lock>
 80042be:	f8d8 3000 	ldr.w	r3, [r8]
 80042c2:	461c      	mov	r4, r3
 80042c4:	bb44      	cbnz	r4, 8004318 <_malloc_r+0x88>
 80042c6:	4629      	mov	r1, r5
 80042c8:	4630      	mov	r0, r6
 80042ca:	f7ff ffbf 	bl	800424c <sbrk_aligned>
 80042ce:	1c43      	adds	r3, r0, #1
 80042d0:	4604      	mov	r4, r0
 80042d2:	d158      	bne.n	8004386 <_malloc_r+0xf6>
 80042d4:	f8d8 4000 	ldr.w	r4, [r8]
 80042d8:	4627      	mov	r7, r4
 80042da:	2f00      	cmp	r7, #0
 80042dc:	d143      	bne.n	8004366 <_malloc_r+0xd6>
 80042de:	2c00      	cmp	r4, #0
 80042e0:	d04b      	beq.n	800437a <_malloc_r+0xea>
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	4639      	mov	r1, r7
 80042e6:	4630      	mov	r0, r6
 80042e8:	eb04 0903 	add.w	r9, r4, r3
 80042ec:	f000 f988 	bl	8004600 <_sbrk_r>
 80042f0:	4581      	cmp	r9, r0
 80042f2:	d142      	bne.n	800437a <_malloc_r+0xea>
 80042f4:	6821      	ldr	r1, [r4, #0]
 80042f6:	4630      	mov	r0, r6
 80042f8:	1a6d      	subs	r5, r5, r1
 80042fa:	4629      	mov	r1, r5
 80042fc:	f7ff ffa6 	bl	800424c <sbrk_aligned>
 8004300:	3001      	adds	r0, #1
 8004302:	d03a      	beq.n	800437a <_malloc_r+0xea>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	442b      	add	r3, r5
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	f8d8 3000 	ldr.w	r3, [r8]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	bb62      	cbnz	r2, 800436c <_malloc_r+0xdc>
 8004312:	f8c8 7000 	str.w	r7, [r8]
 8004316:	e00f      	b.n	8004338 <_malloc_r+0xa8>
 8004318:	6822      	ldr	r2, [r4, #0]
 800431a:	1b52      	subs	r2, r2, r5
 800431c:	d420      	bmi.n	8004360 <_malloc_r+0xd0>
 800431e:	2a0b      	cmp	r2, #11
 8004320:	d917      	bls.n	8004352 <_malloc_r+0xc2>
 8004322:	1961      	adds	r1, r4, r5
 8004324:	42a3      	cmp	r3, r4
 8004326:	6025      	str	r5, [r4, #0]
 8004328:	bf18      	it	ne
 800432a:	6059      	strne	r1, [r3, #4]
 800432c:	6863      	ldr	r3, [r4, #4]
 800432e:	bf08      	it	eq
 8004330:	f8c8 1000 	streq.w	r1, [r8]
 8004334:	5162      	str	r2, [r4, r5]
 8004336:	604b      	str	r3, [r1, #4]
 8004338:	4630      	mov	r0, r6
 800433a:	f000 f82f 	bl	800439c <__malloc_unlock>
 800433e:	f104 000b 	add.w	r0, r4, #11
 8004342:	1d23      	adds	r3, r4, #4
 8004344:	f020 0007 	bic.w	r0, r0, #7
 8004348:	1ac2      	subs	r2, r0, r3
 800434a:	bf1c      	itt	ne
 800434c:	1a1b      	subne	r3, r3, r0
 800434e:	50a3      	strne	r3, [r4, r2]
 8004350:	e7af      	b.n	80042b2 <_malloc_r+0x22>
 8004352:	6862      	ldr	r2, [r4, #4]
 8004354:	42a3      	cmp	r3, r4
 8004356:	bf0c      	ite	eq
 8004358:	f8c8 2000 	streq.w	r2, [r8]
 800435c:	605a      	strne	r2, [r3, #4]
 800435e:	e7eb      	b.n	8004338 <_malloc_r+0xa8>
 8004360:	4623      	mov	r3, r4
 8004362:	6864      	ldr	r4, [r4, #4]
 8004364:	e7ae      	b.n	80042c4 <_malloc_r+0x34>
 8004366:	463c      	mov	r4, r7
 8004368:	687f      	ldr	r7, [r7, #4]
 800436a:	e7b6      	b.n	80042da <_malloc_r+0x4a>
 800436c:	461a      	mov	r2, r3
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	42a3      	cmp	r3, r4
 8004372:	d1fb      	bne.n	800436c <_malloc_r+0xdc>
 8004374:	2300      	movs	r3, #0
 8004376:	6053      	str	r3, [r2, #4]
 8004378:	e7de      	b.n	8004338 <_malloc_r+0xa8>
 800437a:	230c      	movs	r3, #12
 800437c:	4630      	mov	r0, r6
 800437e:	6033      	str	r3, [r6, #0]
 8004380:	f000 f80c 	bl	800439c <__malloc_unlock>
 8004384:	e794      	b.n	80042b0 <_malloc_r+0x20>
 8004386:	6005      	str	r5, [r0, #0]
 8004388:	e7d6      	b.n	8004338 <_malloc_r+0xa8>
 800438a:	bf00      	nop
 800438c:	200003a0 	.word	0x200003a0

08004390 <__malloc_lock>:
 8004390:	4801      	ldr	r0, [pc, #4]	@ (8004398 <__malloc_lock+0x8>)
 8004392:	f7ff bf10 	b.w	80041b6 <__retarget_lock_acquire_recursive>
 8004396:	bf00      	nop
 8004398:	20000398 	.word	0x20000398

0800439c <__malloc_unlock>:
 800439c:	4801      	ldr	r0, [pc, #4]	@ (80043a4 <__malloc_unlock+0x8>)
 800439e:	f7ff bf0b 	b.w	80041b8 <__retarget_lock_release_recursive>
 80043a2:	bf00      	nop
 80043a4:	20000398 	.word	0x20000398

080043a8 <__sflush_r>:
 80043a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	0716      	lsls	r6, r2, #28
 80043b0:	4605      	mov	r5, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	d454      	bmi.n	8004460 <__sflush_r+0xb8>
 80043b6:	684b      	ldr	r3, [r1, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	dc02      	bgt.n	80043c2 <__sflush_r+0x1a>
 80043bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	dd48      	ble.n	8004454 <__sflush_r+0xac>
 80043c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043c4:	2e00      	cmp	r6, #0
 80043c6:	d045      	beq.n	8004454 <__sflush_r+0xac>
 80043c8:	2300      	movs	r3, #0
 80043ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80043ce:	682f      	ldr	r7, [r5, #0]
 80043d0:	6a21      	ldr	r1, [r4, #32]
 80043d2:	602b      	str	r3, [r5, #0]
 80043d4:	d030      	beq.n	8004438 <__sflush_r+0x90>
 80043d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	0759      	lsls	r1, r3, #29
 80043dc:	d505      	bpl.n	80043ea <__sflush_r+0x42>
 80043de:	6863      	ldr	r3, [r4, #4]
 80043e0:	1ad2      	subs	r2, r2, r3
 80043e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80043e4:	b10b      	cbz	r3, 80043ea <__sflush_r+0x42>
 80043e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80043e8:	1ad2      	subs	r2, r2, r3
 80043ea:	2300      	movs	r3, #0
 80043ec:	4628      	mov	r0, r5
 80043ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80043f0:	6a21      	ldr	r1, [r4, #32]
 80043f2:	47b0      	blx	r6
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	d106      	bne.n	8004408 <__sflush_r+0x60>
 80043fa:	6829      	ldr	r1, [r5, #0]
 80043fc:	291d      	cmp	r1, #29
 80043fe:	d82b      	bhi.n	8004458 <__sflush_r+0xb0>
 8004400:	4a28      	ldr	r2, [pc, #160]	@ (80044a4 <__sflush_r+0xfc>)
 8004402:	410a      	asrs	r2, r1
 8004404:	07d6      	lsls	r6, r2, #31
 8004406:	d427      	bmi.n	8004458 <__sflush_r+0xb0>
 8004408:	2200      	movs	r2, #0
 800440a:	6062      	str	r2, [r4, #4]
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	04d9      	lsls	r1, r3, #19
 8004410:	6022      	str	r2, [r4, #0]
 8004412:	d504      	bpl.n	800441e <__sflush_r+0x76>
 8004414:	1c42      	adds	r2, r0, #1
 8004416:	d101      	bne.n	800441c <__sflush_r+0x74>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	b903      	cbnz	r3, 800441e <__sflush_r+0x76>
 800441c:	6560      	str	r0, [r4, #84]	@ 0x54
 800441e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004420:	602f      	str	r7, [r5, #0]
 8004422:	b1b9      	cbz	r1, 8004454 <__sflush_r+0xac>
 8004424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004428:	4299      	cmp	r1, r3
 800442a:	d002      	beq.n	8004432 <__sflush_r+0x8a>
 800442c:	4628      	mov	r0, r5
 800442e:	f7ff fec5 	bl	80041bc <_free_r>
 8004432:	2300      	movs	r3, #0
 8004434:	6363      	str	r3, [r4, #52]	@ 0x34
 8004436:	e00d      	b.n	8004454 <__sflush_r+0xac>
 8004438:	2301      	movs	r3, #1
 800443a:	4628      	mov	r0, r5
 800443c:	47b0      	blx	r6
 800443e:	4602      	mov	r2, r0
 8004440:	1c50      	adds	r0, r2, #1
 8004442:	d1c9      	bne.n	80043d8 <__sflush_r+0x30>
 8004444:	682b      	ldr	r3, [r5, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0c6      	beq.n	80043d8 <__sflush_r+0x30>
 800444a:	2b1d      	cmp	r3, #29
 800444c:	d001      	beq.n	8004452 <__sflush_r+0xaa>
 800444e:	2b16      	cmp	r3, #22
 8004450:	d11d      	bne.n	800448e <__sflush_r+0xe6>
 8004452:	602f      	str	r7, [r5, #0]
 8004454:	2000      	movs	r0, #0
 8004456:	e021      	b.n	800449c <__sflush_r+0xf4>
 8004458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800445c:	b21b      	sxth	r3, r3
 800445e:	e01a      	b.n	8004496 <__sflush_r+0xee>
 8004460:	690f      	ldr	r7, [r1, #16]
 8004462:	2f00      	cmp	r7, #0
 8004464:	d0f6      	beq.n	8004454 <__sflush_r+0xac>
 8004466:	0793      	lsls	r3, r2, #30
 8004468:	bf18      	it	ne
 800446a:	2300      	movne	r3, #0
 800446c:	680e      	ldr	r6, [r1, #0]
 800446e:	bf08      	it	eq
 8004470:	694b      	ldreq	r3, [r1, #20]
 8004472:	1bf6      	subs	r6, r6, r7
 8004474:	600f      	str	r7, [r1, #0]
 8004476:	608b      	str	r3, [r1, #8]
 8004478:	2e00      	cmp	r6, #0
 800447a:	ddeb      	ble.n	8004454 <__sflush_r+0xac>
 800447c:	4633      	mov	r3, r6
 800447e:	463a      	mov	r2, r7
 8004480:	4628      	mov	r0, r5
 8004482:	6a21      	ldr	r1, [r4, #32]
 8004484:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004488:	47e0      	blx	ip
 800448a:	2800      	cmp	r0, #0
 800448c:	dc07      	bgt.n	800449e <__sflush_r+0xf6>
 800448e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004496:	f04f 30ff 	mov.w	r0, #4294967295
 800449a:	81a3      	strh	r3, [r4, #12]
 800449c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800449e:	4407      	add	r7, r0
 80044a0:	1a36      	subs	r6, r6, r0
 80044a2:	e7e9      	b.n	8004478 <__sflush_r+0xd0>
 80044a4:	dfbffffe 	.word	0xdfbffffe

080044a8 <_fflush_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	690b      	ldr	r3, [r1, #16]
 80044ac:	4605      	mov	r5, r0
 80044ae:	460c      	mov	r4, r1
 80044b0:	b913      	cbnz	r3, 80044b8 <_fflush_r+0x10>
 80044b2:	2500      	movs	r5, #0
 80044b4:	4628      	mov	r0, r5
 80044b6:	bd38      	pop	{r3, r4, r5, pc}
 80044b8:	b118      	cbz	r0, 80044c2 <_fflush_r+0x1a>
 80044ba:	6a03      	ldr	r3, [r0, #32]
 80044bc:	b90b      	cbnz	r3, 80044c2 <_fflush_r+0x1a>
 80044be:	f7ff fc95 	bl	8003dec <__sinit>
 80044c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f3      	beq.n	80044b2 <_fflush_r+0xa>
 80044ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80044cc:	07d0      	lsls	r0, r2, #31
 80044ce:	d404      	bmi.n	80044da <_fflush_r+0x32>
 80044d0:	0599      	lsls	r1, r3, #22
 80044d2:	d402      	bmi.n	80044da <_fflush_r+0x32>
 80044d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044d6:	f7ff fe6e 	bl	80041b6 <__retarget_lock_acquire_recursive>
 80044da:	4628      	mov	r0, r5
 80044dc:	4621      	mov	r1, r4
 80044de:	f7ff ff63 	bl	80043a8 <__sflush_r>
 80044e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044e4:	4605      	mov	r5, r0
 80044e6:	07da      	lsls	r2, r3, #31
 80044e8:	d4e4      	bmi.n	80044b4 <_fflush_r+0xc>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	059b      	lsls	r3, r3, #22
 80044ee:	d4e1      	bmi.n	80044b4 <_fflush_r+0xc>
 80044f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044f2:	f7ff fe61 	bl	80041b8 <__retarget_lock_release_recursive>
 80044f6:	e7dd      	b.n	80044b4 <_fflush_r+0xc>

080044f8 <__swhatbuf_r>:
 80044f8:	b570      	push	{r4, r5, r6, lr}
 80044fa:	460c      	mov	r4, r1
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	4615      	mov	r5, r2
 8004502:	2900      	cmp	r1, #0
 8004504:	461e      	mov	r6, r3
 8004506:	b096      	sub	sp, #88	@ 0x58
 8004508:	da0c      	bge.n	8004524 <__swhatbuf_r+0x2c>
 800450a:	89a3      	ldrh	r3, [r4, #12]
 800450c:	2100      	movs	r1, #0
 800450e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004512:	bf14      	ite	ne
 8004514:	2340      	movne	r3, #64	@ 0x40
 8004516:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800451a:	2000      	movs	r0, #0
 800451c:	6031      	str	r1, [r6, #0]
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	b016      	add	sp, #88	@ 0x58
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	466a      	mov	r2, sp
 8004526:	f000 f849 	bl	80045bc <_fstat_r>
 800452a:	2800      	cmp	r0, #0
 800452c:	dbed      	blt.n	800450a <__swhatbuf_r+0x12>
 800452e:	9901      	ldr	r1, [sp, #4]
 8004530:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004534:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004538:	4259      	negs	r1, r3
 800453a:	4159      	adcs	r1, r3
 800453c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004540:	e7eb      	b.n	800451a <__swhatbuf_r+0x22>

08004542 <__smakebuf_r>:
 8004542:	898b      	ldrh	r3, [r1, #12]
 8004544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004546:	079d      	lsls	r5, r3, #30
 8004548:	4606      	mov	r6, r0
 800454a:	460c      	mov	r4, r1
 800454c:	d507      	bpl.n	800455e <__smakebuf_r+0x1c>
 800454e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	6123      	str	r3, [r4, #16]
 8004556:	2301      	movs	r3, #1
 8004558:	6163      	str	r3, [r4, #20]
 800455a:	b003      	add	sp, #12
 800455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455e:	466a      	mov	r2, sp
 8004560:	ab01      	add	r3, sp, #4
 8004562:	f7ff ffc9 	bl	80044f8 <__swhatbuf_r>
 8004566:	9f00      	ldr	r7, [sp, #0]
 8004568:	4605      	mov	r5, r0
 800456a:	4639      	mov	r1, r7
 800456c:	4630      	mov	r0, r6
 800456e:	f7ff fe8f 	bl	8004290 <_malloc_r>
 8004572:	b948      	cbnz	r0, 8004588 <__smakebuf_r+0x46>
 8004574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004578:	059a      	lsls	r2, r3, #22
 800457a:	d4ee      	bmi.n	800455a <__smakebuf_r+0x18>
 800457c:	f023 0303 	bic.w	r3, r3, #3
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	e7e2      	b.n	800454e <__smakebuf_r+0xc>
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800458e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	9b01      	ldr	r3, [sp, #4]
 8004596:	6020      	str	r0, [r4, #0]
 8004598:	b15b      	cbz	r3, 80045b2 <__smakebuf_r+0x70>
 800459a:	4630      	mov	r0, r6
 800459c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a0:	f000 f81e 	bl	80045e0 <_isatty_r>
 80045a4:	b128      	cbz	r0, 80045b2 <__smakebuf_r+0x70>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	f023 0303 	bic.w	r3, r3, #3
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	431d      	orrs	r5, r3
 80045b6:	81a5      	strh	r5, [r4, #12]
 80045b8:	e7cf      	b.n	800455a <__smakebuf_r+0x18>
	...

080045bc <_fstat_r>:
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	2300      	movs	r3, #0
 80045c0:	4d06      	ldr	r5, [pc, #24]	@ (80045dc <_fstat_r+0x20>)
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	f7fc fe23 	bl	8001214 <_fstat>
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d102      	bne.n	80045d8 <_fstat_r+0x1c>
 80045d2:	682b      	ldr	r3, [r5, #0]
 80045d4:	b103      	cbz	r3, 80045d8 <_fstat_r+0x1c>
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	bf00      	nop
 80045dc:	20000394 	.word	0x20000394

080045e0 <_isatty_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	2300      	movs	r3, #0
 80045e4:	4d05      	ldr	r5, [pc, #20]	@ (80045fc <_isatty_r+0x1c>)
 80045e6:	4604      	mov	r4, r0
 80045e8:	4608      	mov	r0, r1
 80045ea:	602b      	str	r3, [r5, #0]
 80045ec:	f7fc fe21 	bl	8001232 <_isatty>
 80045f0:	1c43      	adds	r3, r0, #1
 80045f2:	d102      	bne.n	80045fa <_isatty_r+0x1a>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	b103      	cbz	r3, 80045fa <_isatty_r+0x1a>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	bd38      	pop	{r3, r4, r5, pc}
 80045fc:	20000394 	.word	0x20000394

08004600 <_sbrk_r>:
 8004600:	b538      	push	{r3, r4, r5, lr}
 8004602:	2300      	movs	r3, #0
 8004604:	4d05      	ldr	r5, [pc, #20]	@ (800461c <_sbrk_r+0x1c>)
 8004606:	4604      	mov	r4, r0
 8004608:	4608      	mov	r0, r1
 800460a:	602b      	str	r3, [r5, #0]
 800460c:	f7fc fe28 	bl	8001260 <_sbrk>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d102      	bne.n	800461a <_sbrk_r+0x1a>
 8004614:	682b      	ldr	r3, [r5, #0]
 8004616:	b103      	cbz	r3, 800461a <_sbrk_r+0x1a>
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	bd38      	pop	{r3, r4, r5, pc}
 800461c:	20000394 	.word	0x20000394

08004620 <_init>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr

0800462c <_fini>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	bf00      	nop
 8004630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004632:	bc08      	pop	{r3}
 8004634:	469e      	mov	lr, r3
 8004636:	4770      	bx	lr
