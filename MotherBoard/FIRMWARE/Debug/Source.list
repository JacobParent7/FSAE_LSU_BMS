
Source.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000537c  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08005500  08005500  00006500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005840  08005840  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005840  08005840  00006840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005848  08005848  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005848  08005848  00006848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800584c  0800584c  0000684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005850  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000068  080058b8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  080058b8  00007434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012026  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002792  00000000  00000000  000190b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  0001b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d54  00000000  00000000  0001c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021654  00000000  00000000  0001d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013569  00000000  00000000  0003ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8e2b  00000000  00000000  00052279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b0a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050dc  00000000  00000000  0011b0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000068 	.word	0x20000068
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080054e8 	.word	0x080054e8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000006c 	.word	0x2000006c
 80001c0:	080054e8 	.word	0x080054e8

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <SpiCRC16>:
 * @param  data: Buffer containing the data
 * @param  length: Length of data
 * @retval uint16_t: Calculated CRC value
 */
uint16_t SpiCRC16(uint8_t* pBuf, int nLen)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
    uint16_t wCRC = 0xFFFF;
 80004ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004be:	81fb      	strh	r3, [r7, #14]
    int i;

    for (i = 0; i < nLen; i++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	60bb      	str	r3, [r7, #8]
 80004c4:	e014      	b.n	80004f0 <SpiCRC16+0x40>
    {
        wCRC ^= (uint16_t)(pBuf[i] & 0x00FF);
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	4413      	add	r3, r2
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	461a      	mov	r2, r3
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	4053      	eors	r3, r2
 80004d4:	81fb      	strh	r3, [r7, #14]
        wCRC = crc16_table[wCRC & 0x00FF] ^ (wCRC >> 8);
 80004d6:	89fb      	ldrh	r3, [r7, #14]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	4a0a      	ldr	r2, [pc, #40]	@ (8000504 <SpiCRC16+0x54>)
 80004dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004e0:	89fb      	ldrh	r3, [r7, #14]
 80004e2:	0a1b      	lsrs	r3, r3, #8
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	4053      	eors	r3, r2
 80004e8:	81fb      	strh	r3, [r7, #14]
    for (i = 0; i < nLen; i++)
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	3301      	adds	r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dbe6      	blt.n	80004c6 <SpiCRC16+0x16>
    }

    //printf("CRC16 calculated: 0x%04X\n", wCRC);

    return wCRC;
 80004f8:	89fb      	ldrh	r3, [r7, #14]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	080055f4 	.word	0x080055f4

08000508 <SPI1_DisableForGPIO>:
/**
 * @brief  Temporarily disable SPI1 to control MOSI pin as GPIO
 * @retval None
 */
void SPI1_DisableForGPIO(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
  // Disable SPI1
  __HAL_SPI_DISABLE(&hspi1);
 800050e:	4b10      	ldr	r3, [pc, #64]	@ (8000550 <SPI1_DisableForGPIO+0x48>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <SPI1_DisableForGPIO+0x48>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800051c:	601a      	str	r2, [r3, #0]

  // Configure MOSI pin (PA7) as GPIO output
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_7;        // PA7 is SPI1_MOSI on most STM32F4 boards
 800052c:	2380      	movs	r3, #128	@ 0x80
 800052e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000538:	2302      	movs	r3, #2
 800053a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <SPI1_DisableForGPIO+0x4c>)
 8000542:	f002 f933 	bl	80027ac <HAL_GPIO_Init>
}
 8000546:	bf00      	nop
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200001ac 	.word	0x200001ac
 8000554:	40020000 	.word	0x40020000

08000558 <SPI1_RestoreFromGPIO>:
/**
 * @brief  Restore SPI1 configuration for normal operation
 * @retval None
 */
void SPI1_RestoreFromGPIO(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
  // Re-initialize SPI1 pins to their original function
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  // SCK pin (PA5)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800056c:	2320      	movs	r3, #32
 800056e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000578:	2303      	movs	r3, #3
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800057c:	2305      	movs	r3, #5
 800057e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4619      	mov	r1, r3
 8000584:	480e      	ldr	r0, [pc, #56]	@ (80005c0 <SPI1_RestoreFromGPIO+0x68>)
 8000586:	f002 f911 	bl	80027ac <HAL_GPIO_Init>

  // MISO pin (PA6)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800058a:	2340      	movs	r3, #64	@ 0x40
 800058c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4619      	mov	r1, r3
 8000592:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <SPI1_RestoreFromGPIO+0x68>)
 8000594:	f002 f90a 	bl	80027ac <HAL_GPIO_Init>

  // MOSI pin (PA7)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000598:	2380      	movs	r3, #128	@ 0x80
 800059a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <SPI1_RestoreFromGPIO+0x68>)
 80005a2:	f002 f903 	bl	80027ac <HAL_GPIO_Init>

  // Re-enable SPI1
  __HAL_SPI_ENABLE(&hspi1);
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <SPI1_RestoreFromGPIO+0x6c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <SPI1_RestoreFromGPIO+0x6c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80005b4:	601a      	str	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020000 	.word	0x40020000
 80005c4:	200001ac 	.word	0x200001ac

080005c8 <BQ79600_WakeUp>:
 * @param  num_stacked_devices: Number of stacked BQ79616-Q1 devices
 * @param  need_double_wake: Set to true if device was previously shut down using SHUTDOWN ping
 * @retval HAL status
*/
HAL_StatusTypeDef BQ79600_WakeUp(uint8_t num_stacked_devices, bool need_double_wake)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	460a      	mov	r2, r1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]

  // 1. Send WAKE ping - begin by disabling SPI to control MOSI directly
  SPI1_DisableForGPIO();
 80005d8:	f7ff ff96 	bl	8000508 <SPI1_DisableForGPIO>

  // Configure NSS pin (PA4) as GPIO output
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_4;  // NSS pin
 80005ec:	2310      	movs	r3, #16
 80005ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f0:	2301      	movs	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	4831      	ldr	r0, [pc, #196]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 8000604:	f002 f8d2 	bl	80027ac <HAL_GPIO_Init>

  // If device was shut down with SHUTDOWN ping, we need two WAKE pings
  if (need_double_wake) {
 8000608:	79bb      	ldrb	r3, [r7, #6]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d021      	beq.n	8000652 <BQ79600_WakeUp+0x8a>
    // First WAKE ping
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 800060e:	2200      	movs	r2, #0
 8000610:	2110      	movs	r1, #16
 8000612:	482d      	ldr	r0, [pc, #180]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 8000614:	f002 fa7f 	bl	8002b16 <HAL_GPIO_WritePin>
    Delay_us(2);  // Wait 2us
 8000618:	2002      	movs	r0, #2
 800061a:	f000 fe3f 	bl	800129c <Delay_us>

    // Pull MOSI low for 2.75ms (tHLD_WAKE)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2180      	movs	r1, #128	@ 0x80
 8000622:	4829      	ldr	r0, [pc, #164]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 8000624:	f002 fa77 	bl	8002b16 <HAL_GPIO_WritePin>
    Delay_us(BQ79600_WAKE_PING_TIME_US);  // 2.75ms
 8000628:	f640 20be 	movw	r0, #2750	@ 0xabe
 800062c:	f000 fe36 	bl	800129c <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2180      	movs	r1, #128	@ 0x80
 8000634:	4824      	ldr	r0, [pc, #144]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 8000636:	f002 fa6e 	bl	8002b16 <HAL_GPIO_WritePin>

    Delay_us(2);  // Wait 2us
 800063a:	2002      	movs	r0, #2
 800063c:	f000 fe2e 	bl	800129c <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Bring nCS back high
 8000640:	2201      	movs	r2, #1
 8000642:	2110      	movs	r1, #16
 8000644:	4820      	ldr	r0, [pc, #128]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 8000646:	f002 fa66 	bl	8002b16 <HAL_GPIO_WritePin>

    // Wait for first wake ping to process (3.5ms)
    Delay_us(BQ79600_WAKE_SETUP_TIME_US);  // 3.5ms
 800064a:	f640 50ac 	movw	r0, #3500	@ 0xdac
 800064e:	f000 fe25 	bl	800129c <Delay_us>
  }

  // Send (second) WAKE ping
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 8000652:	2200      	movs	r2, #0
 8000654:	2110      	movs	r1, #16
 8000656:	481c      	ldr	r0, [pc, #112]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 8000658:	f002 fa5d 	bl	8002b16 <HAL_GPIO_WritePin>
  Delay_us(2);  // Wait 2us
 800065c:	2002      	movs	r0, #2
 800065e:	f000 fe1d 	bl	800129c <Delay_us>

  // Pull MOSI low for 2.75ms (tHLD_WAKE)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2180      	movs	r1, #128	@ 0x80
 8000666:	4818      	ldr	r0, [pc, #96]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 8000668:	f002 fa55 	bl	8002b16 <HAL_GPIO_WritePin>
  Delay_us(BQ79600_WAKE_PING_TIME_US);  // 2.75ms
 800066c:	f640 20be 	movw	r0, #2750	@ 0xabe
 8000670:	f000 fe14 	bl	800129c <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2180      	movs	r1, #128	@ 0x80
 8000678:	4813      	ldr	r0, [pc, #76]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 800067a:	f002 fa4c 	bl	8002b16 <HAL_GPIO_WritePin>

  Delay_us(2);  // Wait 2us
 800067e:	2002      	movs	r0, #2
 8000680:	f000 fe0c 	bl	800129c <Delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Bring nCS back high
 8000684:	2201      	movs	r2, #1
 8000686:	2110      	movs	r1, #16
 8000688:	480f      	ldr	r0, [pc, #60]	@ (80006c8 <BQ79600_WakeUp+0x100>)
 800068a:	f002 fa44 	bl	8002b16 <HAL_GPIO_WritePin>

  // Restore SPI configuration
  SPI1_RestoreFromGPIO();
 800068e:	f7ff ff63 	bl	8000558 <SPI1_RestoreFromGPIO>

  // 2. Wait for tSU(WAKE_SHUT) to allow BQ79600-Q1 to enter ACTIVE mode (3.5ms)
  HAL_Delay(4);
 8000692:	2004      	movs	r0, #4
 8000694:	f001 f982 	bl	800199c <HAL_Delay>

  // 4. Send a single device write to set CONTROL1[SEND_WAKE]=1, which wakes up all stacked devices
  tx_data[0] = 0x90;  // Single device 1 byte write
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <BQ79600_WakeUp+0x104>)
 800069a:	2290      	movs	r2, #144	@ 0x90
 800069c:	701a      	strb	r2, [r3, #0]
  tx_data[1] = 0x00;  // Device address
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <BQ79600_WakeUp+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	705a      	strb	r2, [r3, #1]
  tx_data[2] = 0x03;  // MSB register address
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <BQ79600_WakeUp+0x104>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	709a      	strb	r2, [r3, #2]
  tx_data[3] = 0x09;  // LSB register address
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <BQ79600_WakeUp+0x104>)
 80006ac:	2209      	movs	r2, #9
 80006ae:	70da      	strb	r2, [r3, #3]
  tx_data[4] = 0x20;  // 00100000 (enable SEND_WAKE)
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <BQ79600_WakeUp+0x104>)
 80006b2:	2220      	movs	r2, #32
 80006b4:	711a      	strb	r2, [r3, #4]

  SpiWrite(5);
 80006b6:	2005      	movs	r0, #5
 80006b8:	f000 f9b8 	bl	8000a2c <SpiWrite>

  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3720      	adds	r7, #32
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020000 	.word	0x40020000
 80006cc:	2000008c 	.word	0x2000008c

080006d0 <SpiAutoAddress>:
 * @brief  Auto address the bq79600s. Set all devices to stack mode, set the highest device as top of stack, synchronize the DLL.
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef SpiAutoAddress(uint8_t num_stacked_devices)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
	//SYNC DLL
	tx_data[0] = 0xB0;
 80006da:	4bc5      	ldr	r3, [pc, #788]	@ (80009f0 <SpiAutoAddress+0x320>)
 80006dc:	22b0      	movs	r2, #176	@ 0xb0
 80006de:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80006e0:	4bc3      	ldr	r3, [pc, #780]	@ (80009f0 <SpiAutoAddress+0x320>)
 80006e2:	2203      	movs	r2, #3
 80006e4:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x43;
 80006e6:	4bc2      	ldr	r3, [pc, #776]	@ (80009f0 <SpiAutoAddress+0x320>)
 80006e8:	2243      	movs	r2, #67	@ 0x43
 80006ea:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80006ec:	4bc0      	ldr	r3, [pc, #768]	@ (80009f0 <SpiAutoAddress+0x320>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80006f2:	2004      	movs	r0, #4
 80006f4:	f000 f99a 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xB0;
 80006f8:	4bbd      	ldr	r3, [pc, #756]	@ (80009f0 <SpiAutoAddress+0x320>)
 80006fa:	22b0      	movs	r2, #176	@ 0xb0
 80006fc:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80006fe:	4bbc      	ldr	r3, [pc, #752]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000700:	2203      	movs	r2, #3
 8000702:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x44;
 8000704:	4bba      	ldr	r3, [pc, #744]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000706:	2244      	movs	r2, #68	@ 0x44
 8000708:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 800070a:	4bb9      	ldr	r3, [pc, #740]	@ (80009f0 <SpiAutoAddress+0x320>)
 800070c:	2200      	movs	r2, #0
 800070e:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8000710:	2004      	movs	r0, #4
 8000712:	f000 f98b 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xB0;
 8000716:	4bb6      	ldr	r3, [pc, #728]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000718:	22b0      	movs	r2, #176	@ 0xb0
 800071a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800071c:	4bb4      	ldr	r3, [pc, #720]	@ (80009f0 <SpiAutoAddress+0x320>)
 800071e:	2203      	movs	r2, #3
 8000720:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x45;
 8000722:	4bb3      	ldr	r3, [pc, #716]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000724:	2245      	movs	r2, #69	@ 0x45
 8000726:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000728:	4bb1      	ldr	r3, [pc, #708]	@ (80009f0 <SpiAutoAddress+0x320>)
 800072a:	2200      	movs	r2, #0
 800072c:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800072e:	2004      	movs	r0, #4
 8000730:	f000 f97c 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xB0;
 8000734:	4bae      	ldr	r3, [pc, #696]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000736:	22b0      	movs	r2, #176	@ 0xb0
 8000738:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800073a:	4bad      	ldr	r3, [pc, #692]	@ (80009f0 <SpiAutoAddress+0x320>)
 800073c:	2203      	movs	r2, #3
 800073e:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x46;
 8000740:	4bab      	ldr	r3, [pc, #684]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000742:	2246      	movs	r2, #70	@ 0x46
 8000744:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000746:	4baa      	ldr	r3, [pc, #680]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000748:	2200      	movs	r2, #0
 800074a:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800074c:	2004      	movs	r0, #4
 800074e:	f000 f96d 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xB0;
 8000752:	4ba7      	ldr	r3, [pc, #668]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000754:	22b0      	movs	r2, #176	@ 0xb0
 8000756:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8000758:	4ba5      	ldr	r3, [pc, #660]	@ (80009f0 <SpiAutoAddress+0x320>)
 800075a:	2203      	movs	r2, #3
 800075c:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x47;
 800075e:	4ba4      	ldr	r3, [pc, #656]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000760:	2247      	movs	r2, #71	@ 0x47
 8000762:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000764:	4ba2      	ldr	r3, [pc, #648]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000766:	2200      	movs	r2, #0
 8000768:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800076a:	2004      	movs	r0, #4
 800076c:	f000 f95e 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xB0;
 8000770:	4b9f      	ldr	r3, [pc, #636]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000772:	22b0      	movs	r2, #176	@ 0xb0
 8000774:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8000776:	4b9e      	ldr	r3, [pc, #632]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000778:	2203      	movs	r2, #3
 800077a:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x48;
 800077c:	4b9c      	ldr	r3, [pc, #624]	@ (80009f0 <SpiAutoAddress+0x320>)
 800077e:	2248      	movs	r2, #72	@ 0x48
 8000780:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000782:	4b9b      	ldr	r3, [pc, #620]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000784:	2200      	movs	r2, #0
 8000786:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8000788:	2004      	movs	r0, #4
 800078a:	f000 f94f 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xB0;
 800078e:	4b98      	ldr	r3, [pc, #608]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000790:	22b0      	movs	r2, #176	@ 0xb0
 8000792:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 8000794:	4b96      	ldr	r3, [pc, #600]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000796:	2203      	movs	r2, #3
 8000798:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x49;
 800079a:	4b95      	ldr	r3, [pc, #596]	@ (80009f0 <SpiAutoAddress+0x320>)
 800079c:	2249      	movs	r2, #73	@ 0x49
 800079e:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80007a0:	4b93      	ldr	r3, [pc, #588]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80007a6:	2004      	movs	r0, #4
 80007a8:	f000 f940 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xB0;
 80007ac:	4b90      	ldr	r3, [pc, #576]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007ae:	22b0      	movs	r2, #176	@ 0xb0
 80007b0:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80007b2:	4b8f      	ldr	r3, [pc, #572]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x4A;
 80007b8:	4b8d      	ldr	r3, [pc, #564]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007ba:	224a      	movs	r2, #74	@ 0x4a
 80007bc:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80007be:	4b8c      	ldr	r3, [pc, #560]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80007c4:	2004      	movs	r0, #4
 80007c6:	f000 f931 	bl	8000a2c <SpiWrite>

	//Enable auto-addressing mode
	tx_data[0] = 0xD0;
 80007ca:	4b89      	ldr	r3, [pc, #548]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007cc:	22d0      	movs	r2, #208	@ 0xd0
 80007ce:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80007d0:	4b87      	ldr	r3, [pc, #540]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007d2:	2203      	movs	r2, #3
 80007d4:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x09;
 80007d6:	4b86      	ldr	r3, [pc, #536]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007d8:	2209      	movs	r2, #9
 80007da:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x01;
 80007dc:	4b84      	ldr	r3, [pc, #528]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007de:	2201      	movs	r2, #1
 80007e0:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 80007e2:	2004      	movs	r0, #4
 80007e4:	f000 f922 	bl	8000a2c <SpiWrite>

	//Set device addresses
	tx_data[0] = 0xD0;
 80007e8:	4b81      	ldr	r3, [pc, #516]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007ea:	22d0      	movs	r2, #208	@ 0xd0
 80007ec:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80007ee:	4b80      	ldr	r3, [pc, #512]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007f0:	2203      	movs	r2, #3
 80007f2:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x06;
 80007f4:	4b7e      	ldr	r3, [pc, #504]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007f6:	2206      	movs	r2, #6
 80007f8:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80007fa:	4b7d      	ldr	r3, [pc, #500]	@ (80009f0 <SpiAutoAddress+0x320>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 8000800:	2004      	movs	r0, #4
 8000802:	f000 f913 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xD0;
 8000806:	4b7a      	ldr	r3, [pc, #488]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000808:	22d0      	movs	r2, #208	@ 0xd0
 800080a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800080c:	4b78      	ldr	r3, [pc, #480]	@ (80009f0 <SpiAutoAddress+0x320>)
 800080e:	2203      	movs	r2, #3
 8000810:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x06;
 8000812:	4b77      	ldr	r3, [pc, #476]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000814:	2206      	movs	r2, #6
 8000816:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x01;
 8000818:	4b75      	ldr	r3, [pc, #468]	@ (80009f0 <SpiAutoAddress+0x320>)
 800081a:	2201      	movs	r2, #1
 800081c:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800081e:	2004      	movs	r0, #4
 8000820:	f000 f904 	bl	8000a2c <SpiWrite>

	//set all stacked devices as stack
	tx_data[0] = 0xD0;
 8000824:	4b72      	ldr	r3, [pc, #456]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000826:	22d0      	movs	r2, #208	@ 0xd0
 8000828:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800082a:	4b71      	ldr	r3, [pc, #452]	@ (80009f0 <SpiAutoAddress+0x320>)
 800082c:	2203      	movs	r2, #3
 800082e:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x08;
 8000830:	4b6f      	ldr	r3, [pc, #444]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000832:	2208      	movs	r2, #8
 8000834:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x02;
 8000836:	4b6e      	ldr	r3, [pc, #440]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000838:	2202      	movs	r2, #2
 800083a:	70da      	strb	r2, [r3, #3]
	SpiWrite(4);
 800083c:	2004      	movs	r0, #4
 800083e:	f000 f8f5 	bl	8000a2c <SpiWrite>


	//set top device to be top of stack
	tx_data[0] = 0x90;
 8000842:	4b6b      	ldr	r3, [pc, #428]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000844:	2290      	movs	r2, #144	@ 0x90
 8000846:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x01;
 8000848:	4b69      	ldr	r3, [pc, #420]	@ (80009f0 <SpiAutoAddress+0x320>)
 800084a:	2201      	movs	r2, #1
 800084c:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x03;
 800084e:	4b68      	ldr	r3, [pc, #416]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000850:	2203      	movs	r2, #3
 8000852:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x08;
 8000854:	4b66      	ldr	r3, [pc, #408]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000856:	2208      	movs	r2, #8
 8000858:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x03;
 800085a:	4b65      	ldr	r3, [pc, #404]	@ (80009f0 <SpiAutoAddress+0x320>)
 800085c:	2203      	movs	r2, #3
 800085e:	711a      	strb	r2, [r3, #4]
	SpiWrite(5);
 8000860:	2005      	movs	r0, #5
 8000862:	f000 f8e3 	bl	8000a2c <SpiWrite>


	//SYNC DLL
	tx_data[0] = 0xA0;
 8000866:	4b62      	ldr	r3, [pc, #392]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000868:	22a0      	movs	r2, #160	@ 0xa0
 800086a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800086c:	4b60      	ldr	r3, [pc, #384]	@ (80009f0 <SpiAutoAddress+0x320>)
 800086e:	2203      	movs	r2, #3
 8000870:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x43;
 8000872:	4b5f      	ldr	r3, [pc, #380]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000874:	2243      	movs	r2, #67	@ 0x43
 8000876:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000878:	4b5d      	ldr	r3, [pc, #372]	@ (80009f0 <SpiAutoAddress+0x320>)
 800087a:	2200      	movs	r2, #0
 800087c:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 800087e:	2102      	movs	r1, #2
 8000880:	2004      	movs	r0, #4
 8000882:	f000 f945 	bl	8000b10 <SpiRead>

	tx_data[0] = 0xA0;
 8000886:	4b5a      	ldr	r3, [pc, #360]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000888:	22a0      	movs	r2, #160	@ 0xa0
 800088a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800088c:	4b58      	ldr	r3, [pc, #352]	@ (80009f0 <SpiAutoAddress+0x320>)
 800088e:	2203      	movs	r2, #3
 8000890:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x44;
 8000892:	4b57      	ldr	r3, [pc, #348]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000894:	2244      	movs	r2, #68	@ 0x44
 8000896:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000898:	4b55      	ldr	r3, [pc, #340]	@ (80009f0 <SpiAutoAddress+0x320>)
 800089a:	2200      	movs	r2, #0
 800089c:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 800089e:	2102      	movs	r1, #2
 80008a0:	2004      	movs	r0, #4
 80008a2:	f000 f935 	bl	8000b10 <SpiRead>

	tx_data[0] = 0xA0;
 80008a6:	4b52      	ldr	r3, [pc, #328]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008a8:	22a0      	movs	r2, #160	@ 0xa0
 80008aa:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80008ac:	4b50      	ldr	r3, [pc, #320]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008ae:	2203      	movs	r2, #3
 80008b0:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x45;
 80008b2:	4b4f      	ldr	r3, [pc, #316]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008b4:	2245      	movs	r2, #69	@ 0x45
 80008b6:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80008b8:	4b4d      	ldr	r3, [pc, #308]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80008be:	2102      	movs	r1, #2
 80008c0:	2004      	movs	r0, #4
 80008c2:	f000 f925 	bl	8000b10 <SpiRead>

	tx_data[0] = 0xA0;
 80008c6:	4b4a      	ldr	r3, [pc, #296]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008c8:	22a0      	movs	r2, #160	@ 0xa0
 80008ca:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80008cc:	4b48      	ldr	r3, [pc, #288]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008ce:	2203      	movs	r2, #3
 80008d0:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x46;
 80008d2:	4b47      	ldr	r3, [pc, #284]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008d4:	2246      	movs	r2, #70	@ 0x46
 80008d6:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80008d8:	4b45      	ldr	r3, [pc, #276]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008da:	2200      	movs	r2, #0
 80008dc:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80008de:	2102      	movs	r1, #2
 80008e0:	2004      	movs	r0, #4
 80008e2:	f000 f915 	bl	8000b10 <SpiRead>

	tx_data[0] = 0xA0;
 80008e6:	4b42      	ldr	r3, [pc, #264]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008e8:	22a0      	movs	r2, #160	@ 0xa0
 80008ea:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 80008ec:	4b40      	ldr	r3, [pc, #256]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008ee:	2203      	movs	r2, #3
 80008f0:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x47;
 80008f2:	4b3f      	ldr	r3, [pc, #252]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008f4:	2247      	movs	r2, #71	@ 0x47
 80008f6:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 80008f8:	4b3d      	ldr	r3, [pc, #244]	@ (80009f0 <SpiAutoAddress+0x320>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 80008fe:	2102      	movs	r1, #2
 8000900:	2004      	movs	r0, #4
 8000902:	f000 f905 	bl	8000b10 <SpiRead>

	tx_data[0] = 0xA0;
 8000906:	4b3a      	ldr	r3, [pc, #232]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000908:	22a0      	movs	r2, #160	@ 0xa0
 800090a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800090c:	4b38      	ldr	r3, [pc, #224]	@ (80009f0 <SpiAutoAddress+0x320>)
 800090e:	2203      	movs	r2, #3
 8000910:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x48;
 8000912:	4b37      	ldr	r3, [pc, #220]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000914:	2248      	movs	r2, #72	@ 0x48
 8000916:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000918:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <SpiAutoAddress+0x320>)
 800091a:	2200      	movs	r2, #0
 800091c:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 800091e:	2102      	movs	r1, #2
 8000920:	2004      	movs	r0, #4
 8000922:	f000 f8f5 	bl	8000b10 <SpiRead>

	tx_data[0] = 0xA0;
 8000926:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000928:	22a0      	movs	r2, #160	@ 0xa0
 800092a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800092c:	4b30      	ldr	r3, [pc, #192]	@ (80009f0 <SpiAutoAddress+0x320>)
 800092e:	2203      	movs	r2, #3
 8000930:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x49;
 8000932:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000934:	2249      	movs	r2, #73	@ 0x49
 8000936:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000938:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <SpiAutoAddress+0x320>)
 800093a:	2200      	movs	r2, #0
 800093c:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 800093e:	2102      	movs	r1, #2
 8000940:	2004      	movs	r0, #4
 8000942:	f000 f8e5 	bl	8000b10 <SpiRead>

	tx_data[0] = 0xA0;
 8000946:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000948:	22a0      	movs	r2, #160	@ 0xa0
 800094a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x03;
 800094c:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <SpiAutoAddress+0x320>)
 800094e:	2203      	movs	r2, #3
 8000950:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x4A;
 8000952:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000954:	224a      	movs	r2, #74	@ 0x4a
 8000956:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x00;
 8000958:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <SpiAutoAddress+0x320>)
 800095a:	2200      	movs	r2, #0
 800095c:	70da      	strb	r2, [r3, #3]
	SpiRead(4,2);
 800095e:	2102      	movs	r1, #2
 8000960:	2004      	movs	r0, #4
 8000962:	f000 f8d5 	bl	8000b10 <SpiRead>
	tx_data[3] = 0x01;
	tx_data[4] = 0x14;
	SpiWrite(5);
	*/

	tx_data[0] = 0x80;
 8000966:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000968:	2280      	movs	r2, #128	@ 0x80
 800096a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0x00;
 800096c:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <SpiAutoAddress+0x320>)
 800096e:	2200      	movs	r2, #0
 8000970:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0x20;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000974:	2220      	movs	r2, #32
 8000976:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0x01;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <SpiAutoAddress+0x320>)
 800097a:	2201      	movs	r2, #1
 800097c:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0x01;
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <SpiAutoAddress+0x320>)
 8000980:	2201      	movs	r2, #1
 8000982:	711a      	strb	r2, [r3, #4]
	SpiRead(5,7);
 8000984:	2107      	movs	r1, #7
 8000986:	2005      	movs	r0, #5
 8000988:	f000 f8c2 	bl	8000b10 <SpiRead>

	printf("DATA1: 0x%02X\n", rx_data[0]);
 800098c:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <SpiAutoAddress+0x324>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	4819      	ldr	r0, [pc, #100]	@ (80009f8 <SpiAutoAddress+0x328>)
 8000994:	f003 fed2 	bl	800473c <iprintf>
	printf("DATA1: 0x%02X\n", rx_data[1]);
 8000998:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <SpiAutoAddress+0x324>)
 800099a:	785b      	ldrb	r3, [r3, #1]
 800099c:	4619      	mov	r1, r3
 800099e:	4816      	ldr	r0, [pc, #88]	@ (80009f8 <SpiAutoAddress+0x328>)
 80009a0:	f003 fecc 	bl	800473c <iprintf>
	printf("DATA1: 0x%02X\n", rx_data[2]);
 80009a4:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <SpiAutoAddress+0x324>)
 80009a6:	789b      	ldrb	r3, [r3, #2]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <SpiAutoAddress+0x328>)
 80009ac:	f003 fec6 	bl	800473c <iprintf>
	printf("DATA1: 0x%02X\n", rx_data[3]);
 80009b0:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <SpiAutoAddress+0x324>)
 80009b2:	78db      	ldrb	r3, [r3, #3]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <SpiAutoAddress+0x328>)
 80009b8:	f003 fec0 	bl	800473c <iprintf>
	printf("DATA1: 0x%02X\n", rx_data[4]);
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <SpiAutoAddress+0x324>)
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	@ (80009f8 <SpiAutoAddress+0x328>)
 80009c4:	f003 feba 	bl	800473c <iprintf>
	printf("DATA1: 0x%02X\n", rx_data[5]);
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <SpiAutoAddress+0x324>)
 80009ca:	795b      	ldrb	r3, [r3, #5]
 80009cc:	4619      	mov	r1, r3
 80009ce:	480a      	ldr	r0, [pc, #40]	@ (80009f8 <SpiAutoAddress+0x328>)
 80009d0:	f003 feb4 	bl	800473c <iprintf>
	printf("DATA1: 0x%02X\n", rx_data[6]);
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <SpiAutoAddress+0x324>)
 80009d6:	799b      	ldrb	r3, [r3, #6]
 80009d8:	4619      	mov	r1, r3
 80009da:	4807      	ldr	r0, [pc, #28]	@ (80009f8 <SpiAutoAddress+0x328>)
 80009dc:	f003 feae 	bl	800473c <iprintf>
	printf("DATA1: 0x%02X\n", rx_data[7]);
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <SpiAutoAddress+0x324>)
 80009e2:	79db      	ldrb	r3, [r3, #7]
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <SpiAutoAddress+0x328>)
 80009e8:	f003 fea8 	bl	800473c <iprintf>
 80009ec:	e006      	b.n	80009fc <SpiAutoAddress+0x32c>
 80009ee:	bf00      	nop
 80009f0:	2000008c 	.word	0x2000008c
 80009f4:	20000094 	.word	0x20000094
 80009f8:	08005500 	.word	0x08005500
	printf("DATA1: 0x%02X\n", rx_data[8]);
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <SpiAutoAddress+0x350>)
 80009fe:	7a1b      	ldrb	r3, [r3, #8]
 8000a00:	4619      	mov	r1, r3
 8000a02:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <SpiAutoAddress+0x354>)
 8000a04:	f003 fe9a 	bl	800473c <iprintf>

	if (status != HAL_OK) {
 8000a08:	4b07      	ldr	r3, [pc, #28]	@ (8000a28 <SpiAutoAddress+0x358>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <SpiAutoAddress+0x346>
		return status;
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <SpiAutoAddress+0x358>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	e000      	b.n	8000a18 <SpiAutoAddress+0x348>
	}

    return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000094 	.word	0x20000094
 8000a24:	08005500 	.word	0x08005500
 8000a28:	20000086 	.word	0x20000086

08000a2c <SpiWrite>:


HAL_StatusTypeDef SpiWrite(int nLen)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	  crc = SpiCRC16(tx_data, nLen);
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	482f      	ldr	r0, [pc, #188]	@ (8000af4 <SpiWrite+0xc8>)
 8000a38:	f7ff fd3a 	bl	80004b0 <SpiCRC16>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <SpiWrite+0xcc>)
 8000a42:	801a      	strh	r2, [r3, #0]
	  tx_data[nLen] = crc & 0xFF;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <SpiWrite+0xcc>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b2d9      	uxtb	r1, r3
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000af4 <SpiWrite+0xc8>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	460a      	mov	r2, r1
 8000a52:	701a      	strb	r2, [r3, #0]
	  tx_data[nLen + 1] = (crc >> 8) & 0xFF;
 8000a54:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <SpiWrite+0xcc>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b2d1      	uxtb	r1, r2
 8000a62:	4a24      	ldr	r2, [pc, #144]	@ (8000af4 <SpiWrite+0xc8>)
 8000a64:	54d1      	strb	r1, [r2, r3]

	  //Check if SPI_READY is high, with timeout
	  timeout = HAL_GetTick() + 100;  // 100ms timeout
 8000a66:	f000 ff8f 	bl	8001988 <HAL_GetTick>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	3364      	adds	r3, #100	@ 0x64
 8000a6e:	4a23      	ldr	r2, [pc, #140]	@ (8000afc <SpiWrite+0xd0>)
 8000a70:	6013      	str	r3, [r2, #0]
	  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 8000a72:	e00b      	b.n	8000a8c <SpiWrite+0x60>
	    if (HAL_GetTick() >= timeout) {
 8000a74:	f000 ff88 	bl	8001988 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <SpiWrite+0xd0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d301      	bcc.n	8000a86 <SpiWrite+0x5a>
	      return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	e032      	b.n	8000aec <SpiWrite+0xc0>
	    }
	    Delay_us(100);
 8000a86:	2064      	movs	r0, #100	@ 0x64
 8000a88:	f000 fc08 	bl	800129c <Delay_us>
	  while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 8000a8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a90:	481b      	ldr	r0, [pc, #108]	@ (8000b00 <SpiWrite+0xd4>)
 8000a92:	f002 f829 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d1eb      	bne.n	8000a74 <SpiWrite+0x48>
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	4818      	ldr	r0, [pc, #96]	@ (8000b04 <SpiWrite+0xd8>)
 8000aa2:	f002 f838 	bl	8002b16 <HAL_GPIO_WritePin>

	  Delay_us(0.5); //t9
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 fbf8 	bl	800129c <Delay_us>

	  // Send the command
	  status = HAL_SPI_Transmit(&hspi1, tx_data, nLen + 2, 100);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	3302      	adds	r3, #2
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	2364      	movs	r3, #100	@ 0x64
 8000ab6:	490f      	ldr	r1, [pc, #60]	@ (8000af4 <SpiWrite+0xc8>)
 8000ab8:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <SpiWrite+0xdc>)
 8000aba:	f002 fd66 	bl	800358a <HAL_SPI_Transmit>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <SpiWrite+0xe0>)
 8000ac4:	701a      	strb	r2, [r3, #0]

	  // Pull nCS high
	  Delay_us(0.5); //t10
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fbe8 	bl	800129c <Delay_us>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	2110      	movs	r1, #16
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <SpiWrite+0xd8>)
 8000ad2:	f002 f820 	bl	8002b16 <HAL_GPIO_WritePin>

	  Delay_us(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fbe0 	bl	800129c <Delay_us>

	  if (status != HAL_OK) {
 8000adc:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <SpiWrite+0xe0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <SpiWrite+0xbe>
	    return status;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <SpiWrite+0xe0>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	e000      	b.n	8000aec <SpiWrite+0xc0>
	  }

	  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2000008c 	.word	0x2000008c
 8000af8:	20000084 	.word	0x20000084
 8000afc:	20000088 	.word	0x20000088
 8000b00:	40020400 	.word	0x40020400
 8000b04:	40020000 	.word	0x40020000
 8000b08:	200001ac 	.word	0x200001ac
 8000b0c:	20000086 	.word	0x20000086

08000b10 <SpiRead>:


HAL_StatusTypeDef SpiRead(int nLen, int rLen){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]

	SpiWrite(nLen);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff86 	bl	8000a2c <SpiWrite>

	tx_data[0] = 0xFF;
 8000b20:	4b2f      	ldr	r3, [pc, #188]	@ (8000be0 <SpiRead+0xd0>)
 8000b22:	22ff      	movs	r2, #255	@ 0xff
 8000b24:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0xFF;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	@ (8000be0 <SpiRead+0xd0>)
 8000b28:	22ff      	movs	r2, #255	@ 0xff
 8000b2a:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 0xFF;
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000be0 <SpiRead+0xd0>)
 8000b2e:	22ff      	movs	r2, #255	@ 0xff
 8000b30:	709a      	strb	r2, [r3, #2]
	tx_data[3] = 0xFF;
 8000b32:	4b2b      	ldr	r3, [pc, #172]	@ (8000be0 <SpiRead+0xd0>)
 8000b34:	22ff      	movs	r2, #255	@ 0xff
 8000b36:	70da      	strb	r2, [r3, #3]
	tx_data[4] = 0xFF;
 8000b38:	4b29      	ldr	r3, [pc, #164]	@ (8000be0 <SpiRead+0xd0>)
 8000b3a:	22ff      	movs	r2, #255	@ 0xff
 8000b3c:	711a      	strb	r2, [r3, #4]
	tx_data[5] = 0xFF;
 8000b3e:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <SpiRead+0xd0>)
 8000b40:	22ff      	movs	r2, #255	@ 0xff
 8000b42:	715a      	strb	r2, [r3, #5]
	tx_data[6] = 0xFF;
 8000b44:	4b26      	ldr	r3, [pc, #152]	@ (8000be0 <SpiRead+0xd0>)
 8000b46:	22ff      	movs	r2, #255	@ 0xff
 8000b48:	719a      	strb	r2, [r3, #6]

	timeout = HAL_GetTick() + 1;  // 1ms timeout
 8000b4a:	f000 ff1d 	bl	8001988 <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a24      	ldr	r2, [pc, #144]	@ (8000be4 <SpiRead+0xd4>)
 8000b54:	6013      	str	r3, [r2, #0]
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 8000b56:	e011      	b.n	8000b7c <SpiRead+0x6c>
		if (HAL_GetTick() >= timeout) {
 8000b58:	f000 ff16 	bl	8001988 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <SpiRead+0xd4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d306      	bcc.n	8000b74 <SpiRead+0x64>
			SpiClear();
 8000b66:	f000 f84b 	bl	8000c00 <SpiClear>
			printf("TIMEOUT WAITING FOR DATA TO BE READY\r\n");
 8000b6a:	481f      	ldr	r0, [pc, #124]	@ (8000be8 <SpiRead+0xd8>)
 8000b6c:	f003 fe4e 	bl	800480c <puts>
			return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e030      	b.n	8000bd6 <SpiRead+0xc6>
		}
		Delay_us(500);
 8000b74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b78:	f000 fb90 	bl	800129c <Delay_us>
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) != GPIO_PIN_SET) {
 8000b7c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b80:	481a      	ldr	r0, [pc, #104]	@ (8000bec <SpiRead+0xdc>)
 8000b82:	f001 ffb1 	bl	8002ae8 <HAL_GPIO_ReadPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d1e5      	bne.n	8000b58 <SpiRead+0x48>
	}

	//printf("NO TIMEOUT\r\n");

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2110      	movs	r1, #16
 8000b90:	4817      	ldr	r0, [pc, #92]	@ (8000bf0 <SpiRead+0xe0>)
 8000b92:	f001 ffc0 	bl	8002b16 <HAL_GPIO_WritePin>

    Delay_us(0.5); //t9
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 fb80 	bl	800129c <Delay_us>

    HAL_SPI_TransmitReceive(&hspi1, tx_data, rx_data, rLen, HAL_MAX_DELAY);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba4:	9200      	str	r2, [sp, #0]
 8000ba6:	4a13      	ldr	r2, [pc, #76]	@ (8000bf4 <SpiRead+0xe4>)
 8000ba8:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <SpiRead+0xd0>)
 8000baa:	4813      	ldr	r0, [pc, #76]	@ (8000bf8 <SpiRead+0xe8>)
 8000bac:	f002 fe31 	bl	8003812 <HAL_SPI_TransmitReceive>
    //status = HAL_SPI_Receive(&hspi1, rx_data, rLen, HAL_MAX_DELAY);

    Delay_us(0.5); //t10
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 fb73 	bl	800129c <Delay_us>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2110      	movs	r1, #16
 8000bba:	480d      	ldr	r0, [pc, #52]	@ (8000bf0 <SpiRead+0xe0>)
 8000bbc:	f001 ffab 	bl	8002b16 <HAL_GPIO_WritePin>

    Delay_us(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 fb6b 	bl	800129c <Delay_us>

    if (status != HAL_OK) {
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <SpiRead+0xec>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <SpiRead+0xc4>
    	return status;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <SpiRead+0xec>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	e000      	b.n	8000bd6 <SpiRead+0xc6>
    }

    return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000008c 	.word	0x2000008c
 8000be4:	20000088 	.word	0x20000088
 8000be8:	08005510 	.word	0x08005510
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	20000094 	.word	0x20000094
 8000bf8:	200001ac 	.word	0x200001ac
 8000bfc:	20000086 	.word	0x20000086

08000c00 <SpiClear>:


HAL_StatusTypeDef SpiClear(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	tx_data[0] = 0x00;
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <SpiClear+0x54>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Hold nCS low
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2110      	movs	r1, #16
 8000c0e:	4812      	ldr	r0, [pc, #72]	@ (8000c58 <SpiClear+0x58>)
 8000c10:	f001 ff81 	bl	8002b16 <HAL_GPIO_WritePin>
	Delay_us(0.5);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f000 fb41 	bl	800129c <Delay_us>
	status = HAL_SPI_Transmit(&hspi1, tx_data, 1, 100);
 8000c1a:	2364      	movs	r3, #100	@ 0x64
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	490d      	ldr	r1, [pc, #52]	@ (8000c54 <SpiClear+0x54>)
 8000c20:	480e      	ldr	r0, [pc, #56]	@ (8000c5c <SpiClear+0x5c>)
 8000c22:	f002 fcb2 	bl	800358a <HAL_SPI_Transmit>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <SpiClear+0x60>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	Delay_us(0.5);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 fb34 	bl	800129c <Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Pull nCS high
 8000c34:	2201      	movs	r2, #1
 8000c36:	2110      	movs	r1, #16
 8000c38:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <SpiClear+0x58>)
 8000c3a:	f001 ff6c 	bl	8002b16 <HAL_GPIO_WritePin>

	if (status != HAL_OK) {
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <SpiClear+0x60>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <SpiClear+0x4c>
		    return status;
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <SpiClear+0x60>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	e000      	b.n	8000c4e <SpiClear+0x4e>
		  }

	return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000008c 	.word	0x2000008c
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	200001ac 	.word	0x200001ac
 8000c60:	20000086 	.word	0x20000086

08000c64 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c6c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c70:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d013      	beq.n	8000ca4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c7c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c80:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c84:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00b      	beq.n	8000ca4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c8c:	e000      	b.n	8000c90 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c8e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c90:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f9      	beq.n	8000c8e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c9a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <_write>:
void Delay_us(uint32_t us);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  int i = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  for(i = 0; i<len; i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e009      	b.n	8000cda <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	60ba      	str	r2, [r7, #8]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffc8 	bl	8000c64 <ITM_SendChar>
  for(i = 0; i<len; i++)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dbf1      	blt.n	8000cc6 <_write+0x16>
  return len;
 8000ce2:	687b      	ldr	r3, [r7, #4]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fde5 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f857 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 fa2f 	bl	800115c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000cfe:	f000 f8eb 	bl	8000ed8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d02:	f000 f91f 	bl	8000f44 <MX_CAN2_Init>
  // MX_SDIO_SD_Init();
  MX_SPI1_Init();
 8000d06:	f000 f951 	bl	8000fac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000d0a:	f000 f9fd 	bl	8001108 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000d0e:	f000 f9d1 	bl	80010b4 <MX_UART4_Init>
  MX_ADC1_Init();
 8000d12:	f000 f88f 	bl	8000e34 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000d16:	f000 f97f 	bl	8001018 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000d1a:	481a      	ldr	r0, [pc, #104]	@ (8000d84 <main+0x98>)
 8000d1c:	f001 f9c7 	bl	80020ae <HAL_CAN_Start>
  HAL_TIM_Base_Start(&htim4);
 8000d20:	4819      	ldr	r0, [pc, #100]	@ (8000d88 <main+0x9c>)
 8000d22:	f003 f827 	bl	8003d74 <HAL_TIM_Base_Start>

  printf("BQ79600 Battery Monitor System Starting...\r\n");
 8000d26:	4819      	ldr	r0, [pc, #100]	@ (8000d8c <main+0xa0>)
 8000d28:	f003 fd70 	bl	800480c <puts>

  // Step 2: Wake up and initialize the BQ79600 and BQ79616

  printf("Waking up BQ79600...\r\n");
 8000d2c:	4818      	ldr	r0, [pc, #96]	@ (8000d90 <main+0xa4>)
 8000d2e:	f003 fd6d 	bl	800480c <puts>
  bool wake = false;
 8000d32:	2300      	movs	r3, #0
 8000d34:	71fb      	strb	r3, [r7, #7]
  status = BQ79600_WakeUp(2,wake);
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f7ff fc44 	bl	80005c8 <BQ79600_WakeUp>
 8000d40:	4603      	mov	r3, r0
 8000d42:	71bb      	strb	r3, [r7, #6]
  if(status == HAL_OK){
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d102      	bne.n	8000d50 <main+0x64>
	  printf("Wake GOOD\r\n");
 8000d4a:	4812      	ldr	r0, [pc, #72]	@ (8000d94 <main+0xa8>)
 8000d4c:	f003 fd5e 	bl	800480c <puts>
  }


  printf("Auto-addressing...\r\n");
 8000d50:	4811      	ldr	r0, [pc, #68]	@ (8000d98 <main+0xac>)
 8000d52:	f003 fd5b 	bl	800480c <puts>
  status = SpiAutoAddress(2);
 8000d56:	2002      	movs	r0, #2
 8000d58:	f7ff fcba 	bl	80006d0 <SpiAutoAddress>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	71bb      	strb	r3, [r7, #6]
  if(status == HAL_OK){
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <main+0x82>
  	  printf("Auto-addressing GOOD\r\n");
 8000d66:	480d      	ldr	r0, [pc, #52]	@ (8000d9c <main+0xb0>)
 8000d68:	f003 fd50 	bl	800480c <puts>
 8000d6c:	e004      	b.n	8000d78 <main+0x8c>
   }
  else
	  printf("HAL ERROR %d\r\n", status);
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	4619      	mov	r1, r3
 8000d72:	480b      	ldr	r0, [pc, #44]	@ (8000da0 <main+0xb4>)
 8000d74:	f003 fce2 	bl	800473c <iprintf>


  printf("Initialization complete, starting main loop...\r\n");
 8000d78:	480a      	ldr	r0, [pc, #40]	@ (8000da4 <main+0xb8>)
 8000d7a:	f003 fd47 	bl	800480c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d7e:	bf00      	nop
 8000d80:	e7fd      	b.n	8000d7e <main+0x92>
 8000d82:	bf00      	nop
 8000d84:	2000015c 	.word	0x2000015c
 8000d88:	20000204 	.word	0x20000204
 8000d8c:	08005538 	.word	0x08005538
 8000d90:	08005564 	.word	0x08005564
 8000d94:	0800557c 	.word	0x0800557c
 8000d98:	08005588 	.word	0x08005588
 8000d9c:	0800559c 	.word	0x0800559c
 8000da0:	080055b4 	.word	0x080055b4
 8000da4:	080055c4 	.word	0x080055c4

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b092      	sub	sp, #72	@ 0x48
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	2230      	movs	r2, #48	@ 0x30
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fe08 	bl	80049cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dda:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000ddc:	230d      	movs	r3, #13
 8000dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8000de0:	23c3      	movs	r3, #195	@ 0xc3
 8000de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000de8:	2305      	movs	r3, #5
 8000dea:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fea9 	bl	8002b48 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000dfc:	f000 fa66 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2302      	movs	r3, #2
 8000e06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f002 f8e7 	bl	8002ff0 <HAL_RCC_ClockConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e28:	f000 fa50 	bl	80012cc <Error_Handler>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3748      	adds	r7, #72	@ 0x48
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e48:	4a21      	ldr	r2, [pc, #132]	@ (8000ed0 <MX_ADC1_Init+0x9c>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e74:	4a17      	ldr	r2, [pc, #92]	@ (8000ed4 <MX_ADC1_Init+0xa0>)
 8000e76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e78:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e92:	480e      	ldr	r0, [pc, #56]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000e94:	f000 fda6 	bl	80019e4 <HAL_ADC_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f000 fa15 	bl	80012cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ea2:	230b      	movs	r3, #11
 8000ea4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <MX_ADC1_Init+0x98>)
 8000eb4:	f000 fdda 	bl	8001a6c <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ebe:	f000 fa05 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000114 	.word	0x20000114
 8000ed0:	40012000 	.word	0x40012000
 8000ed4:	0f000001 	.word	0x0f000001

08000ed8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000edc:	4b17      	ldr	r3, [pc, #92]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000ede:	4a18      	ldr	r2, [pc, #96]	@ (8000f40 <MX_CAN1_Init+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 15;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000ef6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000efa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	@ (8000f3c <MX_CAN1_Init+0x64>)
 8000f28:	f000 ffc6 	bl	8001eb8 <HAL_CAN_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000f32:	f000 f9cb 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000015c 	.word	0x2000015c
 8000f40:	40006400 	.word	0x40006400

08000f44 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f48:	4b16      	ldr	r3, [pc, #88]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f4a:	4a17      	ldr	r2, [pc, #92]	@ (8000fa8 <MX_CAN2_Init+0x64>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 10;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f50:	220a      	movs	r2, #10
 8000f52:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f54:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f60:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f84:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <MX_CAN2_Init+0x60>)
 8000f92:	f000 ff91 	bl	8001eb8 <HAL_CAN_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000f9c:	f000 f996 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000184 	.word	0x20000184
 8000fa8:	40006800 	.word	0x40006800

08000fac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fb2:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <MX_SPI1_Init+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; // 60MHz/16 = 3.75MHz
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fe0:	2218      	movs	r2, #24
 8000fe2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ff8:	220a      	movs	r2, #10
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_SPI1_Init+0x64>)
 8000ffe:	f002 fa3b 	bl	8003478 <HAL_SPI_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001008:	f000 f960 	bl	80012cc <Error_Handler>
  }
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200001ac 	.word	0x200001ac
 8001014:	40013000 	.word	0x40013000

08001018 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001034:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_TIM4_Init+0x94>)
 8001036:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <MX_TIM4_Init+0x98>)
 8001038:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 60;
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_TIM4_Init+0x94>)
 800103c:	223c      	movs	r2, #60	@ 0x3c
 800103e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_TIM4_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_TIM4_Init+0x94>)
 8001048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800104c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_TIM4_Init+0x94>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_TIM4_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800105a:	4814      	ldr	r0, [pc, #80]	@ (80010ac <MX_TIM4_Init+0x94>)
 800105c:	f002 fe3b 	bl	8003cd6 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001066:	f000 f931 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4619      	mov	r1, r3
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_TIM4_Init+0x94>)
 8001078:	f002 fee2 	bl	8003e40 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 f923 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800108e:	463b      	mov	r3, r7
 8001090:	4619      	mov	r1, r3
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <MX_TIM4_Init+0x94>)
 8001094:	f003 f8dc 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800109e:	f000 f915 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000204 	.word	0x20000204
 80010b0:	40000800 	.word	0x40000800

080010b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <MX_UART4_Init+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e4:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_UART4_Init+0x4c>)
 80010ec:	f003 f92a 	bl	8004344 <HAL_UART_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80010f6:	f000 f8e9 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000024c 	.word	0x2000024c
 8001104:	40004c00 	.word	0x40004c00

08001108 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <MX_USART2_UART_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_USART2_UART_Init+0x4c>)
 8001140:	f003 f900 	bl	8004344 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800114a:	f000 f8bf 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000294 	.word	0x20000294
 8001158:	40004400 	.word	0x40004400

0800115c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	@ 0x28
 8001160:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b45      	ldr	r3, [pc, #276]	@ (800128c <MX_GPIO_Init+0x130>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a44      	ldr	r2, [pc, #272]	@ (800128c <MX_GPIO_Init+0x130>)
 800117c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b42      	ldr	r3, [pc, #264]	@ (800128c <MX_GPIO_Init+0x130>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <MX_GPIO_Init+0x130>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a3d      	ldr	r2, [pc, #244]	@ (800128c <MX_GPIO_Init+0x130>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <MX_GPIO_Init+0x130>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b37      	ldr	r3, [pc, #220]	@ (800128c <MX_GPIO_Init+0x130>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a36      	ldr	r2, [pc, #216]	@ (800128c <MX_GPIO_Init+0x130>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <MX_GPIO_Init+0x130>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b30      	ldr	r3, [pc, #192]	@ (800128c <MX_GPIO_Init+0x130>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a2f      	ldr	r2, [pc, #188]	@ (800128c <MX_GPIO_Init+0x130>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <MX_GPIO_Init+0x130>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b29      	ldr	r3, [pc, #164]	@ (800128c <MX_GPIO_Init+0x130>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a28      	ldr	r2, [pc, #160]	@ (800128c <MX_GPIO_Init+0x130>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b26      	ldr	r3, [pc, #152]	@ (800128c <MX_GPIO_Init+0x130>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2134      	movs	r1, #52	@ 0x34
 8001202:	4823      	ldr	r0, [pc, #140]	@ (8001290 <MX_GPIO_Init+0x134>)
 8001204:	f001 fc87 	bl	8002b16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f240 4101 	movw	r1, #1025	@ 0x401
 800120e:	4821      	ldr	r0, [pc, #132]	@ (8001294 <MX_GPIO_Init+0x138>)
 8001210:	f001 fc81 	bl	8002b16 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 CHARGE_EN_LV_Pin DISCHARGE_EN_LV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CHARGE_EN_LV_Pin|DISCHARGE_EN_LV_Pin;
 8001214:	2334      	movs	r3, #52	@ 0x34
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4819      	ldr	r0, [pc, #100]	@ (8001290 <MX_GPIO_Init+0x134>)
 800122c:	f001 fabe 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_SAFE_LV_Pin FAN_EN_LV_Pin */
  GPIO_InitStruct.Pin = CHARGE_SAFE_LV_Pin|FAN_EN_LV_Pin;
 8001230:	f240 4301 	movw	r3, #1025	@ 0x401
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4812      	ldr	r0, [pc, #72]	@ (8001294 <MX_GPIO_Init+0x138>)
 800124a:	f001 faaf 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_PWR_LV_ISO_Pin READY_PWR_LV_ISO_Pin BQ_NFAULT_Pin BQ_SPI_RDY_Pin */
  GPIO_InitStruct.Pin = CHARGE_PWR_LV_ISO_Pin|READY_PWR_LV_ISO_Pin|BQ_NFAULT_Pin|BQ_SPI_RDY_Pin;
 800124e:	f644 0306 	movw	r3, #18438	@ 0x4806
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	480c      	ldr	r0, [pc, #48]	@ (8001294 <MX_GPIO_Init+0x138>)
 8001264:	f001 faa2 	bl	80027ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_DET_Pin */
  GPIO_InitStruct.Pin = SDIO_DET_Pin;
 8001268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_DET_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4806      	ldr	r0, [pc, #24]	@ (8001298 <MX_GPIO_Init+0x13c>)
 800127e:	f001 fa95 	bl	80027ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800
 8001290:	40020800 	.word	0x40020800
 8001294:	40020400 	.word	0x40020400
 8001298:	40020000 	.word	0x40020000

0800129c <Delay_us>:
 * @param  us: Number of microseconds to delay
 * @retval None
 * @note   This is a placeholder - implement using a timer peripheral
 */
void Delay_us(uint32_t us)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <Delay_us+0x2c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 80012ac:	bf00      	nop
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <Delay_us+0x2c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d8f9      	bhi.n	80012ae <Delay_us+0x12>
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000204 	.word	0x20000204

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <Error_Handler+0x8>

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_MspInit+0x48>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <HAL_MspInit+0x48>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <HAL_MspInit+0x48>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_MspInit+0x48>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a07      	ldr	r2, [pc, #28]	@ (8001320 <HAL_MspInit+0x48>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <HAL_MspInit+0x48>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40023800 	.word	0x40023800

08001324 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <HAL_ADC_MspInit+0x7c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d127      	bne.n	8001396 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <HAL_ADC_MspInit+0x80>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800137e:	2302      	movs	r3, #2
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <HAL_ADC_MspInit+0x84>)
 8001392:	f001 fa0b 	bl	80027ac <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40012000 	.word	0x40012000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020800 	.word	0x40020800

080013ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08c      	sub	sp, #48	@ 0x30
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a4b      	ldr	r2, [pc, #300]	@ (80014f8 <HAL_CAN_MspInit+0x14c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d13e      	bne.n	800144c <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013ce:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <HAL_CAN_MspInit+0x150>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	4a49      	ldr	r2, [pc, #292]	@ (80014fc <HAL_CAN_MspInit+0x150>)
 80013d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013d8:	4b48      	ldr	r3, [pc, #288]	@ (80014fc <HAL_CAN_MspInit+0x150>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10d      	bne.n	80013fc <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
 80013e4:	4b46      	ldr	r3, [pc, #280]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a45      	ldr	r2, [pc, #276]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 80013ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f0:	4b43      	ldr	r3, [pc, #268]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	4b3f      	ldr	r3, [pc, #252]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001404:	4a3e      	ldr	r2, [pc, #248]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6313      	str	r3, [r2, #48]	@ 0x30
 800140c:	4b3c      	ldr	r3, [pc, #240]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001418:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800141c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800142a:	2309      	movs	r3, #9
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4833      	ldr	r0, [pc, #204]	@ (8001504 <HAL_CAN_MspInit+0x158>)
 8001436:	f001 f9b9 	bl	80027ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	2014      	movs	r0, #20
 8001440:	f001 f97d 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001444:	2014      	movs	r0, #20
 8001446:	f001 f996 	bl	8002776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800144a:	e050      	b.n	80014ee <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a2d      	ldr	r2, [pc, #180]	@ (8001508 <HAL_CAN_MspInit+0x15c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d14b      	bne.n	80014ee <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	4a28      	ldr	r2, [pc, #160]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 8001460:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001464:	6413      	str	r3, [r2, #64]	@ 0x40
 8001466:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001472:	4b22      	ldr	r3, [pc, #136]	@ (80014fc <HAL_CAN_MspInit+0x150>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	4a20      	ldr	r2, [pc, #128]	@ (80014fc <HAL_CAN_MspInit+0x150>)
 800147a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800147c:	4b1f      	ldr	r3, [pc, #124]	@ (80014fc <HAL_CAN_MspInit+0x150>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d10d      	bne.n	80014a0 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148c:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 800148e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001492:	6413      	str	r3, [r2, #64]	@ 0x40
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	4a15      	ldr	r2, [pc, #84]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <HAL_CAN_MspInit+0x154>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014bc:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80014ce:	2309      	movs	r3, #9
 80014d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	4619      	mov	r1, r3
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <HAL_CAN_MspInit+0x160>)
 80014da:	f001 f967 	bl	80027ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	2040      	movs	r0, #64	@ 0x40
 80014e4:	f001 f92b 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80014e8:	2040      	movs	r0, #64	@ 0x40
 80014ea:	f001 f944 	bl	8002776 <HAL_NVIC_EnableIRQ>
}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	@ 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40006400 	.word	0x40006400
 80014fc:	200002dc 	.word	0x200002dc
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000
 8001508:	40006800 	.word	0x40006800
 800150c:	40020400 	.word	0x40020400

08001510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	@ (8001594 <HAL_SPI_MspInit+0x84>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d12b      	bne.n	800158a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <HAL_SPI_MspInit+0x88>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	4a17      	ldr	r2, [pc, #92]	@ (8001598 <HAL_SPI_MspInit+0x88>)
 800153c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001540:	6453      	str	r3, [r2, #68]	@ 0x44
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <HAL_SPI_MspInit+0x88>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_SPI_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a10      	ldr	r2, [pc, #64]	@ (8001598 <HAL_SPI_MspInit+0x88>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <HAL_SPI_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800156a:	23f0      	movs	r3, #240	@ 0xf0
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800157a:	2305      	movs	r3, #5
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <HAL_SPI_MspInit+0x8c>)
 8001586:	f001 f911 	bl	80027ac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	@ 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40013000 	.word	0x40013000
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_TIM_Base_MspInit+0x38>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10d      	bne.n	80015ce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <HAL_TIM_Base_MspInit+0x3c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_TIM_Base_MspInit+0x3c>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <HAL_TIM_Base_MspInit+0x3c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40000800 	.word	0x40000800
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	@ 0x30
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a32      	ldr	r2, [pc, #200]	@ (80016c8 <HAL_UART_MspInit+0xe8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12c      	bne.n	800165c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a30      	ldr	r2, [pc, #192]	@ (80016cc <HAL_UART_MspInit+0xec>)
 800160c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b2e      	ldr	r3, [pc, #184]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4a29      	ldr	r2, [pc, #164]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4b27      	ldr	r3, [pc, #156]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800163a:	2303      	movs	r3, #3
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001642:	2301      	movs	r3, #1
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800164a:	2308      	movs	r3, #8
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	4619      	mov	r1, r3
 8001654:	481e      	ldr	r0, [pc, #120]	@ (80016d0 <HAL_UART_MspInit+0xf0>)
 8001656:	f001 f8a9 	bl	80027ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800165a:	e030      	b.n	80016be <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <HAL_UART_MspInit+0xf4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12b      	bne.n	80016be <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <HAL_UART_MspInit+0xec>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4a17      	ldr	r2, [pc, #92]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001674:	6413      	str	r3, [r2, #64]	@ 0x40
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a10      	ldr	r2, [pc, #64]	@ (80016cc <HAL_UART_MspInit+0xec>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <HAL_UART_MspInit+0xec>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800169e:	230c      	movs	r3, #12
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ae:	2307      	movs	r3, #7
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <HAL_UART_MspInit+0xf0>)
 80016ba:	f001 f877 	bl	80027ac <HAL_GPIO_Init>
}
 80016be:	bf00      	nop
 80016c0:	3730      	adds	r7, #48	@ 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40004c00 	.word	0x40004c00
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40004400 	.word	0x40004400

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <NMI_Handler+0x4>

080016e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <MemManage_Handler+0x4>

080016f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <UsageFault_Handler+0x4>

08001700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001728:	f000 f91c 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}

08001730 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <CAN1_RX0_IRQHandler+0x10>)
 8001736:	f000 fcfe 	bl	8002136 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000015c 	.word	0x2000015c

08001744 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <CAN2_RX0_IRQHandler+0x10>)
 800174a:	f000 fcf4 	bl	8002136 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000184 	.word	0x20000184

08001758 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e00a      	b.n	8001780 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800176a:	f3af 8000 	nop.w
 800176e:	4601      	mov	r1, r0
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	60ba      	str	r2, [r7, #8]
 8001776:	b2ca      	uxtb	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf0      	blt.n	800176a <_read+0x12>
  }

  return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b8:	605a      	str	r2, [r3, #4]
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f003 f920 	bl	8004a68 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000c000 	.word	0x2000c000
 8001854:	00000400 	.word	0x00000400
 8001858:	200002e0 	.word	0x200002e0
 800185c:	20000438 	.word	0x20000438

08001860 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001870:	f7ff fff6 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001876:	490d      	ldr	r1, [pc, #52]	@ (80018ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001878:	4a0d      	ldr	r2, [pc, #52]	@ (80018b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	@ (80018b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800188c:	4c0a      	ldr	r4, [pc, #40]	@ (80018b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800189a:	f003 f8eb 	bl	8004a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7ff fa25 	bl	8000cec <main>
  bx  lr    
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018a4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018b0:	08005850 	.word	0x08005850
  ldr r2, =_sbss
 80018b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018b8:	20000434 	.word	0x20000434

080018bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <HAL_Init+0x40>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <HAL_Init+0x40>)
 80018d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a07      	ldr	r2, [pc, #28]	@ (8001900 <HAL_Init+0x40>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 ff1d 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ee:	200f      	movs	r0, #15
 80018f0:	f000 f808 	bl	8001904 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80018f4:	f7ff fcf0 	bl	80012d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_InitTick+0x54>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_InitTick+0x58>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 ff35 	bl	8002792 <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e00e      	b.n	8001950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d80a      	bhi.n	800194e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f000 fefd 	bl	800273e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001944:	4a06      	ldr	r2, [pc, #24]	@ (8001960 <HAL_InitTick+0x5c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000000 	.word	0x20000000
 800195c:	20000008 	.word	0x20000008
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b05      	ldr	r3, [pc, #20]	@ (8001980 <HAL_IncTick+0x1c>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_IncTick+0x20>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a03      	ldr	r2, [pc, #12]	@ (8001984 <HAL_IncTick+0x20>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	20000008 	.word	0x20000008
 8001984:	200002e4 	.word	0x200002e4

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b02      	ldr	r3, [pc, #8]	@ (8001998 <HAL_GetTick+0x10>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	200002e4 	.word	0x200002e4

0800199c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a4:	f7ff fff0 	bl	8001988 <HAL_GetTick>
 80019a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b4:	d005      	beq.n	80019c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_Delay+0x44>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019c2:	bf00      	nop
 80019c4:	f7ff ffe0 	bl	8001988 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d8f7      	bhi.n	80019c4 <HAL_Delay+0x28>
  {
  }
}
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000008 	.word	0x20000008

080019e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e033      	b.n	8001a62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d109      	bne.n	8001a16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fc8e 	bl	8001324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d118      	bne.n	8001a54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a2a:	f023 0302 	bic.w	r3, r3, #2
 8001a2e:	f043 0202 	orr.w	r2, r3, #2
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f938 	bl	8001cac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f023 0303 	bic.w	r3, r3, #3
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a52:	e001      	b.n	8001a58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1c>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e103      	b.n	8001c90 <HAL_ADC_ConfigChannel+0x224>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	d925      	bls.n	8001ae4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68d9      	ldr	r1, [r3, #12]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b1e      	subs	r3, #30
 8001aae:	2207      	movs	r2, #7
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	400a      	ands	r2, r1
 8001abc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68d9      	ldr	r1, [r3, #12]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4403      	add	r3, r0
 8001ad6:	3b1e      	subs	r3, #30
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	e022      	b.n	8001b2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	2207      	movs	r2, #7
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	400a      	ands	r2, r1
 8001b06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6919      	ldr	r1, [r3, #16]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4403      	add	r3, r0
 8001b20:	409a      	lsls	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d824      	bhi.n	8001b7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	3b05      	subs	r3, #5
 8001b44:	221f      	movs	r2, #31
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	400a      	ands	r2, r1
 8001b52:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b05      	subs	r3, #5
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b7a:	e04c      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d824      	bhi.n	8001bce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	3b23      	subs	r3, #35	@ 0x23
 8001b96:	221f      	movs	r2, #31
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b23      	subs	r3, #35	@ 0x23
 8001bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30
 8001bcc:	e023      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b41      	subs	r3, #65	@ 0x41
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	400a      	ands	r2, r1
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b41      	subs	r3, #65	@ 0x41
 8001c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a20      	ldr	r2, [pc, #128]	@ (8001c9c <HAL_ADC_ConfigChannel+0x230>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d109      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1c8>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b12      	cmp	r3, #18
 8001c26:	d105      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <HAL_ADC_ConfigChannel+0x234>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <HAL_ADC_ConfigChannel+0x234>)
 8001c2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c32:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a18      	ldr	r2, [pc, #96]	@ (8001c9c <HAL_ADC_ConfigChannel+0x230>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d123      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x21a>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d003      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x1e2>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b11      	cmp	r3, #17
 8001c4c:	d11b      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <HAL_ADC_ConfigChannel+0x234>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a13      	ldr	r2, [pc, #76]	@ (8001ca0 <HAL_ADC_ConfigChannel+0x234>)
 8001c54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c58:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d111      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HAL_ADC_ConfigChannel+0x238>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a10      	ldr	r2, [pc, #64]	@ (8001ca8 <HAL_ADC_ConfigChannel+0x23c>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	0c9a      	lsrs	r2, r3, #18
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001c78:	e002      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f9      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40012000 	.word	0x40012000
 8001ca0:	40012300 	.word	0x40012300
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001cb4:	4b7e      	ldr	r3, [pc, #504]	@ (8001eb0 <ADC_Init+0x204>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4a7d      	ldr	r2, [pc, #500]	@ (8001eb0 <ADC_Init+0x204>)
 8001cba:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001cbe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb0 <ADC_Init+0x204>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4979      	ldr	r1, [pc, #484]	@ (8001eb0 <ADC_Init+0x204>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	021a      	lsls	r2, r3, #8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6899      	ldr	r1, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	4a5e      	ldr	r2, [pc, #376]	@ (8001eb4 <ADC_Init+0x208>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d022      	beq.n	8001d86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6899      	ldr	r1, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6899      	ldr	r1, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	e00f      	b.n	8001da6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0202 	bic.w	r2, r2, #2
 8001db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7e1b      	ldrb	r3, [r3, #24]
 8001dc0:	005a      	lsls	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d027      	beq.n	8001e24 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001de2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001dfe:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	fa92 f2a2 	rbit	r2, r2
 8001e06:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	fab2 f282 	clz	r2, r2
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	fa03 f102 	lsl.w	r1, r3, r2
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	e007      	b.n	8001e34 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	051a      	lsls	r2, r3, #20
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6899      	ldr	r1, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e76:	025a      	lsls	r2, r3, #9
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6899      	ldr	r1, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	029a      	lsls	r2, r3, #10
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	609a      	str	r2, [r3, #8]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40012300 	.word	0x40012300
 8001eb4:	0f000001 	.word	0x0f000001

08001eb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0ed      	b.n	80020a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fa68 	bl	80013ac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eec:	f7ff fd4c 	bl	8001988 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ef2:	e012      	b.n	8001f1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ef4:	f7ff fd48 	bl	8001988 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b0a      	cmp	r3, #10
 8001f00:	d90b      	bls.n	8001f1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2205      	movs	r2, #5
 8001f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0c5      	b.n	80020a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0e5      	beq.n	8001ef4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0202 	bic.w	r2, r2, #2
 8001f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f38:	f7ff fd26 	bl	8001988 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f3e:	e012      	b.n	8001f66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f40:	f7ff fd22 	bl	8001988 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b0a      	cmp	r3, #10
 8001f4c:	d90b      	bls.n	8001f66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2205      	movs	r2, #5
 8001f5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e09f      	b.n	80020a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e5      	bne.n	8001f40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7e1b      	ldrb	r3, [r3, #24]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d108      	bne.n	8001f8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e007      	b.n	8001f9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7e5b      	ldrb	r3, [r3, #25]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d108      	bne.n	8001fb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	e007      	b.n	8001fc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7e9b      	ldrb	r3, [r3, #26]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d108      	bne.n	8001fe2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0220 	orr.w	r2, r2, #32
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e007      	b.n	8001ff2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0220 	bic.w	r2, r2, #32
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	7edb      	ldrb	r3, [r3, #27]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0210 	bic.w	r2, r2, #16
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e007      	b.n	800201c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0210 	orr.w	r2, r2, #16
 800201a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7f1b      	ldrb	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d108      	bne.n	8002036 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0208 	orr.w	r2, r2, #8
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	e007      	b.n	8002046 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0208 	bic.w	r2, r2, #8
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7f5b      	ldrb	r3, [r3, #29]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d108      	bne.n	8002060 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0204 	orr.w	r2, r2, #4
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e007      	b.n	8002070 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0204 	bic.w	r2, r2, #4
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	ea42 0103 	orr.w	r1, r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	1e5a      	subs	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d12e      	bne.n	8002120 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0201 	bic.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020da:	f7ff fc55 	bl	8001988 <HAL_GetTick>
 80020de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020e0:	e012      	b.n	8002108 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020e2:	f7ff fc51 	bl	8001988 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b0a      	cmp	r3, #10
 80020ee:	d90b      	bls.n	8002108 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2205      	movs	r2, #5
 8002100:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e012      	b.n	800212e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e5      	bne.n	80020e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e006      	b.n	800212e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002124:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b08a      	sub	sp, #40	@ 0x28
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d07c      	beq.n	8002276 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d023      	beq.n	80021ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2201      	movs	r2, #1
 800218c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f983 	bl	80024a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800219e:	e016      	b.n	80021ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b2:	e00c      	b.n	80021ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	e002      	b.n	80021ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f986 	bl	80024da <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d024      	beq.n	8002222 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f962 	bl	80024b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80021f2:	e016      	b.n	8002222 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
 8002206:	e00c      	b.n	8002222 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
 800221a:	e002      	b.n	8002222 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f965 	bl	80024ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d024      	beq.n	8002276 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002234:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f941 	bl	80024c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002246:	e016      	b.n	8002276 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
 800225a:	e00c      	b.n	8002276 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
 800226e:	e002      	b.n	8002276 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f944 	bl	80024fe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00c      	beq.n	800229a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2208      	movs	r2, #8
 80022b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f933 	bl	8002522 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f91b 	bl	8002510 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00c      	beq.n	80022fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2210      	movs	r2, #16
 80022fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00b      	beq.n	8002320 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2208      	movs	r2, #8
 8002318:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f913 	bl	8002546 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f8fb 	bl	8002534 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2210      	movs	r2, #16
 8002358:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8fc 	bl	8002558 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2208      	movs	r2, #8
 800237a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f8f4 	bl	800256a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d07b      	beq.n	8002484 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d072      	beq.n	800247c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d043      	beq.n	800247c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d03e      	beq.n	800247c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002404:	2b60      	cmp	r3, #96	@ 0x60
 8002406:	d02b      	beq.n	8002460 <HAL_CAN_IRQHandler+0x32a>
 8002408:	2b60      	cmp	r3, #96	@ 0x60
 800240a:	d82e      	bhi.n	800246a <HAL_CAN_IRQHandler+0x334>
 800240c:	2b50      	cmp	r3, #80	@ 0x50
 800240e:	d022      	beq.n	8002456 <HAL_CAN_IRQHandler+0x320>
 8002410:	2b50      	cmp	r3, #80	@ 0x50
 8002412:	d82a      	bhi.n	800246a <HAL_CAN_IRQHandler+0x334>
 8002414:	2b40      	cmp	r3, #64	@ 0x40
 8002416:	d019      	beq.n	800244c <HAL_CAN_IRQHandler+0x316>
 8002418:	2b40      	cmp	r3, #64	@ 0x40
 800241a:	d826      	bhi.n	800246a <HAL_CAN_IRQHandler+0x334>
 800241c:	2b30      	cmp	r3, #48	@ 0x30
 800241e:	d010      	beq.n	8002442 <HAL_CAN_IRQHandler+0x30c>
 8002420:	2b30      	cmp	r3, #48	@ 0x30
 8002422:	d822      	bhi.n	800246a <HAL_CAN_IRQHandler+0x334>
 8002424:	2b10      	cmp	r3, #16
 8002426:	d002      	beq.n	800242e <HAL_CAN_IRQHandler+0x2f8>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d005      	beq.n	8002438 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800242c:	e01d      	b.n	800246a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002436:	e019      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002440:	e014      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	f043 0320 	orr.w	r3, r3, #32
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800244a:	e00f      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002454:	e00a      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800245e:	e005      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002468:	e000      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            break;
 800246a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800247a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2204      	movs	r2, #4
 8002482:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f870 	bl	800257c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	@ 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr

0800256a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
	...

08002590 <__NVIC_SetPriorityGrouping>:
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4906      	ldr	r1, [pc, #24]	@ (8002628 <__NVIC_EnableIRQ+0x34>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	@ (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	@ (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	@ 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <SysTick_Config>:
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f7ff ff90 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff2d 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff42 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff90 	bl	8002680 <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5f 	bl	800262c <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff35 	bl	80025f4 <__NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffa2 	bl	80026e4 <SysTick_Config>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ba:	e16f      	b.n	8002a9c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2101      	movs	r1, #1
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa01 f303 	lsl.w	r3, r1, r3
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 8161 	beq.w	8002a96 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d005      	beq.n	80027ec <HAL_GPIO_Init+0x40>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d130      	bne.n	800284e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002822:	2201      	movs	r2, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 0201 	and.w	r2, r3, #1
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b03      	cmp	r3, #3
 8002858:	d017      	beq.n	800288a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d123      	bne.n	80028de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	08da      	lsrs	r2, r3, #3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3208      	adds	r2, #8
 800289e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	220f      	movs	r2, #15
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	08da      	lsrs	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3208      	adds	r2, #8
 80028d8:	6939      	ldr	r1, [r7, #16]
 80028da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0203 	and.w	r2, r3, #3
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80bb 	beq.w	8002a96 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	4b64      	ldr	r3, [pc, #400]	@ (8002ab8 <HAL_GPIO_Init+0x30c>)
 8002926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002928:	4a63      	ldr	r2, [pc, #396]	@ (8002ab8 <HAL_GPIO_Init+0x30c>)
 800292a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800292e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002930:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_GPIO_Init+0x30c>)
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800293c:	4a5f      	ldr	r2, [pc, #380]	@ (8002abc <HAL_GPIO_Init+0x310>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3302      	adds	r3, #2
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a57      	ldr	r2, [pc, #348]	@ (8002ac0 <HAL_GPIO_Init+0x314>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d031      	beq.n	80029cc <HAL_GPIO_Init+0x220>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a56      	ldr	r2, [pc, #344]	@ (8002ac4 <HAL_GPIO_Init+0x318>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d02b      	beq.n	80029c8 <HAL_GPIO_Init+0x21c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a55      	ldr	r2, [pc, #340]	@ (8002ac8 <HAL_GPIO_Init+0x31c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d025      	beq.n	80029c4 <HAL_GPIO_Init+0x218>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a54      	ldr	r2, [pc, #336]	@ (8002acc <HAL_GPIO_Init+0x320>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d01f      	beq.n	80029c0 <HAL_GPIO_Init+0x214>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a53      	ldr	r2, [pc, #332]	@ (8002ad0 <HAL_GPIO_Init+0x324>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d019      	beq.n	80029bc <HAL_GPIO_Init+0x210>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a52      	ldr	r2, [pc, #328]	@ (8002ad4 <HAL_GPIO_Init+0x328>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_GPIO_Init+0x20c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a51      	ldr	r2, [pc, #324]	@ (8002ad8 <HAL_GPIO_Init+0x32c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00d      	beq.n	80029b4 <HAL_GPIO_Init+0x208>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a50      	ldr	r2, [pc, #320]	@ (8002adc <HAL_GPIO_Init+0x330>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <HAL_GPIO_Init+0x204>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae0 <HAL_GPIO_Init+0x334>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_GPIO_Init+0x200>
 80029a8:	2308      	movs	r3, #8
 80029aa:	e010      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029ac:	2309      	movs	r3, #9
 80029ae:	e00e      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029b0:	2307      	movs	r3, #7
 80029b2:	e00c      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029b4:	2306      	movs	r3, #6
 80029b6:	e00a      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029b8:	2305      	movs	r3, #5
 80029ba:	e008      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029bc:	2304      	movs	r3, #4
 80029be:	e006      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029c0:	2303      	movs	r3, #3
 80029c2:	e004      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e002      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_GPIO_Init+0x222>
 80029cc:	2300      	movs	r3, #0
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	f002 0203 	and.w	r2, r2, #3
 80029d4:	0092      	lsls	r2, r2, #2
 80029d6:	4093      	lsls	r3, r2
 80029d8:	461a      	mov	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029e0:	4936      	ldr	r1, [pc, #216]	@ (8002abc <HAL_GPIO_Init+0x310>)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a12:	4a34      	ldr	r2, [pc, #208]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b32      	ldr	r3, [pc, #200]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a42:	4b28      	ldr	r3, [pc, #160]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a90:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <HAL_GPIO_Init+0x338>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f47f ae88 	bne.w	80027bc <HAL_GPIO_Init+0x10>
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40013800 	.word	0x40013800
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	40020400 	.word	0x40020400
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40020c00 	.word	0x40020c00
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40021400 	.word	0x40021400
 8002ad8:	40021800 	.word	0x40021800
 8002adc:	40021c00 	.word	0x40021c00
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	4013      	ands	r3, r2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e001      	b.n	8002b0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	807b      	strh	r3, [r7, #2]
 8002b22:	4613      	mov	r3, r2
 8002b24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b26:	787b      	ldrb	r3, [r7, #1]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2c:	887a      	ldrh	r2, [r7, #2]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b32:	e003      	b.n	8002b3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	041a      	lsls	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	619a      	str	r2, [r3, #24]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e23b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d050      	beq.n	8002c08 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b66:	4b9e      	ldr	r3, [pc, #632]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d00c      	beq.n	8002b8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b72:	4b9b      	ldr	r3, [pc, #620]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d112      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7e:	4b98      	ldr	r3, [pc, #608]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	4b94      	ldr	r3, [pc, #592]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d036      	beq.n	8002c06 <HAL_RCC_OscConfig+0xbe>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d132      	bne.n	8002c06 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e216      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8002de4 <HAL_RCC_OscConfig+0x29c>)
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d013      	beq.n	8002bde <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fee7 	bl	8001988 <HAL_GetTick>
 8002bba:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fee3 	bl	8001988 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	@ 0x64
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e200      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd0:	4b83      	ldr	r3, [pc, #524]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x76>
 8002bdc:	e014      	b.n	8002c08 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fed3 	bl	8001988 <HAL_GetTick>
 8002be2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be6:	f7fe fecf 	bl	8001988 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b64      	cmp	r3, #100	@ 0x64
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1ec      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf8:	4b79      	ldr	r3, [pc, #484]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x9e>
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d077      	beq.n	8002d04 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c14:	4b72      	ldr	r3, [pc, #456]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c20:	4b6f      	ldr	r3, [pc, #444]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d126      	bne.n	8002c7a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d120      	bne.n	8002c7a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c38:	4b69      	ldr	r3, [pc, #420]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x108>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e1c0      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c50:	4b63      	ldr	r3, [pc, #396]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	21f8      	movs	r1, #248	@ 0xf8
 8002c5e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	69b9      	ldr	r1, [r7, #24]
 8002c62:	fa91 f1a1 	rbit	r1, r1
 8002c66:	6179      	str	r1, [r7, #20]
  return result;
 8002c68:	6979      	ldr	r1, [r7, #20]
 8002c6a:	fab1 f181 	clz	r1, r1
 8002c6e:	b2c9      	uxtb	r1, r1
 8002c70:	408b      	lsls	r3, r1
 8002c72:	495b      	ldr	r1, [pc, #364]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c78:	e044      	b.n	8002d04 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d02a      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c82:	4b59      	ldr	r3, [pc, #356]	@ (8002de8 <HAL_RCC_OscConfig+0x2a0>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fe7e 	bl	8001988 <HAL_GetTick>
 8002c8c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fe7a 	bl	8001988 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e197      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b4f      	ldr	r3, [pc, #316]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b4c      	ldr	r3, [pc, #304]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	21f8      	movs	r1, #248	@ 0xf8
 8002cbc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6939      	ldr	r1, [r7, #16]
 8002cc0:	fa91 f1a1 	rbit	r1, r1
 8002cc4:	60f9      	str	r1, [r7, #12]
  return result;
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	fab1 f181 	clz	r1, r1
 8002ccc:	b2c9      	uxtb	r1, r1
 8002cce:	408b      	lsls	r3, r1
 8002cd0:	4943      	ldr	r1, [pc, #268]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
 8002cd6:	e015      	b.n	8002d04 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd8:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <HAL_RCC_OscConfig+0x2a0>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fe fe53 	bl	8001988 <HAL_GetTick>
 8002ce2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fe4f 	bl	8001988 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e16c      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf8:	4b39      	ldr	r3, [pc, #228]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d030      	beq.n	8002d72 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d016      	beq.n	8002d46 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d18:	4b34      	ldr	r3, [pc, #208]	@ (8002dec <HAL_RCC_OscConfig+0x2a4>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fe33 	bl	8001988 <HAL_GetTick>
 8002d22:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fe2f 	bl	8001988 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e14c      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d38:	4b29      	ldr	r3, [pc, #164]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1de>
 8002d44:	e015      	b.n	8002d72 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d46:	4b29      	ldr	r3, [pc, #164]	@ (8002dec <HAL_RCC_OscConfig+0x2a4>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7fe fe1c 	bl	8001988 <HAL_GetTick>
 8002d50:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d54:	f7fe fe18 	bl	8001988 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e135      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d66:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0304 	and.w	r3, r3, #4
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d86:	4b16      	ldr	r3, [pc, #88]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d110      	bne.n	8002db4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	4a11      	ldr	r2, [pc, #68]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da2:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <HAL_RCC_OscConfig+0x298>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <HAL_RCC_OscConfig+0x2a8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0d      	ldr	r2, [pc, #52]	@ (8002df0 <HAL_RCC_OscConfig+0x2a8>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbe:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_OscConfig+0x2a8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d122      	bne.n	8002e12 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dcc:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_RCC_OscConfig+0x2a8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a07      	ldr	r2, [pc, #28]	@ (8002df0 <HAL_RCC_OscConfig+0x2a8>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fdd6 	bl	8001988 <HAL_GetTick>
 8002ddc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dde:	e012      	b.n	8002e06 <HAL_RCC_OscConfig+0x2be>
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40023802 	.word	0x40023802
 8002de8:	42470000 	.word	0x42470000
 8002dec:	42470e80 	.word	0x42470e80
 8002df0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe fdc8 	bl	8001988 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e0e5      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b75      	ldr	r3, [pc, #468]	@ (8002fdc <HAL_RCC_OscConfig+0x494>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	4b72      	ldr	r3, [pc, #456]	@ (8002fe0 <HAL_RCC_OscConfig+0x498>)
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7fe fdb0 	bl	8001988 <HAL_GetTick>
 8002e28:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fdac 	bl	8001988 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0c7      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	4b68      	ldr	r3, [pc, #416]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ee      	beq.n	8002e2c <HAL_RCC_OscConfig+0x2e4>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fe fd9a 	bl	8001988 <HAL_GetTick>
 8002e54:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe fd96 	bl	8001988 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0b1      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ee      	bne.n	8002e58 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d105      	bne.n	8002e8e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e82:	4b58      	ldr	r3, [pc, #352]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	4a57      	ldr	r2, [pc, #348]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002e88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e8c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 809c 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e98:	4b52      	ldr	r3, [pc, #328]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d061      	beq.n	8002f68 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d146      	bne.n	8002f3a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eac:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe8 <HAL_RCC_OscConfig+0x4a0>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fd69 	bl	8001988 <HAL_GetTick>
 8002eb6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fd65 	bl	8001988 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	@ 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e082      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ecc:	4b45      	ldr	r3, [pc, #276]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f0      	bne.n	8002eba <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed8:	4b42      	ldr	r3, [pc, #264]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4b43      	ldr	r3, [pc, #268]	@ (8002fec <HAL_RCC_OscConfig+0x4a4>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	69d1      	ldr	r1, [r2, #28]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6a12      	ldr	r2, [r2, #32]
 8002ee8:	4311      	orrs	r1, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eee:	0192      	lsls	r2, r2, #6
 8002ef0:	4311      	orrs	r1, r2
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ef6:	0612      	lsls	r2, r2, #24
 8002ef8:	4311      	orrs	r1, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002efe:	0852      	lsrs	r2, r2, #1
 8002f00:	3a01      	subs	r2, #1
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	430a      	orrs	r2, r1
 8002f06:	4937      	ldr	r1, [pc, #220]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <HAL_RCC_OscConfig+0x4a0>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f12:	f7fe fd39 	bl	8001988 <HAL_GetTick>
 8002f16:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1a:	f7fe fd35 	bl	8001988 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b64      	cmp	r3, #100	@ 0x64
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e052      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3d2>
 8002f38:	e04a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe8 <HAL_RCC_OscConfig+0x4a0>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f40:	f7fe fd22 	bl	8001988 <HAL_GetTick>
 8002f44:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe fd1e 	bl	8001988 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	@ 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e03b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5a:	4b22      	ldr	r3, [pc, #136]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x400>
 8002f66:	e033      	b.n	8002fd0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e02e      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x49c>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d121      	bne.n	8002fcc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d11a      	bne.n	8002fcc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fa2:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d111      	bne.n	8002fcc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc6:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3728      	adds	r7, #40	@ 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40007000 	.word	0x40007000
 8002fe0:	40023870 	.word	0x40023870
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470060 	.word	0x42470060
 8002fec:	f0bc8000 	.word	0xf0bc8000

08002ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0d2      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003004:	4b6b      	ldr	r3, [pc, #428]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d90c      	bls.n	800302c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b68      	ldr	r3, [pc, #416]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b66      	ldr	r3, [pc, #408]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0be      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003044:	4b5c      	ldr	r3, [pc, #368]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a5b      	ldr	r2, [pc, #364]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800304a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800304e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800305c:	4b56      	ldr	r3, [pc, #344]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a55      	ldr	r2, [pc, #340]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003066:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b53      	ldr	r3, [pc, #332]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4950      	ldr	r1, [pc, #320]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d040      	beq.n	8003108 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b4a      	ldr	r3, [pc, #296]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d115      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e085      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e079      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b40      	ldr	r3, [pc, #256]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e071      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b3c      	ldr	r3, [pc, #240]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4939      	ldr	r1, [pc, #228]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fe fc56 	bl	8001988 <HAL_GetTick>
 80030dc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fe fc52 	bl	8001988 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e059      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b30      	ldr	r3, [pc, #192]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b2a      	ldr	r3, [pc, #168]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b27      	ldr	r3, [pc, #156]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e03c      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b1e      	ldr	r3, [pc, #120]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	491b      	ldr	r1, [pc, #108]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4913      	ldr	r1, [pc, #76]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800316e:	f000 f82b 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003172:	4601      	mov	r1, r0
 8003174:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800317c:	22f0      	movs	r2, #240	@ 0xf0
 800317e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	fa92 f2a2 	rbit	r2, r2
 8003186:	60fa      	str	r2, [r7, #12]
  return result;
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	fab2 f282 	clz	r2, r2
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	40d3      	lsrs	r3, r2
 8003192:	4a0a      	ldr	r2, [pc, #40]	@ (80031bc <HAL_RCC_ClockConfig+0x1cc>)
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	fa21 f303 	lsr.w	r3, r1, r3
 800319a:	4a09      	ldr	r2, [pc, #36]	@ (80031c0 <HAL_RCC_ClockConfig+0x1d0>)
 800319c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <HAL_RCC_ClockConfig+0x1d4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fbae 	bl	8001904 <HAL_InitTick>

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	080057f4 	.word	0x080057f4
 80031c0:	20000000 	.word	0x20000000
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b094      	sub	sp, #80	@ 0x50
 80031ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d4:	2300      	movs	r3, #0
 80031d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031d8:	2300      	movs	r3, #0
 80031da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e0:	4b7c      	ldr	r3, [pc, #496]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d00d      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x40>
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	f200 80e7 	bhi.w	80033c0 <HAL_RCC_GetSysClockFreq+0x1f8>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x34>
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fa:	e0e1      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b76      	ldr	r3, [pc, #472]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x210>)
 80031fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003200:	e0e1      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003202:	4b75      	ldr	r3, [pc, #468]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x210>)
 8003204:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003206:	e0de      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003208:	4b72      	ldr	r3, [pc, #456]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003210:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003212:	4b70      	ldr	r3, [pc, #448]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d065      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321e:	4b6d      	ldr	r3, [pc, #436]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	099b      	lsrs	r3, r3, #6
 8003224:	2200      	movs	r2, #0
 8003226:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003228:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003230:	633b      	str	r3, [r7, #48]	@ 0x30
 8003232:	2300      	movs	r3, #0
 8003234:	637b      	str	r3, [r7, #52]	@ 0x34
 8003236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	f04f 0000 	mov.w	r0, #0
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	0159      	lsls	r1, r3, #5
 8003248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800324c:	0150      	lsls	r0, r2, #5
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4621      	mov	r1, r4
 8003254:	1a51      	subs	r1, r2, r1
 8003256:	6139      	str	r1, [r7, #16]
 8003258:	4629      	mov	r1, r5
 800325a:	eb63 0301 	sbc.w	r3, r3, r1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800326c:	4659      	mov	r1, fp
 800326e:	018b      	lsls	r3, r1, #6
 8003270:	4651      	mov	r1, sl
 8003272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003276:	4651      	mov	r1, sl
 8003278:	018a      	lsls	r2, r1, #6
 800327a:	46d4      	mov	ip, sl
 800327c:	ebb2 080c 	subs.w	r8, r2, ip
 8003280:	4659      	mov	r1, fp
 8003282:	eb63 0901 	sbc.w	r9, r3, r1
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	eb18 0303 	adds.w	r3, r8, r3
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	462b      	mov	r3, r5
 80032a8:	eb49 0303 	adc.w	r3, r9, r3
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ba:	4629      	mov	r1, r5
 80032bc:	028b      	lsls	r3, r1, #10
 80032be:	4620      	mov	r0, r4
 80032c0:	4629      	mov	r1, r5
 80032c2:	4604      	mov	r4, r0
 80032c4:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80032c8:	4601      	mov	r1, r0
 80032ca:	028a      	lsls	r2, r1, #10
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d2:	2200      	movs	r2, #0
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032dc:	f7fc ff72 	bl	80001c4 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e8:	e05c      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b3a      	ldr	r3, [pc, #232]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	2200      	movs	r2, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	4611      	mov	r1, r2
 80032f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0159      	lsls	r1, r3, #5
 8003312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003316:	0150      	lsls	r0, r2, #5
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	46c4      	mov	ip, r8
 800331e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003322:	4640      	mov	r0, r8
 8003324:	4649      	mov	r1, r9
 8003326:	468c      	mov	ip, r1
 8003328:	eb63 0b0c 	sbc.w	fp, r3, ip
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003338:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800333c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003340:	ebb2 040a 	subs.w	r4, r2, sl
 8003344:	eb63 050b 	sbc.w	r5, r3, fp
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	00eb      	lsls	r3, r5, #3
 8003352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003356:	00e2      	lsls	r2, r4, #3
 8003358:	4614      	mov	r4, r2
 800335a:	461d      	mov	r5, r3
 800335c:	4603      	mov	r3, r0
 800335e:	18e3      	adds	r3, r4, r3
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	460b      	mov	r3, r1
 8003364:	eb45 0303 	adc.w	r3, r5, r3
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003376:	4629      	mov	r1, r5
 8003378:	028b      	lsls	r3, r1, #10
 800337a:	4620      	mov	r0, r4
 800337c:	4629      	mov	r1, r5
 800337e:	4604      	mov	r4, r0
 8003380:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003384:	4601      	mov	r1, r0
 8003386:	028a      	lsls	r2, r1, #10
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338e:	2200      	movs	r2, #0
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	61fa      	str	r2, [r7, #28]
 8003394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003398:	f7fc ff14 	bl	80001c4 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4613      	mov	r3, r2
 80033a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	3301      	adds	r3, #1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80033b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033be:	e002      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x210>)
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3750      	adds	r7, #80	@ 0x50
 80033cc:	46bd      	mov	sp, r7
 80033ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	00f42400 	.word	0x00f42400

080033dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b02      	ldr	r3, [pc, #8]	@ (80033ec <HAL_RCC_GetHCLKFreq+0x10>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	20000000 	.word	0x20000000

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80033f6:	f7ff fff1 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fa:	4601      	mov	r1, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8003404:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8003408:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	fa92 f2a2 	rbit	r2, r2
 8003410:	603a      	str	r2, [r7, #0]
  return result;
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	fab2 f282 	clz	r2, r2
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	40d3      	lsrs	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	@ (8003430 <HAL_RCC_GetPCLK1Freq+0x40>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40023800 	.word	0x40023800
 8003430:	08005804 	.word	0x08005804

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800343a:	f7ff ffcf 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 800343e:	4601      	mov	r1, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	@ (8003470 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003448:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800344c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	603a      	str	r2, [r7, #0]
  return result;
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	40d3      	lsrs	r3, r2
 8003460:	4a04      	ldr	r2, [pc, #16]	@ (8003474 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800
 8003474:	08005804 	.word	0x08005804

08003478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07b      	b.n	8003582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349a:	d009      	beq.n	80034b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	61da      	str	r2, [r3, #28]
 80034a2:	e005      	b.n	80034b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fe f820 	bl	8001510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003534:	ea42 0103 	orr.w	r1, r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	0c1b      	lsrs	r3, r3, #16
 800354e:	f003 0104 	and.w	r1, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	f003 0210 	and.w	r2, r3, #16
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b088      	sub	sp, #32
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800359a:	f7fe f9f5 	bl	8001988 <HAL_GetTick>
 800359e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
 80035b2:	e12a      	b.n	800380a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_SPI_Transmit+0x36>
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e122      	b.n	800380a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_SPI_Transmit+0x48>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e11b      	b.n	800380a <HAL_SPI_Transmit+0x280>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2203      	movs	r2, #3
 80035de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	88fa      	ldrh	r2, [r7, #6]
 80035f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003620:	d10f      	bne.n	8003642 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364c:	2b40      	cmp	r3, #64	@ 0x40
 800364e:	d007      	beq.n	8003660 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800365e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003668:	d152      	bne.n	8003710 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_SPI_Transmit+0xee>
 8003672:	8b7b      	ldrh	r3, [r7, #26]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d145      	bne.n	8003704 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	881a      	ldrh	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800369c:	e032      	b.n	8003704 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d112      	bne.n	80036d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	881a      	ldrh	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036bc:	1c9a      	adds	r2, r3, #2
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036d0:	e018      	b.n	8003704 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d2:	f7fe f959 	bl	8001988 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d803      	bhi.n	80036ea <HAL_SPI_Transmit+0x160>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d102      	bne.n	80036f0 <HAL_SPI_Transmit+0x166>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e082      	b.n	800380a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1c7      	bne.n	800369e <HAL_SPI_Transmit+0x114>
 800370e:	e053      	b.n	80037b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_SPI_Transmit+0x194>
 8003718:	8b7b      	ldrh	r3, [r7, #26]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d147      	bne.n	80037ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003744:	e033      	b.n	80037ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b02      	cmp	r3, #2
 8003752:	d113      	bne.n	800377c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	7812      	ldrb	r2, [r2, #0]
 8003760:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	86da      	strh	r2, [r3, #54]	@ 0x36
 800377a:	e018      	b.n	80037ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800377c:	f7fe f904 	bl	8001988 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	429a      	cmp	r2, r3
 800378a:	d803      	bhi.n	8003794 <HAL_SPI_Transmit+0x20a>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d102      	bne.n	800379a <HAL_SPI_Transmit+0x210>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e02d      	b.n	800380a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1c6      	bne.n	8003746 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b8:	69fa      	ldr	r2, [r7, #28]
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 fa59 	bl	8003c74 <SPI_EndRxTxTransaction>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003808:	2300      	movs	r3, #0
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b08a      	sub	sp, #40	@ 0x28
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003820:	2301      	movs	r3, #1
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003824:	f7fe f8b0 	bl	8001988 <HAL_GetTick>
 8003828:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003830:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d00c      	beq.n	800385c <HAL_SPI_TransmitReceive+0x4a>
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003848:	d106      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <HAL_SPI_TransmitReceive+0x46>
 8003852:	7ffb      	ldrb	r3, [r7, #31]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d001      	beq.n	800385c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
 800385a:	e17f      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_SPI_TransmitReceive+0x5c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_SPI_TransmitReceive+0x5c>
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e174      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_SPI_TransmitReceive+0x6e>
 800387c:	2302      	movs	r3, #2
 800387e:	e16d      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x34a>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b04      	cmp	r3, #4
 8003892:	d003      	beq.n	800389c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2205      	movs	r2, #5
 8003898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	887a      	ldrh	r2, [r7, #2]
 80038b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	887a      	ldrh	r2, [r7, #2]
 80038be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	887a      	ldrh	r2, [r7, #2]
 80038c4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	d007      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f8:	d17e      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_SPI_TransmitReceive+0xf6>
 8003902:	8afb      	ldrh	r3, [r7, #22]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d16c      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390c:	881a      	ldrh	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	1c9a      	adds	r2, r3, #2
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392c:	e059      	b.n	80039e2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b02      	cmp	r3, #2
 800393a:	d11b      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x162>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d016      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x162>
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	2b01      	cmp	r3, #1
 800394a:	d113      	bne.n	8003974 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	881a      	ldrh	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	1c9a      	adds	r2, r3, #2
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d119      	bne.n	80039b6 <HAL_SPI_TransmitReceive+0x1a4>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d014      	beq.n	80039b6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003996:	b292      	uxth	r2, r2
 8003998:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039b2:	2301      	movs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039b6:	f7fd ffe7 	bl	8001988 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d80d      	bhi.n	80039e2 <HAL_SPI_TransmitReceive+0x1d0>
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d009      	beq.n	80039e2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e0bc      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1a0      	bne.n	800392e <HAL_SPI_TransmitReceive+0x11c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d19b      	bne.n	800392e <HAL_SPI_TransmitReceive+0x11c>
 80039f6:	e082      	b.n	8003afe <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x1f4>
 8003a00:	8afb      	ldrh	r3, [r7, #22]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d171      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	330c      	adds	r3, #12
 8003a10:	7812      	ldrb	r2, [r2, #0]
 8003a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	1c5a      	adds	r2, r3, #1
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a2c:	e05d      	b.n	8003aea <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d11c      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x264>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d017      	beq.n	8003a76 <HAL_SPI_TransmitReceive+0x264>
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d114      	bne.n	8003a76 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	7812      	ldrb	r2, [r2, #0]
 8003a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d119      	bne.n	8003ab8 <HAL_SPI_TransmitReceive+0x2a6>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d014      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ab8:	f7fd ff66 	bl	8001988 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d803      	bhi.n	8003ad0 <HAL_SPI_TransmitReceive+0x2be>
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ace:	d102      	bne.n	8003ad6 <HAL_SPI_TransmitReceive+0x2c4>
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e038      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d19c      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x21c>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d197      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003afe:	6a3a      	ldr	r2, [r7, #32]
 8003b00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f8b6 	bl	8003c74 <SPI_EndRxTxTransaction>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e01d      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3728      	adds	r7, #40	@ 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b088      	sub	sp, #32
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b74:	f7fd ff08 	bl	8001988 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	4413      	add	r3, r2
 8003b82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b84:	f7fd ff00 	bl	8001988 <HAL_GetTick>
 8003b88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b8a:	4b39      	ldr	r3, [pc, #228]	@ (8003c70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	015b      	lsls	r3, r3, #5
 8003b90:	0d1b      	lsrs	r3, r3, #20
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9a:	e054      	b.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d050      	beq.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ba4:	f7fd fef0 	bl	8001988 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d902      	bls.n	8003bba <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d13d      	bne.n	8003c36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bd2:	d111      	bne.n	8003bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bdc:	d004      	beq.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be6:	d107      	bne.n	8003bf8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c00:	d10f      	bne.n	8003c22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e017      	b.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d19b      	bne.n	8003b9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3720      	adds	r7, #32
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000000 	.word	0x20000000

08003c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2201      	movs	r2, #1
 8003c88:	2102      	movs	r1, #2
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff ff6a 	bl	8003b64 <SPI_WaitFlagStateUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	f043 0220 	orr.w	r2, r3, #32
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e013      	b.n	8003cce <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	@ 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7ff ff57 	bl	8003b64 <SPI_WaitFlagStateUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc0:	f043 0220 	orr.w	r2, r3, #32
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e000      	b.n	8003cce <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e041      	b.n	8003d6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fd fc4f 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f000 f95b 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d001      	beq.n	8003d8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e046      	b.n	8003e1a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a22      	ldr	r2, [pc, #136]	@ (8003e24 <HAL_TIM_Base_Start+0xb0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da6:	d01d      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1e      	ldr	r2, [pc, #120]	@ (8003e28 <HAL_TIM_Base_Start+0xb4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <HAL_TIM_Base_Start+0xb8>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <HAL_TIM_Base_Start+0xbc>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a1a      	ldr	r2, [pc, #104]	@ (8003e34 <HAL_TIM_Base_Start+0xc0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_TIM_Base_Start+0xc4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIM_Base_Start+0x70>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a17      	ldr	r2, [pc, #92]	@ (8003e3c <HAL_TIM_Base_Start+0xc8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d111      	bne.n	8003e08 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d010      	beq.n	8003e18 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e06:	e007      	b.n	8003e18 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800
 8003e30:	40000c00 	.word	0x40000c00
 8003e34:	40010400 	.word	0x40010400
 8003e38:	40014000 	.word	0x40014000
 8003e3c:	40001800 	.word	0x40001800

08003e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_ConfigClockSource+0x1c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0b4      	b.n	8003fc6 <HAL_TIM_ConfigClockSource+0x186>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e94:	d03e      	beq.n	8003f14 <HAL_TIM_ConfigClockSource+0xd4>
 8003e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e9a:	f200 8087 	bhi.w	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea2:	f000 8086 	beq.w	8003fb2 <HAL_TIM_ConfigClockSource+0x172>
 8003ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eaa:	d87f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b70      	cmp	r3, #112	@ 0x70
 8003eae:	d01a      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xa6>
 8003eb0:	2b70      	cmp	r3, #112	@ 0x70
 8003eb2:	d87b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b60      	cmp	r3, #96	@ 0x60
 8003eb6:	d050      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x11a>
 8003eb8:	2b60      	cmp	r3, #96	@ 0x60
 8003eba:	d877      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b50      	cmp	r3, #80	@ 0x50
 8003ebe:	d03c      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0xfa>
 8003ec0:	2b50      	cmp	r3, #80	@ 0x50
 8003ec2:	d873      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b40      	cmp	r3, #64	@ 0x40
 8003ec6:	d058      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x13a>
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d86f      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b30      	cmp	r3, #48	@ 0x30
 8003ece:	d064      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ed0:	2b30      	cmp	r3, #48	@ 0x30
 8003ed2:	d86b      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d060      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	d867      	bhi.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d05c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d05a      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ee4:	e062      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ef6:	f000 f98c 	bl	8004212 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
      break;
 8003f12:	e04f      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f24:	f000 f975 	bl	8004212 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f36:	609a      	str	r2, [r3, #8]
      break;
 8003f38:	e03c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 f8ec 	bl	8004124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2150      	movs	r1, #80	@ 0x50
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f943 	bl	80041de <TIM_ITRx_SetConfig>
      break;
 8003f58:	e02c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 f90a 	bl	8004180 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2160      	movs	r1, #96	@ 0x60
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 f933 	bl	80041de <TIM_ITRx_SetConfig>
      break;
 8003f78:	e01c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f86:	461a      	mov	r2, r3
 8003f88:	f000 f8cc 	bl	8004124 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2140      	movs	r1, #64	@ 0x40
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f923 	bl	80041de <TIM_ITRx_SetConfig>
      break;
 8003f98:	e00c      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f000 f91a 	bl	80041de <TIM_ITRx_SetConfig>
      break;
 8003faa:	e003      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb0:	e000      	b.n	8003fb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a45      	ldr	r2, [pc, #276]	@ (80040f8 <TIM_Base_SetConfig+0x128>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d013      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fee:	d00f      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a42      	ldr	r2, [pc, #264]	@ (80040fc <TIM_Base_SetConfig+0x12c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d00b      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a41      	ldr	r2, [pc, #260]	@ (8004100 <TIM_Base_SetConfig+0x130>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a40      	ldr	r2, [pc, #256]	@ (8004104 <TIM_Base_SetConfig+0x134>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3f      	ldr	r2, [pc, #252]	@ (8004108 <TIM_Base_SetConfig+0x138>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d108      	bne.n	8004022 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004016:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a34      	ldr	r2, [pc, #208]	@ (80040f8 <TIM_Base_SetConfig+0x128>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d02b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004030:	d027      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a31      	ldr	r2, [pc, #196]	@ (80040fc <TIM_Base_SetConfig+0x12c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d023      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a30      	ldr	r2, [pc, #192]	@ (8004100 <TIM_Base_SetConfig+0x130>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01f      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2f      	ldr	r2, [pc, #188]	@ (8004104 <TIM_Base_SetConfig+0x134>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2e      	ldr	r2, [pc, #184]	@ (8004108 <TIM_Base_SetConfig+0x138>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d017      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2d      	ldr	r2, [pc, #180]	@ (800410c <TIM_Base_SetConfig+0x13c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2c      	ldr	r2, [pc, #176]	@ (8004110 <TIM_Base_SetConfig+0x140>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00f      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2b      	ldr	r2, [pc, #172]	@ (8004114 <TIM_Base_SetConfig+0x144>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <TIM_Base_SetConfig+0x148>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a29      	ldr	r2, [pc, #164]	@ (800411c <TIM_Base_SetConfig+0x14c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a28      	ldr	r2, [pc, #160]	@ (8004120 <TIM_Base_SetConfig+0x150>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a0f      	ldr	r2, [pc, #60]	@ (80040f8 <TIM_Base_SetConfig+0x128>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d003      	beq.n	80040c8 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a11      	ldr	r2, [pc, #68]	@ (8004108 <TIM_Base_SetConfig+0x138>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d103      	bne.n	80040d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d105      	bne.n	80040ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f023 0201 	bic.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	611a      	str	r2, [r3, #16]
  }
}
 80040ee:	bf00      	nop
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr
 80040f8:	40010000 	.word	0x40010000
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800
 8004104:	40000c00 	.word	0x40000c00
 8004108:	40010400 	.word	0x40010400
 800410c:	40014000 	.word	0x40014000
 8004110:	40014400 	.word	0x40014400
 8004114:	40014800 	.word	0x40014800
 8004118:	40001800 	.word	0x40001800
 800411c:	40001c00 	.word	0x40001c00
 8004120:	40002000 	.word	0x40002000

08004124 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f023 0201 	bic.w	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800414e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 030a 	bic.w	r3, r3, #10
 8004160:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	621a      	str	r2, [r3, #32]
}
 8004176:	bf00      	nop
 8004178:	371c      	adds	r7, #28
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0210 	bic.w	r2, r3, #16
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	031b      	lsls	r3, r3, #12
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f043 0307 	orr.w	r3, r3, #7
 8004200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr

08004212 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004212:	b480      	push	{r7}
 8004214:	b087      	sub	sp, #28
 8004216:	af00      	add	r7, sp, #0
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800422c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	021a      	lsls	r2, r3, #8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	431a      	orrs	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4313      	orrs	r3, r2
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	609a      	str	r2, [r3, #8]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e05a      	b.n	800431e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a20      	ldr	r2, [pc, #128]	@ (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d022      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b4:	d01d      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1c      	ldr	r2, [pc, #112]	@ (800432c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a19      	ldr	r2, [pc, #100]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a17      	ldr	r2, [pc, #92]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a16      	ldr	r2, [pc, #88]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a14      	ldr	r2, [pc, #80]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d10c      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	4313      	orrs	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	40010000 	.word	0x40010000
 800432c:	40000400 	.word	0x40000400
 8004330:	40000800 	.word	0x40000800
 8004334:	40000c00 	.word	0x40000c00
 8004338:	40010400 	.word	0x40010400
 800433c:	40014000 	.word	0x40014000
 8004340:	40001800 	.word	0x40001800

08004344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e042      	b.n	80043dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd f938 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	@ 0x24
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f82b 	bl	80043e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800439c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4313      	orrs	r3, r2
 8004418:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004424:	f023 030c 	bic.w	r3, r3, #12
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	68b9      	ldr	r1, [r7, #8]
 800442e:	430b      	orrs	r3, r1
 8004430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a57      	ldr	r2, [pc, #348]	@ (80045ac <UART_SetConfig+0x1c8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <UART_SetConfig+0x78>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a56      	ldr	r2, [pc, #344]	@ (80045b0 <UART_SetConfig+0x1cc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d103      	bne.n	8004464 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800445c:	f7fe ffea 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	e002      	b.n	800446a <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004464:	f7fe ffc4 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004468:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004472:	d14c      	bne.n	800450e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	009a      	lsls	r2, r3, #2
 800447e:	441a      	add	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	4a4a      	ldr	r2, [pc, #296]	@ (80045b4 <UART_SetConfig+0x1d0>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	0119      	lsls	r1, r3, #4
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	009a      	lsls	r2, r3, #2
 800449e:	441a      	add	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80044aa:	4b42      	ldr	r3, [pc, #264]	@ (80045b4 <UART_SetConfig+0x1d0>)
 80044ac:	fba3 0302 	umull	r0, r3, r3, r2
 80044b0:	095b      	lsrs	r3, r3, #5
 80044b2:	2064      	movs	r0, #100	@ 0x64
 80044b4:	fb00 f303 	mul.w	r3, r0, r3
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	3332      	adds	r3, #50	@ 0x32
 80044be:	4a3d      	ldr	r2, [pc, #244]	@ (80045b4 <UART_SetConfig+0x1d0>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044cc:	4419      	add	r1, r3
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009a      	lsls	r2, r3, #2
 80044d8:	441a      	add	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e4:	4b33      	ldr	r3, [pc, #204]	@ (80045b4 <UART_SetConfig+0x1d0>)
 80044e6:	fba3 0302 	umull	r0, r3, r3, r2
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	2064      	movs	r0, #100	@ 0x64
 80044ee:	fb00 f303 	mul.w	r3, r0, r3
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	00db      	lsls	r3, r3, #3
 80044f6:	3332      	adds	r3, #50	@ 0x32
 80044f8:	4a2e      	ldr	r2, [pc, #184]	@ (80045b4 <UART_SetConfig+0x1d0>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	f003 0207 	and.w	r2, r3, #7
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	440a      	add	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800450c:	e04a      	b.n	80045a4 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009a      	lsls	r2, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	4a23      	ldr	r2, [pc, #140]	@ (80045b4 <UART_SetConfig+0x1d0>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	0119      	lsls	r1, r3, #4
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009a      	lsls	r2, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	fbb2 f2f3 	udiv	r2, r2, r3
 8004544:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <UART_SetConfig+0x1d0>)
 8004546:	fba3 0302 	umull	r0, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2064      	movs	r0, #100	@ 0x64
 800454e:	fb00 f303 	mul.w	r3, r0, r3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	@ 0x32
 8004558:	4a16      	ldr	r2, [pc, #88]	@ (80045b4 <UART_SetConfig+0x1d0>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004564:	4419      	add	r1, r3
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	009a      	lsls	r2, r3, #2
 8004570:	441a      	add	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	fbb2 f2f3 	udiv	r2, r2, r3
 800457c:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <UART_SetConfig+0x1d0>)
 800457e:	fba3 0302 	umull	r0, r3, r3, r2
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	2064      	movs	r0, #100	@ 0x64
 8004586:	fb00 f303 	mul.w	r3, r0, r3
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	3332      	adds	r3, #50	@ 0x32
 8004590:	4a08      	ldr	r2, [pc, #32]	@ (80045b4 <UART_SetConfig+0x1d0>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	f003 020f 	and.w	r2, r3, #15
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	440a      	add	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40011000 	.word	0x40011000
 80045b0:	40011400 	.word	0x40011400
 80045b4:	51eb851f 	.word	0x51eb851f

080045b8 <std>:
 80045b8:	2300      	movs	r3, #0
 80045ba:	b510      	push	{r4, lr}
 80045bc:	4604      	mov	r4, r0
 80045be:	e9c0 3300 	strd	r3, r3, [r0]
 80045c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045c6:	6083      	str	r3, [r0, #8]
 80045c8:	8181      	strh	r1, [r0, #12]
 80045ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80045cc:	81c2      	strh	r2, [r0, #14]
 80045ce:	6183      	str	r3, [r0, #24]
 80045d0:	4619      	mov	r1, r3
 80045d2:	2208      	movs	r2, #8
 80045d4:	305c      	adds	r0, #92	@ 0x5c
 80045d6:	f000 f9f9 	bl	80049cc <memset>
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <std+0x58>)
 80045dc:	6224      	str	r4, [r4, #32]
 80045de:	6263      	str	r3, [r4, #36]	@ 0x24
 80045e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004614 <std+0x5c>)
 80045e2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80045e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004618 <std+0x60>)
 80045e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80045e8:	4b0c      	ldr	r3, [pc, #48]	@ (800461c <std+0x64>)
 80045ea:	6323      	str	r3, [r4, #48]	@ 0x30
 80045ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <std+0x68>)
 80045ee:	429c      	cmp	r4, r3
 80045f0:	d006      	beq.n	8004600 <std+0x48>
 80045f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80045f6:	4294      	cmp	r4, r2
 80045f8:	d002      	beq.n	8004600 <std+0x48>
 80045fa:	33d0      	adds	r3, #208	@ 0xd0
 80045fc:	429c      	cmp	r4, r3
 80045fe:	d105      	bne.n	800460c <std+0x54>
 8004600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004608:	f000 ba58 	b.w	8004abc <__retarget_lock_init_recursive>
 800460c:	bd10      	pop	{r4, pc}
 800460e:	bf00      	nop
 8004610:	0800481d 	.word	0x0800481d
 8004614:	0800483f 	.word	0x0800483f
 8004618:	08004877 	.word	0x08004877
 800461c:	0800489b 	.word	0x0800489b
 8004620:	200002e8 	.word	0x200002e8

08004624 <stdio_exit_handler>:
 8004624:	4a02      	ldr	r2, [pc, #8]	@ (8004630 <stdio_exit_handler+0xc>)
 8004626:	4903      	ldr	r1, [pc, #12]	@ (8004634 <stdio_exit_handler+0x10>)
 8004628:	4803      	ldr	r0, [pc, #12]	@ (8004638 <stdio_exit_handler+0x14>)
 800462a:	f000 b869 	b.w	8004700 <_fwalk_sglue>
 800462e:	bf00      	nop
 8004630:	2000000c 	.word	0x2000000c
 8004634:	08005355 	.word	0x08005355
 8004638:	2000001c 	.word	0x2000001c

0800463c <cleanup_stdio>:
 800463c:	6841      	ldr	r1, [r0, #4]
 800463e:	4b0c      	ldr	r3, [pc, #48]	@ (8004670 <cleanup_stdio+0x34>)
 8004640:	b510      	push	{r4, lr}
 8004642:	4299      	cmp	r1, r3
 8004644:	4604      	mov	r4, r0
 8004646:	d001      	beq.n	800464c <cleanup_stdio+0x10>
 8004648:	f000 fe84 	bl	8005354 <_fflush_r>
 800464c:	68a1      	ldr	r1, [r4, #8]
 800464e:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <cleanup_stdio+0x38>)
 8004650:	4299      	cmp	r1, r3
 8004652:	d002      	beq.n	800465a <cleanup_stdio+0x1e>
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fe7d 	bl	8005354 <_fflush_r>
 800465a:	68e1      	ldr	r1, [r4, #12]
 800465c:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <cleanup_stdio+0x3c>)
 800465e:	4299      	cmp	r1, r3
 8004660:	d004      	beq.n	800466c <cleanup_stdio+0x30>
 8004662:	4620      	mov	r0, r4
 8004664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004668:	f000 be74 	b.w	8005354 <_fflush_r>
 800466c:	bd10      	pop	{r4, pc}
 800466e:	bf00      	nop
 8004670:	200002e8 	.word	0x200002e8
 8004674:	20000350 	.word	0x20000350
 8004678:	200003b8 	.word	0x200003b8

0800467c <global_stdio_init.part.0>:
 800467c:	b510      	push	{r4, lr}
 800467e:	4b0b      	ldr	r3, [pc, #44]	@ (80046ac <global_stdio_init.part.0+0x30>)
 8004680:	4c0b      	ldr	r4, [pc, #44]	@ (80046b0 <global_stdio_init.part.0+0x34>)
 8004682:	4a0c      	ldr	r2, [pc, #48]	@ (80046b4 <global_stdio_init.part.0+0x38>)
 8004684:	4620      	mov	r0, r4
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	2104      	movs	r1, #4
 800468a:	2200      	movs	r2, #0
 800468c:	f7ff ff94 	bl	80045b8 <std>
 8004690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004694:	2201      	movs	r2, #1
 8004696:	2109      	movs	r1, #9
 8004698:	f7ff ff8e 	bl	80045b8 <std>
 800469c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046a0:	2202      	movs	r2, #2
 80046a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a6:	2112      	movs	r1, #18
 80046a8:	f7ff bf86 	b.w	80045b8 <std>
 80046ac:	20000420 	.word	0x20000420
 80046b0:	200002e8 	.word	0x200002e8
 80046b4:	08004625 	.word	0x08004625

080046b8 <__sfp_lock_acquire>:
 80046b8:	4801      	ldr	r0, [pc, #4]	@ (80046c0 <__sfp_lock_acquire+0x8>)
 80046ba:	f000 ba00 	b.w	8004abe <__retarget_lock_acquire_recursive>
 80046be:	bf00      	nop
 80046c0:	20000429 	.word	0x20000429

080046c4 <__sfp_lock_release>:
 80046c4:	4801      	ldr	r0, [pc, #4]	@ (80046cc <__sfp_lock_release+0x8>)
 80046c6:	f000 b9fb 	b.w	8004ac0 <__retarget_lock_release_recursive>
 80046ca:	bf00      	nop
 80046cc:	20000429 	.word	0x20000429

080046d0 <__sinit>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4604      	mov	r4, r0
 80046d4:	f7ff fff0 	bl	80046b8 <__sfp_lock_acquire>
 80046d8:	6a23      	ldr	r3, [r4, #32]
 80046da:	b11b      	cbz	r3, 80046e4 <__sinit+0x14>
 80046dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e0:	f7ff bff0 	b.w	80046c4 <__sfp_lock_release>
 80046e4:	4b04      	ldr	r3, [pc, #16]	@ (80046f8 <__sinit+0x28>)
 80046e6:	6223      	str	r3, [r4, #32]
 80046e8:	4b04      	ldr	r3, [pc, #16]	@ (80046fc <__sinit+0x2c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f5      	bne.n	80046dc <__sinit+0xc>
 80046f0:	f7ff ffc4 	bl	800467c <global_stdio_init.part.0>
 80046f4:	e7f2      	b.n	80046dc <__sinit+0xc>
 80046f6:	bf00      	nop
 80046f8:	0800463d 	.word	0x0800463d
 80046fc:	20000420 	.word	0x20000420

08004700 <_fwalk_sglue>:
 8004700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004704:	4607      	mov	r7, r0
 8004706:	4688      	mov	r8, r1
 8004708:	4614      	mov	r4, r2
 800470a:	2600      	movs	r6, #0
 800470c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004710:	f1b9 0901 	subs.w	r9, r9, #1
 8004714:	d505      	bpl.n	8004722 <_fwalk_sglue+0x22>
 8004716:	6824      	ldr	r4, [r4, #0]
 8004718:	2c00      	cmp	r4, #0
 800471a:	d1f7      	bne.n	800470c <_fwalk_sglue+0xc>
 800471c:	4630      	mov	r0, r6
 800471e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004722:	89ab      	ldrh	r3, [r5, #12]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d907      	bls.n	8004738 <_fwalk_sglue+0x38>
 8004728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800472c:	3301      	adds	r3, #1
 800472e:	d003      	beq.n	8004738 <_fwalk_sglue+0x38>
 8004730:	4629      	mov	r1, r5
 8004732:	4638      	mov	r0, r7
 8004734:	47c0      	blx	r8
 8004736:	4306      	orrs	r6, r0
 8004738:	3568      	adds	r5, #104	@ 0x68
 800473a:	e7e9      	b.n	8004710 <_fwalk_sglue+0x10>

0800473c <iprintf>:
 800473c:	b40f      	push	{r0, r1, r2, r3}
 800473e:	b507      	push	{r0, r1, r2, lr}
 8004740:	4906      	ldr	r1, [pc, #24]	@ (800475c <iprintf+0x20>)
 8004742:	ab04      	add	r3, sp, #16
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	f853 2b04 	ldr.w	r2, [r3], #4
 800474a:	6881      	ldr	r1, [r0, #8]
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	f000 fad7 	bl	8004d00 <_vfiprintf_r>
 8004752:	b003      	add	sp, #12
 8004754:	f85d eb04 	ldr.w	lr, [sp], #4
 8004758:	b004      	add	sp, #16
 800475a:	4770      	bx	lr
 800475c:	20000018 	.word	0x20000018

08004760 <_puts_r>:
 8004760:	6a03      	ldr	r3, [r0, #32]
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	4605      	mov	r5, r0
 8004766:	460e      	mov	r6, r1
 8004768:	6884      	ldr	r4, [r0, #8]
 800476a:	b90b      	cbnz	r3, 8004770 <_puts_r+0x10>
 800476c:	f7ff ffb0 	bl	80046d0 <__sinit>
 8004770:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004772:	07db      	lsls	r3, r3, #31
 8004774:	d405      	bmi.n	8004782 <_puts_r+0x22>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	0598      	lsls	r0, r3, #22
 800477a:	d402      	bmi.n	8004782 <_puts_r+0x22>
 800477c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800477e:	f000 f99e 	bl	8004abe <__retarget_lock_acquire_recursive>
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	0719      	lsls	r1, r3, #28
 8004786:	d502      	bpl.n	800478e <_puts_r+0x2e>
 8004788:	6923      	ldr	r3, [r4, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d135      	bne.n	80047fa <_puts_r+0x9a>
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f8c5 	bl	8004920 <__swsetup_r>
 8004796:	b380      	cbz	r0, 80047fa <_puts_r+0x9a>
 8004798:	f04f 35ff 	mov.w	r5, #4294967295
 800479c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800479e:	07da      	lsls	r2, r3, #31
 80047a0:	d405      	bmi.n	80047ae <_puts_r+0x4e>
 80047a2:	89a3      	ldrh	r3, [r4, #12]
 80047a4:	059b      	lsls	r3, r3, #22
 80047a6:	d402      	bmi.n	80047ae <_puts_r+0x4e>
 80047a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047aa:	f000 f989 	bl	8004ac0 <__retarget_lock_release_recursive>
 80047ae:	4628      	mov	r0, r5
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	da04      	bge.n	80047c0 <_puts_r+0x60>
 80047b6:	69a2      	ldr	r2, [r4, #24]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	dc17      	bgt.n	80047ec <_puts_r+0x8c>
 80047bc:	290a      	cmp	r1, #10
 80047be:	d015      	beq.n	80047ec <_puts_r+0x8c>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	6022      	str	r2, [r4, #0]
 80047c6:	7019      	strb	r1, [r3, #0]
 80047c8:	68a3      	ldr	r3, [r4, #8]
 80047ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047ce:	3b01      	subs	r3, #1
 80047d0:	60a3      	str	r3, [r4, #8]
 80047d2:	2900      	cmp	r1, #0
 80047d4:	d1ed      	bne.n	80047b2 <_puts_r+0x52>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	da11      	bge.n	80047fe <_puts_r+0x9e>
 80047da:	4622      	mov	r2, r4
 80047dc:	210a      	movs	r1, #10
 80047de:	4628      	mov	r0, r5
 80047e0:	f000 f85f 	bl	80048a2 <__swbuf_r>
 80047e4:	3001      	adds	r0, #1
 80047e6:	d0d7      	beq.n	8004798 <_puts_r+0x38>
 80047e8:	250a      	movs	r5, #10
 80047ea:	e7d7      	b.n	800479c <_puts_r+0x3c>
 80047ec:	4622      	mov	r2, r4
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 f857 	bl	80048a2 <__swbuf_r>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d1e7      	bne.n	80047c8 <_puts_r+0x68>
 80047f8:	e7ce      	b.n	8004798 <_puts_r+0x38>
 80047fa:	3e01      	subs	r6, #1
 80047fc:	e7e4      	b.n	80047c8 <_puts_r+0x68>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	6022      	str	r2, [r4, #0]
 8004804:	220a      	movs	r2, #10
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e7ee      	b.n	80047e8 <_puts_r+0x88>
	...

0800480c <puts>:
 800480c:	4b02      	ldr	r3, [pc, #8]	@ (8004818 <puts+0xc>)
 800480e:	4601      	mov	r1, r0
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	f7ff bfa5 	b.w	8004760 <_puts_r>
 8004816:	bf00      	nop
 8004818:	20000018 	.word	0x20000018

0800481c <__sread>:
 800481c:	b510      	push	{r4, lr}
 800481e:	460c      	mov	r4, r1
 8004820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004824:	f000 f8fc 	bl	8004a20 <_read_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	bfab      	itete	ge
 800482c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800482e:	89a3      	ldrhlt	r3, [r4, #12]
 8004830:	181b      	addge	r3, r3, r0
 8004832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004836:	bfac      	ite	ge
 8004838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800483a:	81a3      	strhlt	r3, [r4, #12]
 800483c:	bd10      	pop	{r4, pc}

0800483e <__swrite>:
 800483e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004842:	461f      	mov	r7, r3
 8004844:	898b      	ldrh	r3, [r1, #12]
 8004846:	4605      	mov	r5, r0
 8004848:	05db      	lsls	r3, r3, #23
 800484a:	460c      	mov	r4, r1
 800484c:	4616      	mov	r6, r2
 800484e:	d505      	bpl.n	800485c <__swrite+0x1e>
 8004850:	2302      	movs	r3, #2
 8004852:	2200      	movs	r2, #0
 8004854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004858:	f000 f8d0 	bl	80049fc <_lseek_r>
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	4632      	mov	r2, r6
 8004860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	4628      	mov	r0, r5
 8004868:	463b      	mov	r3, r7
 800486a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800486e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004872:	f000 b8e7 	b.w	8004a44 <_write_r>

08004876 <__sseek>:
 8004876:	b510      	push	{r4, lr}
 8004878:	460c      	mov	r4, r1
 800487a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487e:	f000 f8bd 	bl	80049fc <_lseek_r>
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	bf15      	itete	ne
 8004888:	6560      	strne	r0, [r4, #84]	@ 0x54
 800488a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800488e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004892:	81a3      	strheq	r3, [r4, #12]
 8004894:	bf18      	it	ne
 8004896:	81a3      	strhne	r3, [r4, #12]
 8004898:	bd10      	pop	{r4, pc}

0800489a <__sclose>:
 800489a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489e:	f000 b89d 	b.w	80049dc <_close_r>

080048a2 <__swbuf_r>:
 80048a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a4:	460e      	mov	r6, r1
 80048a6:	4614      	mov	r4, r2
 80048a8:	4605      	mov	r5, r0
 80048aa:	b118      	cbz	r0, 80048b4 <__swbuf_r+0x12>
 80048ac:	6a03      	ldr	r3, [r0, #32]
 80048ae:	b90b      	cbnz	r3, 80048b4 <__swbuf_r+0x12>
 80048b0:	f7ff ff0e 	bl	80046d0 <__sinit>
 80048b4:	69a3      	ldr	r3, [r4, #24]
 80048b6:	60a3      	str	r3, [r4, #8]
 80048b8:	89a3      	ldrh	r3, [r4, #12]
 80048ba:	071a      	lsls	r2, r3, #28
 80048bc:	d501      	bpl.n	80048c2 <__swbuf_r+0x20>
 80048be:	6923      	ldr	r3, [r4, #16]
 80048c0:	b943      	cbnz	r3, 80048d4 <__swbuf_r+0x32>
 80048c2:	4621      	mov	r1, r4
 80048c4:	4628      	mov	r0, r5
 80048c6:	f000 f82b 	bl	8004920 <__swsetup_r>
 80048ca:	b118      	cbz	r0, 80048d4 <__swbuf_r+0x32>
 80048cc:	f04f 37ff 	mov.w	r7, #4294967295
 80048d0:	4638      	mov	r0, r7
 80048d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	6922      	ldr	r2, [r4, #16]
 80048d8:	b2f6      	uxtb	r6, r6
 80048da:	1a98      	subs	r0, r3, r2
 80048dc:	6963      	ldr	r3, [r4, #20]
 80048de:	4637      	mov	r7, r6
 80048e0:	4283      	cmp	r3, r0
 80048e2:	dc05      	bgt.n	80048f0 <__swbuf_r+0x4e>
 80048e4:	4621      	mov	r1, r4
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 fd34 	bl	8005354 <_fflush_r>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d1ed      	bne.n	80048cc <__swbuf_r+0x2a>
 80048f0:	68a3      	ldr	r3, [r4, #8]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	60a3      	str	r3, [r4, #8]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	6022      	str	r2, [r4, #0]
 80048fc:	701e      	strb	r6, [r3, #0]
 80048fe:	6962      	ldr	r2, [r4, #20]
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	429a      	cmp	r2, r3
 8004904:	d004      	beq.n	8004910 <__swbuf_r+0x6e>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	07db      	lsls	r3, r3, #31
 800490a:	d5e1      	bpl.n	80048d0 <__swbuf_r+0x2e>
 800490c:	2e0a      	cmp	r6, #10
 800490e:	d1df      	bne.n	80048d0 <__swbuf_r+0x2e>
 8004910:	4621      	mov	r1, r4
 8004912:	4628      	mov	r0, r5
 8004914:	f000 fd1e 	bl	8005354 <_fflush_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	d0d9      	beq.n	80048d0 <__swbuf_r+0x2e>
 800491c:	e7d6      	b.n	80048cc <__swbuf_r+0x2a>
	...

08004920 <__swsetup_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4b29      	ldr	r3, [pc, #164]	@ (80049c8 <__swsetup_r+0xa8>)
 8004924:	4605      	mov	r5, r0
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	460c      	mov	r4, r1
 800492a:	b118      	cbz	r0, 8004934 <__swsetup_r+0x14>
 800492c:	6a03      	ldr	r3, [r0, #32]
 800492e:	b90b      	cbnz	r3, 8004934 <__swsetup_r+0x14>
 8004930:	f7ff fece 	bl	80046d0 <__sinit>
 8004934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004938:	0719      	lsls	r1, r3, #28
 800493a:	d422      	bmi.n	8004982 <__swsetup_r+0x62>
 800493c:	06da      	lsls	r2, r3, #27
 800493e:	d407      	bmi.n	8004950 <__swsetup_r+0x30>
 8004940:	2209      	movs	r2, #9
 8004942:	602a      	str	r2, [r5, #0]
 8004944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	81a3      	strh	r3, [r4, #12]
 800494e:	e033      	b.n	80049b8 <__swsetup_r+0x98>
 8004950:	0758      	lsls	r0, r3, #29
 8004952:	d512      	bpl.n	800497a <__swsetup_r+0x5a>
 8004954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004956:	b141      	cbz	r1, 800496a <__swsetup_r+0x4a>
 8004958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800495c:	4299      	cmp	r1, r3
 800495e:	d002      	beq.n	8004966 <__swsetup_r+0x46>
 8004960:	4628      	mov	r0, r5
 8004962:	f000 f8af 	bl	8004ac4 <_free_r>
 8004966:	2300      	movs	r3, #0
 8004968:	6363      	str	r3, [r4, #52]	@ 0x34
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	2300      	movs	r3, #0
 8004974:	6063      	str	r3, [r4, #4]
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	f043 0308 	orr.w	r3, r3, #8
 8004980:	81a3      	strh	r3, [r4, #12]
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	b94b      	cbnz	r3, 800499a <__swsetup_r+0x7a>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800498c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004990:	d003      	beq.n	800499a <__swsetup_r+0x7a>
 8004992:	4621      	mov	r1, r4
 8004994:	4628      	mov	r0, r5
 8004996:	f000 fd2a 	bl	80053ee <__smakebuf_r>
 800499a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800499e:	f013 0201 	ands.w	r2, r3, #1
 80049a2:	d00a      	beq.n	80049ba <__swsetup_r+0x9a>
 80049a4:	2200      	movs	r2, #0
 80049a6:	60a2      	str	r2, [r4, #8]
 80049a8:	6962      	ldr	r2, [r4, #20]
 80049aa:	4252      	negs	r2, r2
 80049ac:	61a2      	str	r2, [r4, #24]
 80049ae:	6922      	ldr	r2, [r4, #16]
 80049b0:	b942      	cbnz	r2, 80049c4 <__swsetup_r+0xa4>
 80049b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80049b6:	d1c5      	bne.n	8004944 <__swsetup_r+0x24>
 80049b8:	bd38      	pop	{r3, r4, r5, pc}
 80049ba:	0799      	lsls	r1, r3, #30
 80049bc:	bf58      	it	pl
 80049be:	6962      	ldrpl	r2, [r4, #20]
 80049c0:	60a2      	str	r2, [r4, #8]
 80049c2:	e7f4      	b.n	80049ae <__swsetup_r+0x8e>
 80049c4:	2000      	movs	r0, #0
 80049c6:	e7f7      	b.n	80049b8 <__swsetup_r+0x98>
 80049c8:	20000018 	.word	0x20000018

080049cc <memset>:
 80049cc:	4603      	mov	r3, r0
 80049ce:	4402      	add	r2, r0
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <_close_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	2300      	movs	r3, #0
 80049e0:	4d05      	ldr	r5, [pc, #20]	@ (80049f8 <_close_r+0x1c>)
 80049e2:	4604      	mov	r4, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	602b      	str	r3, [r5, #0]
 80049e8:	f7fc fed3 	bl	8001792 <_close>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_close_r+0x1a>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_close_r+0x1a>
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	20000424 	.word	0x20000424

080049fc <_lseek_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	4611      	mov	r1, r2
 8004a04:	2200      	movs	r2, #0
 8004a06:	4d05      	ldr	r5, [pc, #20]	@ (8004a1c <_lseek_r+0x20>)
 8004a08:	602a      	str	r2, [r5, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f7fc fee5 	bl	80017da <_lseek>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_lseek_r+0x1e>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_lseek_r+0x1e>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	20000424 	.word	0x20000424

08004a20 <_read_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4604      	mov	r4, r0
 8004a24:	4608      	mov	r0, r1
 8004a26:	4611      	mov	r1, r2
 8004a28:	2200      	movs	r2, #0
 8004a2a:	4d05      	ldr	r5, [pc, #20]	@ (8004a40 <_read_r+0x20>)
 8004a2c:	602a      	str	r2, [r5, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f7fc fe92 	bl	8001758 <_read>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d102      	bne.n	8004a3e <_read_r+0x1e>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	b103      	cbz	r3, 8004a3e <_read_r+0x1e>
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	20000424 	.word	0x20000424

08004a44 <_write_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	4604      	mov	r4, r0
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	4d05      	ldr	r5, [pc, #20]	@ (8004a64 <_write_r+0x20>)
 8004a50:	602a      	str	r2, [r5, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f7fc f92c 	bl	8000cb0 <_write>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_write_r+0x1e>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_write_r+0x1e>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	20000424 	.word	0x20000424

08004a68 <__errno>:
 8004a68:	4b01      	ldr	r3, [pc, #4]	@ (8004a70 <__errno+0x8>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000018 	.word	0x20000018

08004a74 <__libc_init_array>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	2600      	movs	r6, #0
 8004a78:	4d0c      	ldr	r5, [pc, #48]	@ (8004aac <__libc_init_array+0x38>)
 8004a7a:	4c0d      	ldr	r4, [pc, #52]	@ (8004ab0 <__libc_init_array+0x3c>)
 8004a7c:	1b64      	subs	r4, r4, r5
 8004a7e:	10a4      	asrs	r4, r4, #2
 8004a80:	42a6      	cmp	r6, r4
 8004a82:	d109      	bne.n	8004a98 <__libc_init_array+0x24>
 8004a84:	f000 fd30 	bl	80054e8 <_init>
 8004a88:	2600      	movs	r6, #0
 8004a8a:	4d0a      	ldr	r5, [pc, #40]	@ (8004ab4 <__libc_init_array+0x40>)
 8004a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8004ab8 <__libc_init_array+0x44>)
 8004a8e:	1b64      	subs	r4, r4, r5
 8004a90:	10a4      	asrs	r4, r4, #2
 8004a92:	42a6      	cmp	r6, r4
 8004a94:	d105      	bne.n	8004aa2 <__libc_init_array+0x2e>
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9c:	4798      	blx	r3
 8004a9e:	3601      	adds	r6, #1
 8004aa0:	e7ee      	b.n	8004a80 <__libc_init_array+0xc>
 8004aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa6:	4798      	blx	r3
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	e7f2      	b.n	8004a92 <__libc_init_array+0x1e>
 8004aac:	08005848 	.word	0x08005848
 8004ab0:	08005848 	.word	0x08005848
 8004ab4:	08005848 	.word	0x08005848
 8004ab8:	0800584c 	.word	0x0800584c

08004abc <__retarget_lock_init_recursive>:
 8004abc:	4770      	bx	lr

08004abe <__retarget_lock_acquire_recursive>:
 8004abe:	4770      	bx	lr

08004ac0 <__retarget_lock_release_recursive>:
 8004ac0:	4770      	bx	lr
	...

08004ac4 <_free_r>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	4605      	mov	r5, r0
 8004ac8:	2900      	cmp	r1, #0
 8004aca:	d040      	beq.n	8004b4e <_free_r+0x8a>
 8004acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ad0:	1f0c      	subs	r4, r1, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bfb8      	it	lt
 8004ad6:	18e4      	addlt	r4, r4, r3
 8004ad8:	f000 f8de 	bl	8004c98 <__malloc_lock>
 8004adc:	4a1c      	ldr	r2, [pc, #112]	@ (8004b50 <_free_r+0x8c>)
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	b933      	cbnz	r3, 8004af0 <_free_r+0x2c>
 8004ae2:	6063      	str	r3, [r4, #4]
 8004ae4:	6014      	str	r4, [r2, #0]
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aec:	f000 b8da 	b.w	8004ca4 <__malloc_unlock>
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	d908      	bls.n	8004b06 <_free_r+0x42>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	1821      	adds	r1, r4, r0
 8004af8:	428b      	cmp	r3, r1
 8004afa:	bf01      	itttt	eq
 8004afc:	6819      	ldreq	r1, [r3, #0]
 8004afe:	685b      	ldreq	r3, [r3, #4]
 8004b00:	1809      	addeq	r1, r1, r0
 8004b02:	6021      	streq	r1, [r4, #0]
 8004b04:	e7ed      	b.n	8004ae2 <_free_r+0x1e>
 8004b06:	461a      	mov	r2, r3
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b10b      	cbz	r3, 8004b10 <_free_r+0x4c>
 8004b0c:	42a3      	cmp	r3, r4
 8004b0e:	d9fa      	bls.n	8004b06 <_free_r+0x42>
 8004b10:	6811      	ldr	r1, [r2, #0]
 8004b12:	1850      	adds	r0, r2, r1
 8004b14:	42a0      	cmp	r0, r4
 8004b16:	d10b      	bne.n	8004b30 <_free_r+0x6c>
 8004b18:	6820      	ldr	r0, [r4, #0]
 8004b1a:	4401      	add	r1, r0
 8004b1c:	1850      	adds	r0, r2, r1
 8004b1e:	4283      	cmp	r3, r0
 8004b20:	6011      	str	r1, [r2, #0]
 8004b22:	d1e0      	bne.n	8004ae6 <_free_r+0x22>
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4408      	add	r0, r1
 8004b2a:	6010      	str	r0, [r2, #0]
 8004b2c:	6053      	str	r3, [r2, #4]
 8004b2e:	e7da      	b.n	8004ae6 <_free_r+0x22>
 8004b30:	d902      	bls.n	8004b38 <_free_r+0x74>
 8004b32:	230c      	movs	r3, #12
 8004b34:	602b      	str	r3, [r5, #0]
 8004b36:	e7d6      	b.n	8004ae6 <_free_r+0x22>
 8004b38:	6820      	ldr	r0, [r4, #0]
 8004b3a:	1821      	adds	r1, r4, r0
 8004b3c:	428b      	cmp	r3, r1
 8004b3e:	bf01      	itttt	eq
 8004b40:	6819      	ldreq	r1, [r3, #0]
 8004b42:	685b      	ldreq	r3, [r3, #4]
 8004b44:	1809      	addeq	r1, r1, r0
 8004b46:	6021      	streq	r1, [r4, #0]
 8004b48:	6063      	str	r3, [r4, #4]
 8004b4a:	6054      	str	r4, [r2, #4]
 8004b4c:	e7cb      	b.n	8004ae6 <_free_r+0x22>
 8004b4e:	bd38      	pop	{r3, r4, r5, pc}
 8004b50:	20000430 	.word	0x20000430

08004b54 <sbrk_aligned>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	4e0f      	ldr	r6, [pc, #60]	@ (8004b94 <sbrk_aligned+0x40>)
 8004b58:	460c      	mov	r4, r1
 8004b5a:	6831      	ldr	r1, [r6, #0]
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	b911      	cbnz	r1, 8004b66 <sbrk_aligned+0x12>
 8004b60:	f000 fca4 	bl	80054ac <_sbrk_r>
 8004b64:	6030      	str	r0, [r6, #0]
 8004b66:	4621      	mov	r1, r4
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f000 fc9f 	bl	80054ac <_sbrk_r>
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	d103      	bne.n	8004b7a <sbrk_aligned+0x26>
 8004b72:	f04f 34ff 	mov.w	r4, #4294967295
 8004b76:	4620      	mov	r0, r4
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
 8004b7a:	1cc4      	adds	r4, r0, #3
 8004b7c:	f024 0403 	bic.w	r4, r4, #3
 8004b80:	42a0      	cmp	r0, r4
 8004b82:	d0f8      	beq.n	8004b76 <sbrk_aligned+0x22>
 8004b84:	1a21      	subs	r1, r4, r0
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 fc90 	bl	80054ac <_sbrk_r>
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d1f2      	bne.n	8004b76 <sbrk_aligned+0x22>
 8004b90:	e7ef      	b.n	8004b72 <sbrk_aligned+0x1e>
 8004b92:	bf00      	nop
 8004b94:	2000042c 	.word	0x2000042c

08004b98 <_malloc_r>:
 8004b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b9c:	1ccd      	adds	r5, r1, #3
 8004b9e:	f025 0503 	bic.w	r5, r5, #3
 8004ba2:	3508      	adds	r5, #8
 8004ba4:	2d0c      	cmp	r5, #12
 8004ba6:	bf38      	it	cc
 8004ba8:	250c      	movcc	r5, #12
 8004baa:	2d00      	cmp	r5, #0
 8004bac:	4606      	mov	r6, r0
 8004bae:	db01      	blt.n	8004bb4 <_malloc_r+0x1c>
 8004bb0:	42a9      	cmp	r1, r5
 8004bb2:	d904      	bls.n	8004bbe <_malloc_r+0x26>
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	6033      	str	r3, [r6, #0]
 8004bb8:	2000      	movs	r0, #0
 8004bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c94 <_malloc_r+0xfc>
 8004bc2:	f000 f869 	bl	8004c98 <__malloc_lock>
 8004bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004bca:	461c      	mov	r4, r3
 8004bcc:	bb44      	cbnz	r4, 8004c20 <_malloc_r+0x88>
 8004bce:	4629      	mov	r1, r5
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f7ff ffbf 	bl	8004b54 <sbrk_aligned>
 8004bd6:	1c43      	adds	r3, r0, #1
 8004bd8:	4604      	mov	r4, r0
 8004bda:	d158      	bne.n	8004c8e <_malloc_r+0xf6>
 8004bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8004be0:	4627      	mov	r7, r4
 8004be2:	2f00      	cmp	r7, #0
 8004be4:	d143      	bne.n	8004c6e <_malloc_r+0xd6>
 8004be6:	2c00      	cmp	r4, #0
 8004be8:	d04b      	beq.n	8004c82 <_malloc_r+0xea>
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	4639      	mov	r1, r7
 8004bee:	4630      	mov	r0, r6
 8004bf0:	eb04 0903 	add.w	r9, r4, r3
 8004bf4:	f000 fc5a 	bl	80054ac <_sbrk_r>
 8004bf8:	4581      	cmp	r9, r0
 8004bfa:	d142      	bne.n	8004c82 <_malloc_r+0xea>
 8004bfc:	6821      	ldr	r1, [r4, #0]
 8004bfe:	4630      	mov	r0, r6
 8004c00:	1a6d      	subs	r5, r5, r1
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7ff ffa6 	bl	8004b54 <sbrk_aligned>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	d03a      	beq.n	8004c82 <_malloc_r+0xea>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	442b      	add	r3, r5
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	f8d8 3000 	ldr.w	r3, [r8]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	bb62      	cbnz	r2, 8004c74 <_malloc_r+0xdc>
 8004c1a:	f8c8 7000 	str.w	r7, [r8]
 8004c1e:	e00f      	b.n	8004c40 <_malloc_r+0xa8>
 8004c20:	6822      	ldr	r2, [r4, #0]
 8004c22:	1b52      	subs	r2, r2, r5
 8004c24:	d420      	bmi.n	8004c68 <_malloc_r+0xd0>
 8004c26:	2a0b      	cmp	r2, #11
 8004c28:	d917      	bls.n	8004c5a <_malloc_r+0xc2>
 8004c2a:	1961      	adds	r1, r4, r5
 8004c2c:	42a3      	cmp	r3, r4
 8004c2e:	6025      	str	r5, [r4, #0]
 8004c30:	bf18      	it	ne
 8004c32:	6059      	strne	r1, [r3, #4]
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	bf08      	it	eq
 8004c38:	f8c8 1000 	streq.w	r1, [r8]
 8004c3c:	5162      	str	r2, [r4, r5]
 8004c3e:	604b      	str	r3, [r1, #4]
 8004c40:	4630      	mov	r0, r6
 8004c42:	f000 f82f 	bl	8004ca4 <__malloc_unlock>
 8004c46:	f104 000b 	add.w	r0, r4, #11
 8004c4a:	1d23      	adds	r3, r4, #4
 8004c4c:	f020 0007 	bic.w	r0, r0, #7
 8004c50:	1ac2      	subs	r2, r0, r3
 8004c52:	bf1c      	itt	ne
 8004c54:	1a1b      	subne	r3, r3, r0
 8004c56:	50a3      	strne	r3, [r4, r2]
 8004c58:	e7af      	b.n	8004bba <_malloc_r+0x22>
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	bf0c      	ite	eq
 8004c60:	f8c8 2000 	streq.w	r2, [r8]
 8004c64:	605a      	strne	r2, [r3, #4]
 8004c66:	e7eb      	b.n	8004c40 <_malloc_r+0xa8>
 8004c68:	4623      	mov	r3, r4
 8004c6a:	6864      	ldr	r4, [r4, #4]
 8004c6c:	e7ae      	b.n	8004bcc <_malloc_r+0x34>
 8004c6e:	463c      	mov	r4, r7
 8004c70:	687f      	ldr	r7, [r7, #4]
 8004c72:	e7b6      	b.n	8004be2 <_malloc_r+0x4a>
 8004c74:	461a      	mov	r2, r3
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	42a3      	cmp	r3, r4
 8004c7a:	d1fb      	bne.n	8004c74 <_malloc_r+0xdc>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6053      	str	r3, [r2, #4]
 8004c80:	e7de      	b.n	8004c40 <_malloc_r+0xa8>
 8004c82:	230c      	movs	r3, #12
 8004c84:	4630      	mov	r0, r6
 8004c86:	6033      	str	r3, [r6, #0]
 8004c88:	f000 f80c 	bl	8004ca4 <__malloc_unlock>
 8004c8c:	e794      	b.n	8004bb8 <_malloc_r+0x20>
 8004c8e:	6005      	str	r5, [r0, #0]
 8004c90:	e7d6      	b.n	8004c40 <_malloc_r+0xa8>
 8004c92:	bf00      	nop
 8004c94:	20000430 	.word	0x20000430

08004c98 <__malloc_lock>:
 8004c98:	4801      	ldr	r0, [pc, #4]	@ (8004ca0 <__malloc_lock+0x8>)
 8004c9a:	f7ff bf10 	b.w	8004abe <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	20000428 	.word	0x20000428

08004ca4 <__malloc_unlock>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	@ (8004cac <__malloc_unlock+0x8>)
 8004ca6:	f7ff bf0b 	b.w	8004ac0 <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	20000428 	.word	0x20000428

08004cb0 <__sfputc_r>:
 8004cb0:	6893      	ldr	r3, [r2, #8]
 8004cb2:	b410      	push	{r4}
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	6093      	str	r3, [r2, #8]
 8004cba:	da07      	bge.n	8004ccc <__sfputc_r+0x1c>
 8004cbc:	6994      	ldr	r4, [r2, #24]
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	db01      	blt.n	8004cc6 <__sfputc_r+0x16>
 8004cc2:	290a      	cmp	r1, #10
 8004cc4:	d102      	bne.n	8004ccc <__sfputc_r+0x1c>
 8004cc6:	bc10      	pop	{r4}
 8004cc8:	f7ff bdeb 	b.w	80048a2 <__swbuf_r>
 8004ccc:	6813      	ldr	r3, [r2, #0]
 8004cce:	1c58      	adds	r0, r3, #1
 8004cd0:	6010      	str	r0, [r2, #0]
 8004cd2:	7019      	strb	r1, [r3, #0]
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	bc10      	pop	{r4}
 8004cd8:	4770      	bx	lr

08004cda <__sfputs_r>:
 8004cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cdc:	4606      	mov	r6, r0
 8004cde:	460f      	mov	r7, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	18d5      	adds	r5, r2, r3
 8004ce4:	42ac      	cmp	r4, r5
 8004ce6:	d101      	bne.n	8004cec <__sfputs_r+0x12>
 8004ce8:	2000      	movs	r0, #0
 8004cea:	e007      	b.n	8004cfc <__sfputs_r+0x22>
 8004cec:	463a      	mov	r2, r7
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf4:	f7ff ffdc 	bl	8004cb0 <__sfputc_r>
 8004cf8:	1c43      	adds	r3, r0, #1
 8004cfa:	d1f3      	bne.n	8004ce4 <__sfputs_r+0xa>
 8004cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d00 <_vfiprintf_r>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	460d      	mov	r5, r1
 8004d06:	4614      	mov	r4, r2
 8004d08:	4698      	mov	r8, r3
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	b09d      	sub	sp, #116	@ 0x74
 8004d0e:	b118      	cbz	r0, 8004d18 <_vfiprintf_r+0x18>
 8004d10:	6a03      	ldr	r3, [r0, #32]
 8004d12:	b90b      	cbnz	r3, 8004d18 <_vfiprintf_r+0x18>
 8004d14:	f7ff fcdc 	bl	80046d0 <__sinit>
 8004d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d1a:	07d9      	lsls	r1, r3, #31
 8004d1c:	d405      	bmi.n	8004d2a <_vfiprintf_r+0x2a>
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	059a      	lsls	r2, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_vfiprintf_r+0x2a>
 8004d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d26:	f7ff feca 	bl	8004abe <__retarget_lock_acquire_recursive>
 8004d2a:	89ab      	ldrh	r3, [r5, #12]
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	d501      	bpl.n	8004d34 <_vfiprintf_r+0x34>
 8004d30:	692b      	ldr	r3, [r5, #16]
 8004d32:	b99b      	cbnz	r3, 8004d5c <_vfiprintf_r+0x5c>
 8004d34:	4629      	mov	r1, r5
 8004d36:	4630      	mov	r0, r6
 8004d38:	f7ff fdf2 	bl	8004920 <__swsetup_r>
 8004d3c:	b170      	cbz	r0, 8004d5c <_vfiprintf_r+0x5c>
 8004d3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d40:	07dc      	lsls	r4, r3, #31
 8004d42:	d504      	bpl.n	8004d4e <_vfiprintf_r+0x4e>
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	b01d      	add	sp, #116	@ 0x74
 8004d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4e:	89ab      	ldrh	r3, [r5, #12]
 8004d50:	0598      	lsls	r0, r3, #22
 8004d52:	d4f7      	bmi.n	8004d44 <_vfiprintf_r+0x44>
 8004d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d56:	f7ff feb3 	bl	8004ac0 <__retarget_lock_release_recursive>
 8004d5a:	e7f3      	b.n	8004d44 <_vfiprintf_r+0x44>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d60:	2320      	movs	r3, #32
 8004d62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d66:	2330      	movs	r3, #48	@ 0x30
 8004d68:	f04f 0901 	mov.w	r9, #1
 8004d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d70:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004f1c <_vfiprintf_r+0x21c>
 8004d74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d78:	4623      	mov	r3, r4
 8004d7a:	469a      	mov	sl, r3
 8004d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d80:	b10a      	cbz	r2, 8004d86 <_vfiprintf_r+0x86>
 8004d82:	2a25      	cmp	r2, #37	@ 0x25
 8004d84:	d1f9      	bne.n	8004d7a <_vfiprintf_r+0x7a>
 8004d86:	ebba 0b04 	subs.w	fp, sl, r4
 8004d8a:	d00b      	beq.n	8004da4 <_vfiprintf_r+0xa4>
 8004d8c:	465b      	mov	r3, fp
 8004d8e:	4622      	mov	r2, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	4630      	mov	r0, r6
 8004d94:	f7ff ffa1 	bl	8004cda <__sfputs_r>
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f000 80a7 	beq.w	8004eec <_vfiprintf_r+0x1ec>
 8004d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004da0:	445a      	add	r2, fp
 8004da2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004da4:	f89a 3000 	ldrb.w	r3, [sl]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 809f 	beq.w	8004eec <_vfiprintf_r+0x1ec>
 8004dae:	2300      	movs	r3, #0
 8004db0:	f04f 32ff 	mov.w	r2, #4294967295
 8004db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004db8:	f10a 0a01 	add.w	sl, sl, #1
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	9307      	str	r3, [sp, #28]
 8004dc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004dc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dc6:	4654      	mov	r4, sl
 8004dc8:	2205      	movs	r2, #5
 8004dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dce:	4853      	ldr	r0, [pc, #332]	@ (8004f1c <_vfiprintf_r+0x21c>)
 8004dd0:	f000 fb7c 	bl	80054cc <memchr>
 8004dd4:	9a04      	ldr	r2, [sp, #16]
 8004dd6:	b9d8      	cbnz	r0, 8004e10 <_vfiprintf_r+0x110>
 8004dd8:	06d1      	lsls	r1, r2, #27
 8004dda:	bf44      	itt	mi
 8004ddc:	2320      	movmi	r3, #32
 8004dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004de2:	0713      	lsls	r3, r2, #28
 8004de4:	bf44      	itt	mi
 8004de6:	232b      	movmi	r3, #43	@ 0x2b
 8004de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dec:	f89a 3000 	ldrb.w	r3, [sl]
 8004df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004df2:	d015      	beq.n	8004e20 <_vfiprintf_r+0x120>
 8004df4:	4654      	mov	r4, sl
 8004df6:	2000      	movs	r0, #0
 8004df8:	f04f 0c0a 	mov.w	ip, #10
 8004dfc:	9a07      	ldr	r2, [sp, #28]
 8004dfe:	4621      	mov	r1, r4
 8004e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e04:	3b30      	subs	r3, #48	@ 0x30
 8004e06:	2b09      	cmp	r3, #9
 8004e08:	d94b      	bls.n	8004ea2 <_vfiprintf_r+0x1a2>
 8004e0a:	b1b0      	cbz	r0, 8004e3a <_vfiprintf_r+0x13a>
 8004e0c:	9207      	str	r2, [sp, #28]
 8004e0e:	e014      	b.n	8004e3a <_vfiprintf_r+0x13a>
 8004e10:	eba0 0308 	sub.w	r3, r0, r8
 8004e14:	fa09 f303 	lsl.w	r3, r9, r3
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	46a2      	mov	sl, r4
 8004e1c:	9304      	str	r3, [sp, #16]
 8004e1e:	e7d2      	b.n	8004dc6 <_vfiprintf_r+0xc6>
 8004e20:	9b03      	ldr	r3, [sp, #12]
 8004e22:	1d19      	adds	r1, r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	9103      	str	r1, [sp, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bfbb      	ittet	lt
 8004e2c:	425b      	neglt	r3, r3
 8004e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8004e32:	9307      	strge	r3, [sp, #28]
 8004e34:	9307      	strlt	r3, [sp, #28]
 8004e36:	bfb8      	it	lt
 8004e38:	9204      	strlt	r2, [sp, #16]
 8004e3a:	7823      	ldrb	r3, [r4, #0]
 8004e3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e3e:	d10a      	bne.n	8004e56 <_vfiprintf_r+0x156>
 8004e40:	7863      	ldrb	r3, [r4, #1]
 8004e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e44:	d132      	bne.n	8004eac <_vfiprintf_r+0x1ac>
 8004e46:	9b03      	ldr	r3, [sp, #12]
 8004e48:	3402      	adds	r4, #2
 8004e4a:	1d1a      	adds	r2, r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	9203      	str	r2, [sp, #12]
 8004e50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e54:	9305      	str	r3, [sp, #20]
 8004e56:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004f20 <_vfiprintf_r+0x220>
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	4650      	mov	r0, sl
 8004e5e:	7821      	ldrb	r1, [r4, #0]
 8004e60:	f000 fb34 	bl	80054cc <memchr>
 8004e64:	b138      	cbz	r0, 8004e76 <_vfiprintf_r+0x176>
 8004e66:	2240      	movs	r2, #64	@ 0x40
 8004e68:	9b04      	ldr	r3, [sp, #16]
 8004e6a:	eba0 000a 	sub.w	r0, r0, sl
 8004e6e:	4082      	lsls	r2, r0
 8004e70:	4313      	orrs	r3, r2
 8004e72:	3401      	adds	r4, #1
 8004e74:	9304      	str	r3, [sp, #16]
 8004e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e7a:	2206      	movs	r2, #6
 8004e7c:	4829      	ldr	r0, [pc, #164]	@ (8004f24 <_vfiprintf_r+0x224>)
 8004e7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e82:	f000 fb23 	bl	80054cc <memchr>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d03f      	beq.n	8004f0a <_vfiprintf_r+0x20a>
 8004e8a:	4b27      	ldr	r3, [pc, #156]	@ (8004f28 <_vfiprintf_r+0x228>)
 8004e8c:	bb1b      	cbnz	r3, 8004ed6 <_vfiprintf_r+0x1d6>
 8004e8e:	9b03      	ldr	r3, [sp, #12]
 8004e90:	3307      	adds	r3, #7
 8004e92:	f023 0307 	bic.w	r3, r3, #7
 8004e96:	3308      	adds	r3, #8
 8004e98:	9303      	str	r3, [sp, #12]
 8004e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e9c:	443b      	add	r3, r7
 8004e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea0:	e76a      	b.n	8004d78 <_vfiprintf_r+0x78>
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	2001      	movs	r0, #1
 8004ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004eaa:	e7a8      	b.n	8004dfe <_vfiprintf_r+0xfe>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f04f 0c0a 	mov.w	ip, #10
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	3401      	adds	r4, #1
 8004eb6:	9305      	str	r3, [sp, #20]
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ebe:	3a30      	subs	r2, #48	@ 0x30
 8004ec0:	2a09      	cmp	r2, #9
 8004ec2:	d903      	bls.n	8004ecc <_vfiprintf_r+0x1cc>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0c6      	beq.n	8004e56 <_vfiprintf_r+0x156>
 8004ec8:	9105      	str	r1, [sp, #20]
 8004eca:	e7c4      	b.n	8004e56 <_vfiprintf_r+0x156>
 8004ecc:	4604      	mov	r4, r0
 8004ece:	2301      	movs	r3, #1
 8004ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ed4:	e7f0      	b.n	8004eb8 <_vfiprintf_r+0x1b8>
 8004ed6:	ab03      	add	r3, sp, #12
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	462a      	mov	r2, r5
 8004edc:	4630      	mov	r0, r6
 8004ede:	4b13      	ldr	r3, [pc, #76]	@ (8004f2c <_vfiprintf_r+0x22c>)
 8004ee0:	a904      	add	r1, sp, #16
 8004ee2:	f3af 8000 	nop.w
 8004ee6:	4607      	mov	r7, r0
 8004ee8:	1c78      	adds	r0, r7, #1
 8004eea:	d1d6      	bne.n	8004e9a <_vfiprintf_r+0x19a>
 8004eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004eee:	07d9      	lsls	r1, r3, #31
 8004ef0:	d405      	bmi.n	8004efe <_vfiprintf_r+0x1fe>
 8004ef2:	89ab      	ldrh	r3, [r5, #12]
 8004ef4:	059a      	lsls	r2, r3, #22
 8004ef6:	d402      	bmi.n	8004efe <_vfiprintf_r+0x1fe>
 8004ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004efa:	f7ff fde1 	bl	8004ac0 <__retarget_lock_release_recursive>
 8004efe:	89ab      	ldrh	r3, [r5, #12]
 8004f00:	065b      	lsls	r3, r3, #25
 8004f02:	f53f af1f 	bmi.w	8004d44 <_vfiprintf_r+0x44>
 8004f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f08:	e71e      	b.n	8004d48 <_vfiprintf_r+0x48>
 8004f0a:	ab03      	add	r3, sp, #12
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	462a      	mov	r2, r5
 8004f10:	4630      	mov	r0, r6
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <_vfiprintf_r+0x22c>)
 8004f14:	a904      	add	r1, sp, #16
 8004f16:	f000 f87d 	bl	8005014 <_printf_i>
 8004f1a:	e7e4      	b.n	8004ee6 <_vfiprintf_r+0x1e6>
 8004f1c:	0800580c 	.word	0x0800580c
 8004f20:	08005812 	.word	0x08005812
 8004f24:	08005816 	.word	0x08005816
 8004f28:	00000000 	.word	0x00000000
 8004f2c:	08004cdb 	.word	0x08004cdb

08004f30 <_printf_common>:
 8004f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	4616      	mov	r6, r2
 8004f36:	4698      	mov	r8, r3
 8004f38:	688a      	ldr	r2, [r1, #8]
 8004f3a:	690b      	ldr	r3, [r1, #16]
 8004f3c:	4607      	mov	r7, r0
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	bfb8      	it	lt
 8004f42:	4613      	movlt	r3, r2
 8004f44:	6033      	str	r3, [r6, #0]
 8004f46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f50:	b10a      	cbz	r2, 8004f56 <_printf_common+0x26>
 8004f52:	3301      	adds	r3, #1
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	0699      	lsls	r1, r3, #26
 8004f5a:	bf42      	ittt	mi
 8004f5c:	6833      	ldrmi	r3, [r6, #0]
 8004f5e:	3302      	addmi	r3, #2
 8004f60:	6033      	strmi	r3, [r6, #0]
 8004f62:	6825      	ldr	r5, [r4, #0]
 8004f64:	f015 0506 	ands.w	r5, r5, #6
 8004f68:	d106      	bne.n	8004f78 <_printf_common+0x48>
 8004f6a:	f104 0a19 	add.w	sl, r4, #25
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	6832      	ldr	r2, [r6, #0]
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	dc2b      	bgt.n	8004fd0 <_printf_common+0xa0>
 8004f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	3b00      	subs	r3, #0
 8004f80:	bf18      	it	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	0692      	lsls	r2, r2, #26
 8004f86:	d430      	bmi.n	8004fea <_printf_common+0xba>
 8004f88:	4641      	mov	r1, r8
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f90:	47c8      	blx	r9
 8004f92:	3001      	adds	r0, #1
 8004f94:	d023      	beq.n	8004fde <_printf_common+0xae>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	6922      	ldr	r2, [r4, #16]
 8004f9a:	f003 0306 	and.w	r3, r3, #6
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	bf14      	ite	ne
 8004fa2:	2500      	movne	r5, #0
 8004fa4:	6833      	ldreq	r3, [r6, #0]
 8004fa6:	f04f 0600 	mov.w	r6, #0
 8004faa:	bf08      	it	eq
 8004fac:	68e5      	ldreq	r5, [r4, #12]
 8004fae:	f104 041a 	add.w	r4, r4, #26
 8004fb2:	bf08      	it	eq
 8004fb4:	1aed      	subeq	r5, r5, r3
 8004fb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004fba:	bf08      	it	eq
 8004fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	bfc4      	itt	gt
 8004fc4:	1a9b      	subgt	r3, r3, r2
 8004fc6:	18ed      	addgt	r5, r5, r3
 8004fc8:	42b5      	cmp	r5, r6
 8004fca:	d11a      	bne.n	8005002 <_printf_common+0xd2>
 8004fcc:	2000      	movs	r0, #0
 8004fce:	e008      	b.n	8004fe2 <_printf_common+0xb2>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	4652      	mov	r2, sl
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	47c8      	blx	r9
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d103      	bne.n	8004fe6 <_printf_common+0xb6>
 8004fde:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	e7c1      	b.n	8004f6e <_printf_common+0x3e>
 8004fea:	2030      	movs	r0, #48	@ 0x30
 8004fec:	18e1      	adds	r1, r4, r3
 8004fee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ff8:	4422      	add	r2, r4
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005000:	e7c2      	b.n	8004f88 <_printf_common+0x58>
 8005002:	2301      	movs	r3, #1
 8005004:	4622      	mov	r2, r4
 8005006:	4641      	mov	r1, r8
 8005008:	4638      	mov	r0, r7
 800500a:	47c8      	blx	r9
 800500c:	3001      	adds	r0, #1
 800500e:	d0e6      	beq.n	8004fde <_printf_common+0xae>
 8005010:	3601      	adds	r6, #1
 8005012:	e7d9      	b.n	8004fc8 <_printf_common+0x98>

08005014 <_printf_i>:
 8005014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005018:	7e0f      	ldrb	r7, [r1, #24]
 800501a:	4691      	mov	r9, r2
 800501c:	2f78      	cmp	r7, #120	@ 0x78
 800501e:	4680      	mov	r8, r0
 8005020:	460c      	mov	r4, r1
 8005022:	469a      	mov	sl, r3
 8005024:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005026:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800502a:	d807      	bhi.n	800503c <_printf_i+0x28>
 800502c:	2f62      	cmp	r7, #98	@ 0x62
 800502e:	d80a      	bhi.n	8005046 <_printf_i+0x32>
 8005030:	2f00      	cmp	r7, #0
 8005032:	f000 80d3 	beq.w	80051dc <_printf_i+0x1c8>
 8005036:	2f58      	cmp	r7, #88	@ 0x58
 8005038:	f000 80ba 	beq.w	80051b0 <_printf_i+0x19c>
 800503c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005040:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005044:	e03a      	b.n	80050bc <_printf_i+0xa8>
 8005046:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800504a:	2b15      	cmp	r3, #21
 800504c:	d8f6      	bhi.n	800503c <_printf_i+0x28>
 800504e:	a101      	add	r1, pc, #4	@ (adr r1, 8005054 <_printf_i+0x40>)
 8005050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005054:	080050ad 	.word	0x080050ad
 8005058:	080050c1 	.word	0x080050c1
 800505c:	0800503d 	.word	0x0800503d
 8005060:	0800503d 	.word	0x0800503d
 8005064:	0800503d 	.word	0x0800503d
 8005068:	0800503d 	.word	0x0800503d
 800506c:	080050c1 	.word	0x080050c1
 8005070:	0800503d 	.word	0x0800503d
 8005074:	0800503d 	.word	0x0800503d
 8005078:	0800503d 	.word	0x0800503d
 800507c:	0800503d 	.word	0x0800503d
 8005080:	080051c3 	.word	0x080051c3
 8005084:	080050eb 	.word	0x080050eb
 8005088:	0800517d 	.word	0x0800517d
 800508c:	0800503d 	.word	0x0800503d
 8005090:	0800503d 	.word	0x0800503d
 8005094:	080051e5 	.word	0x080051e5
 8005098:	0800503d 	.word	0x0800503d
 800509c:	080050eb 	.word	0x080050eb
 80050a0:	0800503d 	.word	0x0800503d
 80050a4:	0800503d 	.word	0x0800503d
 80050a8:	08005185 	.word	0x08005185
 80050ac:	6833      	ldr	r3, [r6, #0]
 80050ae:	1d1a      	adds	r2, r3, #4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6032      	str	r2, [r6, #0]
 80050b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050bc:	2301      	movs	r3, #1
 80050be:	e09e      	b.n	80051fe <_printf_i+0x1ea>
 80050c0:	6833      	ldr	r3, [r6, #0]
 80050c2:	6820      	ldr	r0, [r4, #0]
 80050c4:	1d19      	adds	r1, r3, #4
 80050c6:	6031      	str	r1, [r6, #0]
 80050c8:	0606      	lsls	r6, r0, #24
 80050ca:	d501      	bpl.n	80050d0 <_printf_i+0xbc>
 80050cc:	681d      	ldr	r5, [r3, #0]
 80050ce:	e003      	b.n	80050d8 <_printf_i+0xc4>
 80050d0:	0645      	lsls	r5, r0, #25
 80050d2:	d5fb      	bpl.n	80050cc <_printf_i+0xb8>
 80050d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050d8:	2d00      	cmp	r5, #0
 80050da:	da03      	bge.n	80050e4 <_printf_i+0xd0>
 80050dc:	232d      	movs	r3, #45	@ 0x2d
 80050de:	426d      	negs	r5, r5
 80050e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050e4:	230a      	movs	r3, #10
 80050e6:	4859      	ldr	r0, [pc, #356]	@ (800524c <_printf_i+0x238>)
 80050e8:	e011      	b.n	800510e <_printf_i+0xfa>
 80050ea:	6821      	ldr	r1, [r4, #0]
 80050ec:	6833      	ldr	r3, [r6, #0]
 80050ee:	0608      	lsls	r0, r1, #24
 80050f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80050f4:	d402      	bmi.n	80050fc <_printf_i+0xe8>
 80050f6:	0649      	lsls	r1, r1, #25
 80050f8:	bf48      	it	mi
 80050fa:	b2ad      	uxthmi	r5, r5
 80050fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80050fe:	6033      	str	r3, [r6, #0]
 8005100:	bf14      	ite	ne
 8005102:	230a      	movne	r3, #10
 8005104:	2308      	moveq	r3, #8
 8005106:	4851      	ldr	r0, [pc, #324]	@ (800524c <_printf_i+0x238>)
 8005108:	2100      	movs	r1, #0
 800510a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800510e:	6866      	ldr	r6, [r4, #4]
 8005110:	2e00      	cmp	r6, #0
 8005112:	bfa8      	it	ge
 8005114:	6821      	ldrge	r1, [r4, #0]
 8005116:	60a6      	str	r6, [r4, #8]
 8005118:	bfa4      	itt	ge
 800511a:	f021 0104 	bicge.w	r1, r1, #4
 800511e:	6021      	strge	r1, [r4, #0]
 8005120:	b90d      	cbnz	r5, 8005126 <_printf_i+0x112>
 8005122:	2e00      	cmp	r6, #0
 8005124:	d04b      	beq.n	80051be <_printf_i+0x1aa>
 8005126:	4616      	mov	r6, r2
 8005128:	fbb5 f1f3 	udiv	r1, r5, r3
 800512c:	fb03 5711 	mls	r7, r3, r1, r5
 8005130:	5dc7      	ldrb	r7, [r0, r7]
 8005132:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005136:	462f      	mov	r7, r5
 8005138:	42bb      	cmp	r3, r7
 800513a:	460d      	mov	r5, r1
 800513c:	d9f4      	bls.n	8005128 <_printf_i+0x114>
 800513e:	2b08      	cmp	r3, #8
 8005140:	d10b      	bne.n	800515a <_printf_i+0x146>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	07df      	lsls	r7, r3, #31
 8005146:	d508      	bpl.n	800515a <_printf_i+0x146>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	6861      	ldr	r1, [r4, #4]
 800514c:	4299      	cmp	r1, r3
 800514e:	bfde      	ittt	le
 8005150:	2330      	movle	r3, #48	@ 0x30
 8005152:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005156:	f106 36ff 	addle.w	r6, r6, #4294967295
 800515a:	1b92      	subs	r2, r2, r6
 800515c:	6122      	str	r2, [r4, #16]
 800515e:	464b      	mov	r3, r9
 8005160:	4621      	mov	r1, r4
 8005162:	4640      	mov	r0, r8
 8005164:	f8cd a000 	str.w	sl, [sp]
 8005168:	aa03      	add	r2, sp, #12
 800516a:	f7ff fee1 	bl	8004f30 <_printf_common>
 800516e:	3001      	adds	r0, #1
 8005170:	d14a      	bne.n	8005208 <_printf_i+0x1f4>
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	b004      	add	sp, #16
 8005178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	f043 0320 	orr.w	r3, r3, #32
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	2778      	movs	r7, #120	@ 0x78
 8005186:	4832      	ldr	r0, [pc, #200]	@ (8005250 <_printf_i+0x23c>)
 8005188:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	6831      	ldr	r1, [r6, #0]
 8005190:	061f      	lsls	r7, r3, #24
 8005192:	f851 5b04 	ldr.w	r5, [r1], #4
 8005196:	d402      	bmi.n	800519e <_printf_i+0x18a>
 8005198:	065f      	lsls	r7, r3, #25
 800519a:	bf48      	it	mi
 800519c:	b2ad      	uxthmi	r5, r5
 800519e:	6031      	str	r1, [r6, #0]
 80051a0:	07d9      	lsls	r1, r3, #31
 80051a2:	bf44      	itt	mi
 80051a4:	f043 0320 	orrmi.w	r3, r3, #32
 80051a8:	6023      	strmi	r3, [r4, #0]
 80051aa:	b11d      	cbz	r5, 80051b4 <_printf_i+0x1a0>
 80051ac:	2310      	movs	r3, #16
 80051ae:	e7ab      	b.n	8005108 <_printf_i+0xf4>
 80051b0:	4826      	ldr	r0, [pc, #152]	@ (800524c <_printf_i+0x238>)
 80051b2:	e7e9      	b.n	8005188 <_printf_i+0x174>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	f023 0320 	bic.w	r3, r3, #32
 80051ba:	6023      	str	r3, [r4, #0]
 80051bc:	e7f6      	b.n	80051ac <_printf_i+0x198>
 80051be:	4616      	mov	r6, r2
 80051c0:	e7bd      	b.n	800513e <_printf_i+0x12a>
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	6825      	ldr	r5, [r4, #0]
 80051c6:	1d18      	adds	r0, r3, #4
 80051c8:	6961      	ldr	r1, [r4, #20]
 80051ca:	6030      	str	r0, [r6, #0]
 80051cc:	062e      	lsls	r6, r5, #24
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	d501      	bpl.n	80051d6 <_printf_i+0x1c2>
 80051d2:	6019      	str	r1, [r3, #0]
 80051d4:	e002      	b.n	80051dc <_printf_i+0x1c8>
 80051d6:	0668      	lsls	r0, r5, #25
 80051d8:	d5fb      	bpl.n	80051d2 <_printf_i+0x1be>
 80051da:	8019      	strh	r1, [r3, #0]
 80051dc:	2300      	movs	r3, #0
 80051de:	4616      	mov	r6, r2
 80051e0:	6123      	str	r3, [r4, #16]
 80051e2:	e7bc      	b.n	800515e <_printf_i+0x14a>
 80051e4:	6833      	ldr	r3, [r6, #0]
 80051e6:	2100      	movs	r1, #0
 80051e8:	1d1a      	adds	r2, r3, #4
 80051ea:	6032      	str	r2, [r6, #0]
 80051ec:	681e      	ldr	r6, [r3, #0]
 80051ee:	6862      	ldr	r2, [r4, #4]
 80051f0:	4630      	mov	r0, r6
 80051f2:	f000 f96b 	bl	80054cc <memchr>
 80051f6:	b108      	cbz	r0, 80051fc <_printf_i+0x1e8>
 80051f8:	1b80      	subs	r0, r0, r6
 80051fa:	6060      	str	r0, [r4, #4]
 80051fc:	6863      	ldr	r3, [r4, #4]
 80051fe:	6123      	str	r3, [r4, #16]
 8005200:	2300      	movs	r3, #0
 8005202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005206:	e7aa      	b.n	800515e <_printf_i+0x14a>
 8005208:	4632      	mov	r2, r6
 800520a:	4649      	mov	r1, r9
 800520c:	4640      	mov	r0, r8
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	47d0      	blx	sl
 8005212:	3001      	adds	r0, #1
 8005214:	d0ad      	beq.n	8005172 <_printf_i+0x15e>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	079b      	lsls	r3, r3, #30
 800521a:	d413      	bmi.n	8005244 <_printf_i+0x230>
 800521c:	68e0      	ldr	r0, [r4, #12]
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	4298      	cmp	r0, r3
 8005222:	bfb8      	it	lt
 8005224:	4618      	movlt	r0, r3
 8005226:	e7a6      	b.n	8005176 <_printf_i+0x162>
 8005228:	2301      	movs	r3, #1
 800522a:	4632      	mov	r2, r6
 800522c:	4649      	mov	r1, r9
 800522e:	4640      	mov	r0, r8
 8005230:	47d0      	blx	sl
 8005232:	3001      	adds	r0, #1
 8005234:	d09d      	beq.n	8005172 <_printf_i+0x15e>
 8005236:	3501      	adds	r5, #1
 8005238:	68e3      	ldr	r3, [r4, #12]
 800523a:	9903      	ldr	r1, [sp, #12]
 800523c:	1a5b      	subs	r3, r3, r1
 800523e:	42ab      	cmp	r3, r5
 8005240:	dcf2      	bgt.n	8005228 <_printf_i+0x214>
 8005242:	e7eb      	b.n	800521c <_printf_i+0x208>
 8005244:	2500      	movs	r5, #0
 8005246:	f104 0619 	add.w	r6, r4, #25
 800524a:	e7f5      	b.n	8005238 <_printf_i+0x224>
 800524c:	0800581d 	.word	0x0800581d
 8005250:	0800582e 	.word	0x0800582e

08005254 <__sflush_r>:
 8005254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	0716      	lsls	r6, r2, #28
 800525c:	4605      	mov	r5, r0
 800525e:	460c      	mov	r4, r1
 8005260:	d454      	bmi.n	800530c <__sflush_r+0xb8>
 8005262:	684b      	ldr	r3, [r1, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	dc02      	bgt.n	800526e <__sflush_r+0x1a>
 8005268:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	dd48      	ble.n	8005300 <__sflush_r+0xac>
 800526e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005270:	2e00      	cmp	r6, #0
 8005272:	d045      	beq.n	8005300 <__sflush_r+0xac>
 8005274:	2300      	movs	r3, #0
 8005276:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800527a:	682f      	ldr	r7, [r5, #0]
 800527c:	6a21      	ldr	r1, [r4, #32]
 800527e:	602b      	str	r3, [r5, #0]
 8005280:	d030      	beq.n	80052e4 <__sflush_r+0x90>
 8005282:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005284:	89a3      	ldrh	r3, [r4, #12]
 8005286:	0759      	lsls	r1, r3, #29
 8005288:	d505      	bpl.n	8005296 <__sflush_r+0x42>
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	1ad2      	subs	r2, r2, r3
 800528e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005290:	b10b      	cbz	r3, 8005296 <__sflush_r+0x42>
 8005292:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005294:	1ad2      	subs	r2, r2, r3
 8005296:	2300      	movs	r3, #0
 8005298:	4628      	mov	r0, r5
 800529a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800529c:	6a21      	ldr	r1, [r4, #32]
 800529e:	47b0      	blx	r6
 80052a0:	1c43      	adds	r3, r0, #1
 80052a2:	89a3      	ldrh	r3, [r4, #12]
 80052a4:	d106      	bne.n	80052b4 <__sflush_r+0x60>
 80052a6:	6829      	ldr	r1, [r5, #0]
 80052a8:	291d      	cmp	r1, #29
 80052aa:	d82b      	bhi.n	8005304 <__sflush_r+0xb0>
 80052ac:	4a28      	ldr	r2, [pc, #160]	@ (8005350 <__sflush_r+0xfc>)
 80052ae:	410a      	asrs	r2, r1
 80052b0:	07d6      	lsls	r6, r2, #31
 80052b2:	d427      	bmi.n	8005304 <__sflush_r+0xb0>
 80052b4:	2200      	movs	r2, #0
 80052b6:	6062      	str	r2, [r4, #4]
 80052b8:	6922      	ldr	r2, [r4, #16]
 80052ba:	04d9      	lsls	r1, r3, #19
 80052bc:	6022      	str	r2, [r4, #0]
 80052be:	d504      	bpl.n	80052ca <__sflush_r+0x76>
 80052c0:	1c42      	adds	r2, r0, #1
 80052c2:	d101      	bne.n	80052c8 <__sflush_r+0x74>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b903      	cbnz	r3, 80052ca <__sflush_r+0x76>
 80052c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80052ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052cc:	602f      	str	r7, [r5, #0]
 80052ce:	b1b9      	cbz	r1, 8005300 <__sflush_r+0xac>
 80052d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052d4:	4299      	cmp	r1, r3
 80052d6:	d002      	beq.n	80052de <__sflush_r+0x8a>
 80052d8:	4628      	mov	r0, r5
 80052da:	f7ff fbf3 	bl	8004ac4 <_free_r>
 80052de:	2300      	movs	r3, #0
 80052e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80052e2:	e00d      	b.n	8005300 <__sflush_r+0xac>
 80052e4:	2301      	movs	r3, #1
 80052e6:	4628      	mov	r0, r5
 80052e8:	47b0      	blx	r6
 80052ea:	4602      	mov	r2, r0
 80052ec:	1c50      	adds	r0, r2, #1
 80052ee:	d1c9      	bne.n	8005284 <__sflush_r+0x30>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0c6      	beq.n	8005284 <__sflush_r+0x30>
 80052f6:	2b1d      	cmp	r3, #29
 80052f8:	d001      	beq.n	80052fe <__sflush_r+0xaa>
 80052fa:	2b16      	cmp	r3, #22
 80052fc:	d11d      	bne.n	800533a <__sflush_r+0xe6>
 80052fe:	602f      	str	r7, [r5, #0]
 8005300:	2000      	movs	r0, #0
 8005302:	e021      	b.n	8005348 <__sflush_r+0xf4>
 8005304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005308:	b21b      	sxth	r3, r3
 800530a:	e01a      	b.n	8005342 <__sflush_r+0xee>
 800530c:	690f      	ldr	r7, [r1, #16]
 800530e:	2f00      	cmp	r7, #0
 8005310:	d0f6      	beq.n	8005300 <__sflush_r+0xac>
 8005312:	0793      	lsls	r3, r2, #30
 8005314:	bf18      	it	ne
 8005316:	2300      	movne	r3, #0
 8005318:	680e      	ldr	r6, [r1, #0]
 800531a:	bf08      	it	eq
 800531c:	694b      	ldreq	r3, [r1, #20]
 800531e:	1bf6      	subs	r6, r6, r7
 8005320:	600f      	str	r7, [r1, #0]
 8005322:	608b      	str	r3, [r1, #8]
 8005324:	2e00      	cmp	r6, #0
 8005326:	ddeb      	ble.n	8005300 <__sflush_r+0xac>
 8005328:	4633      	mov	r3, r6
 800532a:	463a      	mov	r2, r7
 800532c:	4628      	mov	r0, r5
 800532e:	6a21      	ldr	r1, [r4, #32]
 8005330:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005334:	47e0      	blx	ip
 8005336:	2800      	cmp	r0, #0
 8005338:	dc07      	bgt.n	800534a <__sflush_r+0xf6>
 800533a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800533e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005342:	f04f 30ff 	mov.w	r0, #4294967295
 8005346:	81a3      	strh	r3, [r4, #12]
 8005348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800534a:	4407      	add	r7, r0
 800534c:	1a36      	subs	r6, r6, r0
 800534e:	e7e9      	b.n	8005324 <__sflush_r+0xd0>
 8005350:	dfbffffe 	.word	0xdfbffffe

08005354 <_fflush_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	690b      	ldr	r3, [r1, #16]
 8005358:	4605      	mov	r5, r0
 800535a:	460c      	mov	r4, r1
 800535c:	b913      	cbnz	r3, 8005364 <_fflush_r+0x10>
 800535e:	2500      	movs	r5, #0
 8005360:	4628      	mov	r0, r5
 8005362:	bd38      	pop	{r3, r4, r5, pc}
 8005364:	b118      	cbz	r0, 800536e <_fflush_r+0x1a>
 8005366:	6a03      	ldr	r3, [r0, #32]
 8005368:	b90b      	cbnz	r3, 800536e <_fflush_r+0x1a>
 800536a:	f7ff f9b1 	bl	80046d0 <__sinit>
 800536e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f3      	beq.n	800535e <_fflush_r+0xa>
 8005376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005378:	07d0      	lsls	r0, r2, #31
 800537a:	d404      	bmi.n	8005386 <_fflush_r+0x32>
 800537c:	0599      	lsls	r1, r3, #22
 800537e:	d402      	bmi.n	8005386 <_fflush_r+0x32>
 8005380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005382:	f7ff fb9c 	bl	8004abe <__retarget_lock_acquire_recursive>
 8005386:	4628      	mov	r0, r5
 8005388:	4621      	mov	r1, r4
 800538a:	f7ff ff63 	bl	8005254 <__sflush_r>
 800538e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005390:	4605      	mov	r5, r0
 8005392:	07da      	lsls	r2, r3, #31
 8005394:	d4e4      	bmi.n	8005360 <_fflush_r+0xc>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	059b      	lsls	r3, r3, #22
 800539a:	d4e1      	bmi.n	8005360 <_fflush_r+0xc>
 800539c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800539e:	f7ff fb8f 	bl	8004ac0 <__retarget_lock_release_recursive>
 80053a2:	e7dd      	b.n	8005360 <_fflush_r+0xc>

080053a4 <__swhatbuf_r>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	460c      	mov	r4, r1
 80053a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053ac:	4615      	mov	r5, r2
 80053ae:	2900      	cmp	r1, #0
 80053b0:	461e      	mov	r6, r3
 80053b2:	b096      	sub	sp, #88	@ 0x58
 80053b4:	da0c      	bge.n	80053d0 <__swhatbuf_r+0x2c>
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	2100      	movs	r1, #0
 80053ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053be:	bf14      	ite	ne
 80053c0:	2340      	movne	r3, #64	@ 0x40
 80053c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053c6:	2000      	movs	r0, #0
 80053c8:	6031      	str	r1, [r6, #0]
 80053ca:	602b      	str	r3, [r5, #0]
 80053cc:	b016      	add	sp, #88	@ 0x58
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	466a      	mov	r2, sp
 80053d2:	f000 f849 	bl	8005468 <_fstat_r>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	dbed      	blt.n	80053b6 <__swhatbuf_r+0x12>
 80053da:	9901      	ldr	r1, [sp, #4]
 80053dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053e4:	4259      	negs	r1, r3
 80053e6:	4159      	adcs	r1, r3
 80053e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053ec:	e7eb      	b.n	80053c6 <__swhatbuf_r+0x22>

080053ee <__smakebuf_r>:
 80053ee:	898b      	ldrh	r3, [r1, #12]
 80053f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053f2:	079d      	lsls	r5, r3, #30
 80053f4:	4606      	mov	r6, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	d507      	bpl.n	800540a <__smakebuf_r+0x1c>
 80053fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053fe:	6023      	str	r3, [r4, #0]
 8005400:	6123      	str	r3, [r4, #16]
 8005402:	2301      	movs	r3, #1
 8005404:	6163      	str	r3, [r4, #20]
 8005406:	b003      	add	sp, #12
 8005408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800540a:	466a      	mov	r2, sp
 800540c:	ab01      	add	r3, sp, #4
 800540e:	f7ff ffc9 	bl	80053a4 <__swhatbuf_r>
 8005412:	9f00      	ldr	r7, [sp, #0]
 8005414:	4605      	mov	r5, r0
 8005416:	4639      	mov	r1, r7
 8005418:	4630      	mov	r0, r6
 800541a:	f7ff fbbd 	bl	8004b98 <_malloc_r>
 800541e:	b948      	cbnz	r0, 8005434 <__smakebuf_r+0x46>
 8005420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005424:	059a      	lsls	r2, r3, #22
 8005426:	d4ee      	bmi.n	8005406 <__smakebuf_r+0x18>
 8005428:	f023 0303 	bic.w	r3, r3, #3
 800542c:	f043 0302 	orr.w	r3, r3, #2
 8005430:	81a3      	strh	r3, [r4, #12]
 8005432:	e7e2      	b.n	80053fa <__smakebuf_r+0xc>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800543a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	9b01      	ldr	r3, [sp, #4]
 8005442:	6020      	str	r0, [r4, #0]
 8005444:	b15b      	cbz	r3, 800545e <__smakebuf_r+0x70>
 8005446:	4630      	mov	r0, r6
 8005448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800544c:	f000 f81e 	bl	800548c <_isatty_r>
 8005450:	b128      	cbz	r0, 800545e <__smakebuf_r+0x70>
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	f023 0303 	bic.w	r3, r3, #3
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	431d      	orrs	r5, r3
 8005462:	81a5      	strh	r5, [r4, #12]
 8005464:	e7cf      	b.n	8005406 <__smakebuf_r+0x18>
	...

08005468 <_fstat_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	2300      	movs	r3, #0
 800546c:	4d06      	ldr	r5, [pc, #24]	@ (8005488 <_fstat_r+0x20>)
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	4611      	mov	r1, r2
 8005474:	602b      	str	r3, [r5, #0]
 8005476:	f7fc f997 	bl	80017a8 <_fstat>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	d102      	bne.n	8005484 <_fstat_r+0x1c>
 800547e:	682b      	ldr	r3, [r5, #0]
 8005480:	b103      	cbz	r3, 8005484 <_fstat_r+0x1c>
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	bd38      	pop	{r3, r4, r5, pc}
 8005486:	bf00      	nop
 8005488:	20000424 	.word	0x20000424

0800548c <_isatty_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	2300      	movs	r3, #0
 8005490:	4d05      	ldr	r5, [pc, #20]	@ (80054a8 <_isatty_r+0x1c>)
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	f7fc f995 	bl	80017c6 <_isatty>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_isatty_r+0x1a>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_isatty_r+0x1a>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	20000424 	.word	0x20000424

080054ac <_sbrk_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	2300      	movs	r3, #0
 80054b0:	4d05      	ldr	r5, [pc, #20]	@ (80054c8 <_sbrk_r+0x1c>)
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fc f99c 	bl	80017f4 <_sbrk>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_sbrk_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_sbrk_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20000424 	.word	0x20000424

080054cc <memchr>:
 80054cc:	4603      	mov	r3, r0
 80054ce:	b510      	push	{r4, lr}
 80054d0:	b2c9      	uxtb	r1, r1
 80054d2:	4402      	add	r2, r0
 80054d4:	4293      	cmp	r3, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	d101      	bne.n	80054de <memchr+0x12>
 80054da:	2000      	movs	r0, #0
 80054dc:	e003      	b.n	80054e6 <memchr+0x1a>
 80054de:	7804      	ldrb	r4, [r0, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	428c      	cmp	r4, r1
 80054e4:	d1f6      	bne.n	80054d4 <memchr+0x8>
 80054e6:	bd10      	pop	{r4, pc}

080054e8 <_init>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr

080054f4 <_fini>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr
